{
  "version": 3,
  "sources": ["../../three/src/renderers/common/Animation.js", "../../three/src/renderers/common/ChainMap.js", "../../three/src/math/Plane.js", "../../three/src/renderers/common/ClippingContext.js", "../../three/src/renderers/common/RenderObject.js", "../../three/src/renderers/common/RenderObjects.js", "../../three/src/renderers/common/DataMap.js", "../../three/src/renderers/common/Constants.js", "../../three/src/renderers/common/Attributes.js", "../../three/src/renderers/common/Geometries.js", "../../three/src/renderers/common/Info.js", "../../three/src/renderers/common/Pipeline.js", "../../three/src/renderers/common/RenderPipeline.js", "../../three/src/renderers/common/ComputePipeline.js", "../../three/src/renderers/common/ProgrammableStage.js", "../../three/src/renderers/common/Pipelines.js", "../../three/src/renderers/common/Bindings.js", "../../three/src/nodes/core/LightingModel.js", "../../three/src/nodes/core/NodeAttribute.js", "../../three/src/nodes/core/NodeUniform.js", "../../three/src/nodes/core/NodeVar.js", "../../three/src/nodes/core/NodeVarying.js", "../../three/src/nodes/core/NodeCode.js", "../../three/src/nodes/core/NodeCache.js", "../../three/src/nodes/core/ParameterNode.js", "../../three/src/nodes/code/CodeNode.js", "../../three/src/nodes/code/FunctionNode.js", "../../three/src/renderers/common/Uniform.js", "../../three/src/renderers/common/nodes/NodeUniform.js", "../../three/src/nodes/core/StackNode.js", "../../three/src/nodes/utils/EquirectUVNode.js", "../../three/src/math/Box3.js", "../../three/src/math/Sphere.js", "../../three/src/math/Ray.js", "../../three/src/math/Euler.js", "../../three/src/core/Layers.js", "../../three/src/core/Object3D.js", "../../three/src/math/Triangle.js", "../../three/src/materials/MeshBasicMaterial.js", "../../three/src/core/BufferGeometry.js", "../../three/src/objects/Mesh.js", "../../three/src/geometries/BoxGeometry.js", "../../three/src/renderers/shaders/UniformsUtils.js", "../../three/src/renderers/shaders/ShaderChunk/default_vertex.glsl.js", "../../three/src/renderers/shaders/ShaderChunk/default_fragment.glsl.js", "../../three/src/materials/ShaderMaterial.js", "../../three/src/core/RenderTarget.js", "../../three/src/renderers/WebGLRenderTarget.js", "../../three/src/cameras/Camera.js", "../../three/src/cameras/PerspectiveCamera.js", "../../three/src/cameras/CubeCamera.js", "../../three/src/textures/CubeTexture.js", "../../three/src/renderers/WebGLCubeRenderTarget.js", "../../three/src/scenes/Scene.js", "../../three/src/renderers/common/CubeRenderTarget.js", "../../three/src/nodes/pmrem/PMREMUtils.js", "../../three/src/cameras/OrthographicCamera.js", "../../three/src/renderers/common/extras/PMREMGenerator.js", "../../three/src/renderers/common/BindGroup.js", "../../three/src/nodes/core/NodeBuilder.js", "../../three/src/nodes/core/NodeFrame.js", "../../three/src/nodes/core/NodeFunctionInput.js", "../../three/src/nodes/core/StructTypeNode.js", "../../three/src/nodes/core/OutputStructNode.js", "../../three/src/nodes/core/MRTNode.js", "../../three/src/nodes/utils/FunctionOverloadingNode.js", "../../three/src/nodes/utils/MatcapUVNode.js", "../../three/src/nodes/utils/TimerNode.js", "../../three/src/nodes/utils/OscNode.js", "../../three/src/nodes/utils/RotateNode.js", "../../three/src/nodes/utils/SpriteSheetUVNode.js", "../../three/src/nodes/utils/StorageArrayElementNode.js", "../../three/src/nodes/utils/TriplanarTexturesNode.js", "../../three/src/nodes/utils/ReflectorNode.js", "../../three/src/renderers/common/QuadMesh.js", "../../three/src/nodes/utils/RTTNode.js", "../../three/src/nodes/accessors/PointUVNode.js", "../../three/src/nodes/accessors/SceneNode.js", "../../three/src/renderers/webgpu/utils/WebGPUConstants.js", "../../three/src/nodes/accessors/StorageTextureNode.js", "../../three/src/nodes/accessors/Texture3DNode.js", "../../three/src/nodes/display/PosterizeNode.js", "../../three/src/nodes/display/ViewportSharedTextureNode.js", "../../three/src/nodes/display/PassNode.js", "../../three/src/nodes/display/GaussianBlurNode.js", "../../three/src/nodes/display/AfterImageNode.js", "../../three/src/nodes/display/ColorAdjustment.js", "../../three/src/nodes/display/AnamorphicNode.js", "../../three/src/nodes/display/FilmNode.js", "../../three/src/textures/DataTexture.js", "../../three/src/nodes/display/GTAONode.js", "../../three/src/nodes/display/BloomNode.js", "../../three/src/nodes/display/SSAAPassNode.js", "../../three/src/cameras/StereoCamera.js", "../../three/src/nodes/display/StereoPassNode.js", "../../three/src/nodes/display/StereoCompositePassNode.js", "../../three/src/nodes/code/ScriptableValueNode.js", "../../three/src/nodes/code/ScriptableNode.js", "../../three/src/nodes/fog/FogNode.js", "../../three/src/nodes/fog/FogRangeNode.js", "../../three/src/nodes/fog/FogExp2Node.js", "../../three/src/nodes/geometry/RangeNode.js", "../../three/src/nodes/lighting/AnalyticLightNode.js", "../../three/src/nodes/lighting/LightUtils.js", "../../three/src/nodes/accessors/Lights.js", "../../three/src/nodes/math/Hash.js", "../../three/src/nodes/math/TriNoise3D.js", "../../three/src/nodes/utils/Packing.js", "../../three/src/nodes/utils/UVUtils.js", "../../three/src/nodes/utils/SpriteUtils.js", "../../three/src/nodes/utils/ViewportUtils.js", "../../three/src/nodes/accessors/TextureBicubic.js", "../../three/src/nodes/accessors/VelocityNode.js", "../../three/src/nodes/display/BlendMode.js", "../../three/src/nodes/display/MotionBlur.js", "../../three/src/nodes/display/BleachBypass.js", "../../three/src/nodes/display/Sepia.js", "../../three/src/nodes/display/ColorSpaceFunctions.js", "../../three/src/nodes/display/ToneMappingFunctions.js", "../../three/src/nodes/gpgpu/ComputeBuiltinNode.js", "../../three/src/nodes/gpgpu/BarrierNode.js", "../../three/src/nodes/gpgpu/AtomicFunctionNode.js", "../../three/src/nodes/pmrem/PMREMNode.js", "../../three/src/nodes/procedural/Checker.js", "../../three/src/nodes/materialx/lib/mx_noise.js", "../../three/src/nodes/materialx/lib/mx_hsv.js", "../../three/src/nodes/materialx/lib/mx_transform_color.js", "../../three/src/nodes/functions/BSDF/F_Schlick.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated_Anisotropic.js", "../../three/src/nodes/functions/BSDF/D_GGX.js", "../../three/src/nodes/functions/BSDF/D_GGX_Anisotropic.js", "../../three/src/nodes/functions/BSDF/BRDF_GGX.js", "../../three/src/nodes/functions/BSDF/BRDF_Lambert.js", "../../three/src/nodes/functions/BSDF/DFGApprox.js", "../../three/src/nodes/functions/BSDF/Schlick_to_F0.js", "../../three/src/nodes/functions/material/getGeometryRoughness.js", "../../three/src/nodes/functions/material/getRoughness.js", "../../three/src/nodes/functions/material/getShIrradianceAt.js", "../../three/src/nodes/lighting/PointLightNode.js", "../../three/src/nodes/lighting/DirectionalLightNode.js", "../../three/src/nodes/lighting/RectAreaLightNode.js", "../../three/src/nodes/lighting/SpotLightNode.js", "../../three/src/nodes/lighting/IESSpotLightNode.js", "../../three/src/nodes/lighting/AmbientLightNode.js", "../../three/src/nodes/lighting/HemisphereLightNode.js", "../../three/src/nodes/lighting/LightProbeNode.js", "../../three/src/nodes/lighting/EnvironmentNode.js", "../../three/src/nodes/utils/CubeMapNode.js", "../../three/src/nodes/lighting/BasicEnvironmentNode.js", "../../three/src/nodes/core/NodeParser.js", "../../three/src/nodes/core/NodeFunction.js", "../../three/src/nodes/parsers/GLSLNodeFunction.js", "../../three/src/nodes/parsers/GLSLNodeParser.js", "../../three/src/nodes/functions/BasicLightingModel.js", "../../three/src/nodes/functions/PhongLightingModel.js", "../../three/src/nodes/functions/BSDF/EnvironmentBRDF.js", "../../three/src/nodes/functions/BSDF/BRDF_Sheen.js", "../../three/src/nodes/functions/BSDF/LTC.js", "../../three/src/nodes/functions/PhysicalLightingModel.js", "../../three/src/renderers/common/RenderList.js", "../../three/src/renderers/common/RenderLists.js", "../../three/src/renderers/common/RenderContext.js", "../../three/src/renderers/common/RenderContexts.js", "../../three/src/renderers/common/Textures.js", "../../three/src/renderers/common/Color4.js", "../../three/src/geometries/SphereGeometry.js", "../../three/src/renderers/common/Background.js", "../../three/src/renderers/common/nodes/NodeBuilderState.js", "../../three/src/renderers/common/nodes/Nodes.js", "../../three/src/renderers/common/RenderBundle.js", "../../three/src/renderers/common/RenderBundles.js", "../../three/src/renderers/common/nodes/NodeLibrary.js", "../../three/src/math/Frustum.js", "../../three/src/renderers/common/Renderer.js", "../../three/src/renderers/common/Binding.js", "../../three/src/renderers/common/BufferUtils.js", "../../three/src/renderers/common/Buffer.js", "../../three/src/renderers/common/UniformBuffer.js", "../../three/src/renderers/common/nodes/NodeUniformBuffer.js", "../../three/src/renderers/common/UniformsGroup.js", "../../three/src/renderers/common/nodes/NodeUniformsGroup.js", "../../three/src/renderers/common/SampledTexture.js", "../../three/src/renderers/common/nodes/NodeSampledTexture.js", "../../three/src/renderers/webgl-fallback/nodes/GLSLNodeBuilder.js", "../../three/src/renderers/common/Backend.js", "../../three/src/renderers/webgl-fallback/utils/WebGLAttributeUtils.js", "../../three/src/renderers/webgl-fallback/utils/WebGLState.js", "../../three/src/renderers/webgl-fallback/utils/WebGLUtils.js", "../../three/src/renderers/webgl-fallback/utils/WebGLTextureUtils.js", "../../three/src/renderers/webgl-fallback/utils/WebGLExtensions.js", "../../three/src/renderers/webgl-fallback/utils/WebGLCapabilities.js", "../../three/src/renderers/webgl-fallback/utils/WebGLConstants.js", "../../three/src/renderers/webgl-fallback/WebGLBufferRenderer.js", "../../three/src/renderers/webgl-fallback/WebGLBackend.js", "../../three/src/renderers/common/Sampler.js", "../../three/src/renderers/common/nodes/NodeSampler.js", "../../three/src/renderers/common/StorageBuffer.js", "../../three/src/renderers/common/nodes/NodeStorageBuffer.js", "../../three/src/renderers/webgpu/utils/WebGPUTexturePassUtils.js", "../../three/src/renderers/webgpu/utils/WebGPUTextureUtils.js", "../../three/src/renderers/webgpu/nodes/WGSLNodeFunction.js", "../../three/src/renderers/webgpu/nodes/WGSLNodeParser.js", "../../three/src/renderers/webgpu/nodes/WGSLNodeBuilder.js", "../../three/src/renderers/webgpu/utils/WebGPUUtils.js", "../../three/src/renderers/webgpu/utils/WebGPUAttributeUtils.js", "../../three/src/renderers/webgpu/utils/WebGPUBindingUtils.js", "../../three/src/renderers/webgpu/utils/WebGPUPipelineUtils.js", "../../three/src/renderers/webgpu/WebGPUBackend.js", "../../three/src/materials/MeshPhongMaterial.js", "../../three/src/materials/nodes/MeshPhongNodeMaterial.js", "../../three/src/materials/MeshStandardMaterial.js", "../../three/src/materials/nodes/MeshStandardNodeMaterial.js", "../../three/src/materials/MeshPhysicalMaterial.js", "../../three/src/materials/nodes/MeshPhysicalNodeMaterial.js", "../../three/src/materials/MeshToonMaterial.js", "../../three/src/nodes/functions/ToonLightingModel.js", "../../three/src/materials/nodes/MeshToonNodeMaterial.js", "../../three/src/nodes/lighting/BasicLightMapNode.js", "../../three/src/materials/nodes/MeshBasicNodeMaterial.js", "../../three/src/materials/MeshLambertMaterial.js", "../../three/src/materials/nodes/MeshLambertNodeMaterial.js", "../../three/src/materials/MeshNormalMaterial.js", "../../three/src/materials/nodes/MeshNormalNodeMaterial.js", "../../three/src/materials/MeshMatcapMaterial.js", "../../three/src/materials/nodes/MeshMatcapNodeMaterial.js", "../../three/src/materials/LineBasicMaterial.js", "../../three/src/materials/nodes/LineBasicNodeMaterial.js", "../../three/src/materials/LineDashedMaterial.js", "../../three/src/materials/nodes/LineDashedNodeMaterial.js", "../../three/src/materials/SpriteMaterial.js", "../../three/src/materials/nodes/SpriteNodeMaterial.js", "../../three/src/materials/ShadowMaterial.js", "../../three/src/nodes/functions/ShadowMaskModel.js", "../../three/src/materials/nodes/ShadowNodeMaterial.js", "../../three/src/lights/Light.js", "../../three/src/lights/LightShadow.js", "../../three/src/lights/PointLightShadow.js", "../../three/src/lights/PointLight.js", "../../three/src/lights/DirectionalLightShadow.js", "../../three/src/lights/DirectionalLight.js", "../../three/src/lights/RectAreaLight.js", "../../three/src/lights/SpotLightShadow.js", "../../three/src/lights/SpotLight.js", "../../three/src/lights/AmbientLight.js", "../../three/src/lights/HemisphereLight.js", "../../three/src/math/SphericalHarmonics3.js", "../../three/src/lights/LightProbe.js", "../../three/src/lights/webgpu/IESSpotLight.js", "../../three/src/renderers/webgpu/nodes/StandardNodeLibrary.js", "../../three/src/renderers/webgpu/WebGPURenderer.js"],
  "sourcesContent": ["class Animation {\n\n\tconstructor( nodes, info ) {\n\n\t\tthis.nodes = nodes;\n\t\tthis.info = info;\n\n\t\tthis.animationLoop = null;\n\t\tthis.requestId = null;\n\n\t\tthis._init();\n\n\t}\n\n\t_init() {\n\n\t\tconst update = ( time, frame ) => {\n\n\t\t\tthis.requestId = self.requestAnimationFrame( update );\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t\tthis.nodes.nodeFrame.update();\n\n\t\t\tthis.info.frame = this.nodes.nodeFrame.frameId;\n\n\t\t\tif ( this.animationLoop !== null ) this.animationLoop( time, frame );\n\n\t\t};\n\n\t\tupdate();\n\n\t}\n\n\tdispose() {\n\n\t\tself.cancelAnimationFrame( this.requestId );\n\t\tthis.requestId = null;\n\n\t}\n\n\tsetAnimationLoop( callback ) {\n\n\t\tthis.animationLoop = callback;\n\n\t}\n\n}\n\nexport default Animation;\n", "export default class ChainMap {\n\n\tconstructor() {\n\n\t\tthis.weakMap = new WeakMap();\n\n\t}\n\n\tget( keys ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\tif ( map === undefined ) return undefined;\n\n\t\t}\n\n\t\treturn map.get( keys[ keys.length - 1 ] );\n\n\t}\n\n\tset( keys, value ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\tconst key = keys[ i ];\n\n\t\t\tif ( map.has( key ) === false ) map.set( key, new WeakMap() );\n\n\t\t\tmap = map.get( key );\n\n\t\t}\n\n\t\treturn map.set( keys[ keys.length - 1 ], value );\n\n\t}\n\n\tdelete( keys ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\tif ( map === undefined ) return false;\n\n\t\t}\n\n\t\treturn map.delete( keys[ keys.length - 1 ] );\n\n\t}\n\n}\n", "import { Matrix3 } from './Matrix3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\tthis.isPlane = true;\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Plane };\n", "import { Matrix3 } from '../../math/Matrix3.js';\nimport { Plane } from '../../math/Plane.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { hash } from '../../nodes/core/NodeUtils.js';\n\nconst _plane = /*@__PURE__*/ new Plane();\n\nclass ClippingContext {\n\n\tconstructor() {\n\n\t\tthis.version = 0;\n\n\t\tthis.globalClippingCount = 0;\n\n\t\tthis.localClippingCount = 0;\n\t\tthis.localClippingEnabled = false;\n\t\tthis.localClipIntersection = false;\n\n\t\tthis.planes = [];\n\n\t\tthis.parentVersion = 0;\n\t\tthis.viewNormalMatrix = new Matrix3();\n\t\tthis.cacheKey = 0;\n\n\t}\n\n\tprojectPlanes( source, offset ) {\n\n\t\tconst l = source.length;\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t_plane.copy( source[ i ] ).applyMatrix4( this.viewMatrix, this.viewNormalMatrix );\n\n\t\t\tconst v = planes[ offset + i ];\n\t\t\tconst normal = _plane.normal;\n\n\t\t\tv.x = - normal.x;\n\t\t\tv.y = - normal.y;\n\t\t\tv.z = - normal.z;\n\t\t\tv.w = _plane.constant;\n\n\t\t}\n\n\t}\n\n\tupdateGlobal( renderer, camera ) {\n\n\t\tconst rendererClippingPlanes = renderer.clippingPlanes;\n\t\tthis.viewMatrix = camera.matrixWorldInverse;\n\n\t\tthis.viewNormalMatrix.getNormalMatrix( this.viewMatrix );\n\n\t\tlet update = false;\n\n\t\tif ( Array.isArray( rendererClippingPlanes ) && rendererClippingPlanes.length !== 0 ) {\n\n\t\t\tconst l = rendererClippingPlanes.length;\n\n\t\t\tif ( l !== this.globalClippingCount ) {\n\n\t\t\t\tconst planes = [];\n\n\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\tplanes.push( new Vector4() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.globalClippingCount = l;\n\t\t\t\tthis.planes = planes;\n\n\t\t\t\tupdate = true;\n\n\t\t\t}\n\n\t\t\tthis.projectPlanes( rendererClippingPlanes, 0 );\n\n\t\t} else if ( this.globalClippingCount !== 0 ) {\n\n\t\t\tthis.globalClippingCount = 0;\n\t\t\tthis.planes = [];\n\t\t\tupdate = true;\n\n\t\t}\n\n\t\tif ( renderer.localClippingEnabled !== this.localClippingEnabled ) {\n\n\t\t\tthis.localClippingEnabled = renderer.localClippingEnabled;\n\t\t\tupdate = true;\n\n\t\t}\n\n\t\tif ( update ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.cacheKey = hash( this.globalClippingCount, this.localClippingEnabled === true ? 1 : 0 );\n\n\t\t}\n\n\t}\n\n\tupdate( parent, material ) {\n\n\t\tlet update = false;\n\n\t\tif ( this !== parent && parent.version !== this.parentVersion ) {\n\n\t\t\tthis.globalClippingCount = material.isShadowNodeMaterial ? 0 : parent.globalClippingCount;\n\t\t\tthis.localClippingEnabled = parent.localClippingEnabled;\n\t\t\tthis.planes = Array.from( parent.planes );\n\t\t\tthis.parentVersion = parent.version;\n\t\t\tthis.viewMatrix = parent.viewMatrix;\n\t\t\tthis.viewNormalMatrix = parent.viewNormalMatrix;\n\n\t\t\tupdate = true;\n\n\t\t}\n\n\t\tif ( this.localClippingEnabled ) {\n\n\t\t\tconst localClippingPlanes = material.clippingPlanes;\n\n\t\t\tif ( ( Array.isArray( localClippingPlanes ) && localClippingPlanes.length !== 0 ) ) {\n\n\t\t\t\tconst l = localClippingPlanes.length;\n\t\t\t\tconst planes = this.planes;\n\t\t\t\tconst offset = this.globalClippingCount;\n\n\t\t\t\tif ( update || l !== this.localClippingCount ) {\n\n\t\t\t\t\tplanes.length = offset + l;\n\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tplanes[ offset + i ] = new Vector4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.localClippingCount = l;\n\t\t\t\t\tupdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tthis.projectPlanes( localClippingPlanes, offset );\n\n\n\t\t\t} else if ( this.localClippingCount !== 0 ) {\n\n\t\t\t\tthis.localClippingCount = 0;\n\t\t\t\tupdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.localClipIntersection !== material.clipIntersection ) {\n\n\t\t\t\tthis.localClipIntersection = material.clipIntersection;\n\t\t\t\tupdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( update ) {\n\n\t\t\tthis.version += parent.version;\n\t\t\tthis.cacheKey = hash( parent.cacheKey, this.localClippingCount, this.localClipIntersection === true ? 1 : 0 );\n\n\t\t}\n\n\t}\n\n}\n\nexport default ClippingContext;\n", "import { hashString } from '../../nodes/core/NodeUtils.js';\nimport ClippingContext from './ClippingContext.js';\n\nlet _id = 0;\n\nfunction getKeys( obj ) {\n\n\tconst keys = Object.keys( obj );\n\n\tlet proto = Object.getPrototypeOf( obj );\n\n\twhile ( proto ) {\n\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( proto );\n\n\t\tfor ( const key in descriptors ) {\n\n\t\t\tif ( descriptors[ key ] !== undefined ) {\n\n\t\t\t\tconst descriptor = descriptors[ key ];\n\n\t\t\t\tif ( descriptor && typeof descriptor.get === 'function' ) {\n\n\t\t\t\t\tkeys.push( key );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tproto = Object.getPrototypeOf( proto );\n\n\t}\n\n\treturn keys;\n\n}\n\nexport default class RenderObject {\n\n\tconstructor( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext ) {\n\n\t\tthis._nodes = nodes;\n\t\tthis._geometries = geometries;\n\n\t\tthis.id = _id ++;\n\n\t\tthis.renderer = renderer;\n\t\tthis.object = object;\n\t\tthis.material = material;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.lightsNode = lightsNode;\n\t\tthis.context = renderContext;\n\n\t\tthis.geometry = object.geometry;\n\t\tthis.version = material.version;\n\n\t\tthis.drawRange = null;\n\n\t\tthis.attributes = null;\n\t\tthis.pipeline = null;\n\t\tthis.vertexBuffers = null;\n\t\tthis.drawParams = null;\n\n\t\tthis.bundle = null;\n\n\t\tthis.updateClipping( renderContext.clippingContext );\n\n\t\tthis.clippingContextVersion = this.clippingContext.version;\n\n\t\tthis.initialNodesCacheKey = this.getDynamicCacheKey();\n\t\tthis.initialCacheKey = this.getCacheKey();\n\n\t\tthis._nodeBuilderState = null;\n\t\tthis._bindings = null;\n\t\tthis._monitor = null;\n\n\t\tthis.onDispose = null;\n\n\t\tthis.isRenderObject = true;\n\n\t\tthis.onMaterialDispose = () => {\n\n\t\t\tthis.dispose();\n\n\t\t};\n\n\t\tthis.material.addEventListener( 'dispose', this.onMaterialDispose );\n\n\t}\n\n\tupdateClipping( parent ) {\n\n\t\tconst material = this.material;\n\n\t\tlet clippingContext = this.clippingContext;\n\n\t\tif ( Array.isArray( material.clippingPlanes ) ) {\n\n\t\t\tif ( clippingContext === parent || ! clippingContext ) {\n\n\t\t\t\tclippingContext = new ClippingContext();\n\t\t\t\tthis.clippingContext = clippingContext;\n\n\t\t\t}\n\n\t\t\tclippingContext.update( parent, material );\n\n\t\t} else if ( this.clippingContext !== parent ) {\n\n\t\t\tthis.clippingContext = parent;\n\n\t\t}\n\n\t}\n\n\tget clippingNeedsUpdate() {\n\n\t\tif ( this.clippingContext.version === this.clippingContextVersion ) return false;\n\n\t\tthis.clippingContextVersion = this.clippingContext.version;\n\n\t\treturn true;\n\n\t}\n\n\tgetNodeBuilderState() {\n\n\t\treturn this._nodeBuilderState || ( this._nodeBuilderState = this._nodes.getForRender( this ) );\n\n\t}\n\n\tgetMonitor() {\n\n\t\treturn this._monitor || ( this._monitor = this.getNodeBuilderState().monitor );\n\n\t}\n\n\tgetBindings() {\n\n\t\treturn this._bindings || ( this._bindings = this.getNodeBuilderState().createBindings() );\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this._geometries.getIndex( this );\n\n\t}\n\n\tgetChainArray() {\n\n\t\treturn [ this.object, this.material, this.context, this.lightsNode ];\n\n\t}\n\n\tgetAttributes() {\n\n\t\tif ( this.attributes !== null ) return this.attributes;\n\n\t\tconst nodeAttributes = this.getNodeBuilderState().nodeAttributes;\n\t\tconst geometry = this.geometry;\n\n\t\tconst attributes = [];\n\t\tconst vertexBuffers = new Set();\n\n\t\tfor ( const nodeAttribute of nodeAttributes ) {\n\n\t\t\tconst attribute = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute( nodeAttribute.name );\n\n\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\tattributes.push( attribute );\n\n\t\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\t\tvertexBuffers.add( bufferAttribute );\n\n\t\t}\n\n\t\tthis.attributes = attributes;\n\t\tthis.vertexBuffers = Array.from( vertexBuffers.values() );\n\n\t\treturn attributes;\n\n\t}\n\n\tgetVertexBuffers() {\n\n\t\tif ( this.vertexBuffers === null ) this.getAttributes();\n\n\t\treturn this.vertexBuffers;\n\n\t}\n\n\tgetDrawParameters() {\n\n\t\tconst { object, material, geometry, group, drawRange } = this;\n\n\t\tconst drawParams = this.drawParams || ( this.drawParams = {\n\t\t\tvertexCount: 0,\n\t\t\tfirstVertex: 0,\n\t\t\tinstanceCount: 0,\n\t\t\tfirstInstance: 0\n\t\t} );\n\n\t\tconst index = this.getIndex();\n\t\tconst hasIndex = ( index !== null );\n\t\tconst instanceCount = geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.count > 1 ? object.count : 1 );\n\n\t\tif ( instanceCount === 0 ) return null;\n\n\t\tdrawParams.instanceCount = instanceCount;\n\n\t\tif ( object.isBatchedMesh === true ) return drawParams;\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true && ! object.isPoints && ! object.isLineSegments && ! object.isLine && ! object.isLineLoop ) {\n\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tlet firstVertex = drawRange.start * rangeFactor;\n\t\tlet lastVertex = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\tif ( group !== null ) {\n\n\t\t\tfirstVertex = Math.max( firstVertex, group.start * rangeFactor );\n\t\t\tlastVertex = Math.min( lastVertex, ( group.start + group.count ) * rangeFactor );\n\n\t\t}\n\n\t\tconst itemCount = hasIndex === true ? index.count : geometry.attributes.position.count;\n\n\t\tfirstVertex = Math.max( firstVertex, 0 );\n\t\tlastVertex = Math.min( lastVertex, itemCount );\n\n\t\tconst count = lastVertex - firstVertex;\n\n\t\tif ( count < 0 || count === Infinity ) return null;\n\n\t\tdrawParams.vertexCount = count;\n\t\tdrawParams.firstVertex = firstVertex;\n\n\t\treturn drawParams;\n\n\t}\n\n\tgetGeometryCacheKey() {\n\n\t\tconst { geometry } = this;\n\n\t\tlet cacheKey = '';\n\n\t\tfor ( const name of Object.keys( geometry.attributes ).sort() ) {\n\n\t\t\tconst attribute = geometry.attributes[ name ];\n\n\t\t\tcacheKey += name + ',';\n\n\t\t\tif ( attribute.data ) cacheKey += attribute.data.stride + ',';\n\t\t\tif ( attribute.offset ) cacheKey += attribute.offset + ',';\n\t\t\tif ( attribute.itemSize ) cacheKey += attribute.itemSize + ',';\n\t\t\tif ( attribute.normalized ) cacheKey += 'n,';\n\n\t\t}\n\n\t\tif ( geometry.index ) {\n\n\t\t\tcacheKey += 'index,';\n\n\t\t}\n\n\t\treturn cacheKey;\n\n\t}\n\n\tgetMaterialCacheKey() {\n\n\t\tconst { object, material } = this;\n\n\t\tlet cacheKey = material.customProgramCacheKey();\n\n\t\tfor ( const property of getKeys( material ) ) {\n\n\t\t\tif ( /^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test( property ) ) continue;\n\n\t\t\tconst value = material[ property ];\n\n\t\t\tlet valueKey;\n\n\t\t\tif ( value !== null ) {\n\n\t\t\t\t// some material values require a formatting\n\n\t\t\t\tconst type = typeof value;\n\n\t\t\t\tif ( type === 'number' ) {\n\n\t\t\t\t\tvalueKey = value !== 0 ? '1' : '0'; // Convert to on/off, important for clearcoat, transmission, etc\n\n\t\t\t\t} else if ( type === 'object' ) {\n\n\t\t\t\t\tvalueKey = '{';\n\n\t\t\t\t\tif ( value.isTexture ) {\n\n\t\t\t\t\t\tvalueKey += value.mapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvalueKey += '}';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalueKey = String( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvalueKey = String( value );\n\n\t\t\t}\n\n\t\t\tcacheKey += /*property + ':' +*/ valueKey + ',';\n\n\t\t}\n\n\t\tcacheKey += this.clippingContext.cacheKey + ',';\n\n\t\tif ( object.geometry ) {\n\n\t\t\tcacheKey += this.getGeometryCacheKey();\n\n\t\t}\n\n\t\tif ( object.skeleton ) {\n\n\t\t\tcacheKey += object.skeleton.bones.length + ',';\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tcacheKey += object.morphTargetInfluences.length + ',';\n\n\t\t}\n\n\t\tif ( object.isBatchedMesh ) {\n\n\t\t\tcacheKey += object._matricesTexture.uuid + ',';\n\n\t\t\tif ( object._colorsTexture !== null ) {\n\n\t\t\t\tcacheKey += object._colorsTexture.uuid + ',';\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.count > 1 ) {\n\n\t\t\t// TODO: https://github.com/mrdoob/three.js/pull/29066#issuecomment-2269400850\n\n\t\t\tcacheKey += object.uuid + ',';\n\n\t\t}\n\n\t\treturn hashString( cacheKey );\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn /*this.object.static !== true &&*/ ( this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate );\n\n\t}\n\n\tgetDynamicCacheKey() {\n\n\t\t// Environment Nodes Cache Key\n\n\t\tlet cacheKey = this._nodes.getCacheKey( this.scene, this.lightsNode );\n\n\t\tif ( this.object.receiveShadow ) {\n\n\t\t\tcacheKey += 1;\n\n\t\t}\n\n\t\treturn cacheKey;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn this.getMaterialCacheKey() + this.getDynamicCacheKey();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.removeEventListener( 'dispose', this.onMaterialDispose );\n\n\t\tthis.onDispose();\n\n\t}\n\n}\n", "import ChainMap from './ChainMap.js';\nimport RenderObject from './RenderObject.js';\n\nconst chainArray = [];\n\nclass RenderObjects {\n\n\tconstructor( renderer, nodes, geometries, pipelines, bindings, info ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\t\tthis.geometries = geometries;\n\t\tthis.pipelines = pipelines;\n\t\tthis.bindings = bindings;\n\t\tthis.info = info;\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tget( object, material, scene, camera, lightsNode, renderContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\t// reuse chainArray\n\t\tchainArray[ 0 ] = object;\n\t\tchainArray[ 1 ] = material;\n\t\tchainArray[ 2 ] = renderContext;\n\t\tchainArray[ 3 ] = lightsNode;\n\n\t\tlet renderObject = chainMap.get( chainArray );\n\n\t\tif ( renderObject === undefined ) {\n\n\t\t\trenderObject = this.createRenderObject( this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, passId );\n\n\t\t\tchainMap.set( chainArray, renderObject );\n\n\t\t} else {\n\n\t\t\trenderObject.updateClipping( renderContext.clippingContext );\n\n\t\t\tif ( renderObject.version !== material.version || renderObject.needsUpdate ) {\n\n\t\t\t\tif ( renderObject.initialCacheKey !== renderObject.getCacheKey() ) {\n\n\t\t\t\t\trenderObject.dispose();\n\n\t\t\t\t\trenderObject = this.get( object, material, scene, camera, lightsNode, renderContext, passId );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderObject.version = material.version;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderObject;\n\n\t}\n\n\tgetChainMap( passId = 'default' ) {\n\n\t\treturn this.chainMaps[ passId ] || ( this.chainMaps[ passId ] = new ChainMap() );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tcreateRenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\tconst renderObject = new RenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext );\n\n\t\trenderObject.onDispose = () => {\n\n\t\t\tthis.pipelines.delete( renderObject );\n\t\t\tthis.bindings.delete( renderObject );\n\t\t\tthis.nodes.delete( renderObject );\n\n\t\t\tchainMap.delete( renderObject.getChainArray() );\n\n\t\t};\n\n\t\treturn renderObject;\n\n\t}\n\n\n}\n\nexport default RenderObjects;\n", "class DataMap {\n\n\tconstructor() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tlet map;\n\n\t\tif ( this.data.has( object ) ) {\n\n\t\t\tmap = this.data.get( object );\n\n\t\t\tthis.data.delete( object );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n}\n\nexport default DataMap;\n", "export const AttributeType = {\n\tVERTEX: 1,\n\tINDEX: 2,\n\tSTORAGE: 4\n};\n\n// size of a chunk in bytes (STD140 layout)\n\nexport const GPU_CHUNK_BYTES = 16;\n\n// @TODO: Move to src/constants.js\n\nexport const BlendColorFactor = 211;\nexport const OneMinusBlendColorFactor = 212;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\n\nimport { DynamicDrawUsage } from '../../constants.js';\n\nclass Attributes extends DataMap {\n\n\tconstructor( backend ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tdelete( attribute ) {\n\n\t\tconst attributeData = super.delete( attribute );\n\n\t\tif ( attributeData !== undefined ) {\n\n\t\t\tthis.backend.destroyAttribute( attribute );\n\n\t\t}\n\n\t\treturn attributeData;\n\n\t}\n\n\tupdate( attribute, type ) {\n\n\t\tconst data = this.get( attribute );\n\n\t\tif ( data.version === undefined ) {\n\n\t\t\tif ( type === AttributeType.VERTEX ) {\n\n\t\t\t\tthis.backend.createAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.INDEX ) {\n\n\t\t\t\tthis.backend.createIndexAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.STORAGE ) {\n\n\t\t\t\tthis.backend.createStorageAttribute( attribute );\n\n\t\t\t}\n\n\t\t\tdata.version = this._getBufferAttribute( attribute ).version;\n\n\t\t} else {\n\n\t\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\t\tif ( data.version < bufferAttribute.version || bufferAttribute.usage === DynamicDrawUsage ) {\n\n\t\t\t\tthis.backend.updateAttribute( attribute );\n\n\t\t\t\tdata.version = bufferAttribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\nexport default Attributes;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\n\nimport { Uint16BufferAttribute, Uint32BufferAttribute } from '../../core/BufferAttribute.js';\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nfunction getWireframeVersion( geometry ) {\n\n\treturn ( geometry.index !== null ) ? geometry.index.version : geometry.attributes.position.version;\n\n}\n\nfunction getWireframeIndex( geometry ) {\n\n\tconst indices = [];\n\n\tconst geometryIndex = geometry.index;\n\tconst geometryPosition = geometry.attributes.position;\n\n\tif ( geometryIndex !== null ) {\n\n\t\tconst array = geometryIndex.array;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst a = array[ i + 0 ];\n\t\t\tconst b = array[ i + 1 ];\n\t\t\tconst c = array[ i + 2 ];\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = geometryPosition.array;\n\n\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\tconst a = i + 0;\n\t\t\tconst b = i + 1;\n\t\t\tconst c = i + 2;\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t}\n\n\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\tattribute.version = getWireframeVersion( geometry );\n\n\treturn attribute;\n\n}\n\nclass Geometries extends DataMap {\n\n\tconstructor( attributes, info ) {\n\n\t\tsuper();\n\n\t\tthis.attributes = attributes;\n\t\tthis.info = info;\n\n\t\tthis.wireframes = new WeakMap();\n\n\t\tthis.attributeCall = new WeakMap();\n\n\t}\n\n\thas( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\n\t\treturn super.has( geometry ) && this.get( geometry ).initialized === true;\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tif ( this.has( renderObject ) === false ) this.initGeometry( renderObject );\n\n\t\tthis.updateAttributes( renderObject );\n\n\t}\n\n\tinitGeometry( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\t\tconst geometryData = this.get( geometry );\n\n\t\tgeometryData.initialized = true;\n\n\t\tthis.info.memory.geometries ++;\n\n\t\tconst onDispose = () => {\n\n\t\t\tthis.info.memory.geometries --;\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst geometryAttributes = renderObject.getAttributes();\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.attributes.delete( index );\n\n\t\t\t}\n\n\t\t\tfor ( const geometryAttribute of geometryAttributes ) {\n\n\t\t\t\tthis.attributes.delete( geometryAttribute );\n\n\t\t\t}\n\n\t\t\tconst wireframeAttribute = this.wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute !== undefined ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onDispose );\n\n\t\t};\n\n\t\tgeometry.addEventListener( 'dispose', onDispose );\n\n\t}\n\n\tupdateAttributes( renderObject ) {\n\n\t\tconst attributes = renderObject.getAttributes();\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {\n\n\t\t\t\tthis.updateAttribute( attribute, AttributeType.STORAGE );\n\n\t\t\t} else {\n\n\t\t\t\tthis.updateAttribute( attribute, AttributeType.VERTEX );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst index = this.getIndex( renderObject );\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.updateAttribute( index, AttributeType.INDEX );\n\n\t\t}\n\n\t}\n\n\tupdateAttribute( attribute, type ) {\n\n\t\tconst callId = this.info.render.calls;\n\n\t\tif ( ! attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( this.attributeCall.get( attribute ) !== callId ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.attributeCall.get( attribute ) === undefined ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t} else if ( this.attributeCall.get( attribute.data ) !== callId ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute.data, callId );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetIndex( renderObject ) {\n\n\t\tconst { geometry, material } = renderObject;\n\n\t\tlet index = geometry.index;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tconst wireframes = this.wireframes;\n\n\t\t\tlet wireframeAttribute = wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute === undefined ) {\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t} else if ( wireframeAttribute.version !== getWireframeVersion( geometry ) ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tindex = wireframeAttribute;\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n}\n\nexport default Geometries;\n", "class Info {\n\n\tconstructor() {\n\n\t\tthis.autoReset = true;\n\n\t\tthis.frame = 0;\n\t\tthis.calls = 0;\n\n\t\tthis.render = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\tdrawCalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0,\n\t\t\ttimestamp: 0,\n\t\t\tpreviousFrameCalls: 0,\n\t\t\ttimestampCalls: 0\n\t\t};\n\n\t\tthis.compute = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\ttimestamp: 0,\n\t\t\tpreviousFrameCalls: 0,\n\t\t\ttimestampCalls: 0\n\t\t};\n\n\t\tthis.memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t}\n\n\tupdate( object, count, instanceCount ) {\n\n\t\tthis.render.drawCalls ++;\n\n\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\tthis.render.points += instanceCount * count;\n\n\t\t} else if ( object.isLineSegments ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\n\n\t\t}\n\n\t}\n\n\tupdateTimestamp( type, time ) {\n\n\t\tif ( this[ type ].timestampCalls === 0 ) {\n\n\t\t\tthis[ type ].timestamp = 0;\n\n\t\t}\n\n\n\t\tthis[ type ].timestamp += time;\n\n\t\tthis[ type ].timestampCalls ++;\n\n\n\t\tif ( this[ type ].timestampCalls >= this[ type ].previousFrameCalls ) {\n\n\t\t\tthis[ type ].timestampCalls = 0;\n\n\t\t}\n\n\n\t}\n\n\treset() {\n\n\t\tconst previousRenderFrameCalls = this.render.frameCalls;\n\t\tthis.render.previousFrameCalls = previousRenderFrameCalls;\n\n\t\tconst previousComputeFrameCalls = this.compute.frameCalls;\n\t\tthis.compute.previousFrameCalls = previousComputeFrameCalls;\n\n\n\t\tthis.render.drawCalls = 0;\n\t\tthis.render.frameCalls = 0;\n\t\tthis.compute.frameCalls = 0;\n\n\t\tthis.render.triangles = 0;\n\t\tthis.render.points = 0;\n\t\tthis.render.lines = 0;\n\n\n\t}\n\n\tdispose() {\n\n\t\tthis.reset();\n\n\t\tthis.calls = 0;\n\n\t\tthis.render.calls = 0;\n\t\tthis.compute.calls = 0;\n\n\t\tthis.render.timestamp = 0;\n\t\tthis.compute.timestamp = 0;\n\t\tthis.memory.geometries = 0;\n\t\tthis.memory.textures = 0;\n\n\t}\n\n}\n\n\nexport default Info;\n", "class Pipeline {\n\n\tconstructor( cacheKey ) {\n\n\t\tthis.cacheKey = cacheKey;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nexport default Pipeline;\n", "import Pipeline from './Pipeline.js';\n\nclass RenderPipeline extends Pipeline {\n\n\tconstructor( cacheKey, vertexProgram, fragmentProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\tthis.vertexProgram = vertexProgram;\n\t\tthis.fragmentProgram = fragmentProgram;\n\n\t}\n\n}\n\nexport default RenderPipeline;\n", "import Pipeline from './Pipeline.js';\n\nclass ComputePipeline extends Pipeline {\n\n\tconstructor( cacheKey, computeProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\tthis.computeProgram = computeProgram;\n\n\t\tthis.isComputePipeline = true;\n\n\t}\n\n}\n\nexport default ComputePipeline;\n", "let _id = 0;\n\nclass ProgrammableStage {\n\n\tconstructor( code, type, transforms = null, attributes = null ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.stage = type;\n\t\tthis.transforms = transforms;\n\t\tthis.attributes = attributes;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nexport default ProgrammableStage;\n", "import DataMap from './DataMap.js';\nimport RenderPipeline from './RenderPipeline.js';\nimport ComputePipeline from './ComputePipeline.js';\nimport ProgrammableStage from './ProgrammableStage.js';\n\nclass Pipelines extends DataMap {\n\n\tconstructor( backend, nodes ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.nodes = nodes;\n\n\t\tthis.bindings = null; // set by the bindings\n\n\t\tthis.caches = new Map();\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\tgetForCompute( computeNode, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( computeNode );\n\n\t\tif ( this._needsComputeUpdate( computeNode ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.computeProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilderState = this.nodes.getForCompute( computeNode );\n\n\t\t\t// programmable stage\n\n\t\t\tlet stageCompute = this.programs.compute.get( nodeBuilderState.computeShader );\n\n\t\t\tif ( stageCompute === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.computeProgram );\n\n\t\t\t\tstageCompute = new ProgrammableStage( nodeBuilderState.computeShader, 'compute', nodeBuilderState.transforms, nodeBuilderState.nodeAttributes );\n\t\t\t\tthis.programs.compute.set( nodeBuilderState.computeShader, stageCompute );\n\n\t\t\t\tbackend.createProgram( stageCompute );\n\n\t\t\t}\n\n\t\t\t// determine compute pipeline\n\n\t\t\tconst cacheKey = this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );\n\n\t\t\t\tpipeline = this._getComputePipeline( computeNode, stageCompute, cacheKey, bindings );\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageCompute.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.version = computeNode.version;\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\tgetForRender( renderObject, promises = null ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( renderObject );\n\n\t\tif ( this._needsRenderUpdate( renderObject ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.vertexProgram.usedTimes --;\n\t\t\t\tpreviousPipeline.fragmentProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilderState = renderObject.getNodeBuilderState();\n\n\t\t\t// programmable stages\n\n\t\t\tlet stageVertex = this.programs.vertex.get( nodeBuilderState.vertexShader );\n\n\t\t\tif ( stageVertex === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.vertexProgram );\n\n\t\t\t\tstageVertex = new ProgrammableStage( nodeBuilderState.vertexShader, 'vertex' );\n\t\t\t\tthis.programs.vertex.set( nodeBuilderState.vertexShader, stageVertex );\n\n\t\t\t\tbackend.createProgram( stageVertex );\n\n\t\t\t}\n\n\t\t\tlet stageFragment = this.programs.fragment.get( nodeBuilderState.fragmentShader );\n\n\t\t\tif ( stageFragment === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.fragmentProgram );\n\n\t\t\t\tstageFragment = new ProgrammableStage( nodeBuilderState.fragmentShader, 'fragment' );\n\t\t\t\tthis.programs.fragment.set( nodeBuilderState.fragmentShader, stageFragment );\n\n\t\t\t\tbackend.createProgram( stageFragment );\n\n\t\t\t}\n\n\t\t\t// determine render pipeline\n\n\t\t\tconst cacheKey = this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );\n\n\t\t\t\tpipeline = this._getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises );\n\n\t\t\t} else {\n\n\t\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageVertex.usedTimes ++;\n\t\t\tstageFragment.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tconst pipeline = this.get( object ).pipeline;\n\n\t\tif ( pipeline ) {\n\n\t\t\t// pipeline\n\n\t\t\tpipeline.usedTimes --;\n\n\t\t\tif ( pipeline.usedTimes === 0 ) this._releasePipeline( pipeline );\n\n\t\t\t// programs\n\n\t\t\tif ( pipeline.isComputePipeline ) {\n\n\t\t\t\tpipeline.computeProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( pipeline.computeProgram );\n\n\t\t\t} else {\n\n\t\t\t\tpipeline.fragmentProgram.usedTimes --;\n\t\t\t\tpipeline.vertexProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( pipeline.vertexProgram );\n\t\t\t\tif ( pipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( pipeline.fragmentProgram );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.caches = new Map();\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tthis.getForRender( renderObject );\n\n\t}\n\n\t_getComputePipeline( computeNode, stageCompute, cacheKey, bindings ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new ComputePipeline( cacheKey, stageCompute );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\tthis.backend.createComputePipeline( pipeline, bindings );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t_getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new RenderPipeline( cacheKey, stageVertex, stageFragment );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\tthis.backend.createRenderPipeline( renderObject, promises );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t_getComputeCacheKey( computeNode, stageCompute ) {\n\n\t\treturn computeNode.id + ',' + stageCompute.id;\n\n\t}\n\n\t_getRenderCacheKey( renderObject, stageVertex, stageFragment ) {\n\n\t\treturn stageVertex.id + ',' + stageFragment.id + ',' + this.backend.getRenderCacheKey( renderObject );\n\n\t}\n\n\t_releasePipeline( pipeline ) {\n\n\t\tthis.caches.delete( pipeline.cacheKey );\n\n\t}\n\n\t_releaseProgram( program ) {\n\n\t\tconst code = program.code;\n\t\tconst stage = program.stage;\n\n\t\tthis.programs[ stage ].delete( code );\n\n\t}\n\n\t_needsComputeUpdate( computeNode ) {\n\n\t\tconst data = this.get( computeNode );\n\n\t\treturn data.pipeline === undefined || data.version !== computeNode.version;\n\n\t}\n\n\t_needsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\treturn data.pipeline === undefined || this.backend.needsRenderUpdate( renderObject );\n\n\t}\n\n}\n\nexport default Pipelines;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\n\nclass Bindings extends DataMap {\n\n\tconstructor( backend, nodes, textures, attributes, pipelines, info ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.textures = textures;\n\t\tthis.pipelines = pipelines;\n\t\tthis.attributes = attributes;\n\t\tthis.nodes = nodes;\n\t\tthis.info = info;\n\n\t\tthis.pipelines.bindings = this; // assign bindings to pipelines\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tconst groupData = this.get( bindGroup );\n\n\t\t\tif ( groupData.bindGroup === undefined ) {\n\n\t\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\n\n\t\t\t\tthis._init( bindGroup );\n\n\t\t\t\tthis.backend.createBindings( bindGroup, bindings );\n\n\t\t\t\tgroupData.bindGroup = bindGroup;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst bindings = this.nodes.getForCompute( computeNode ).bindings;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tconst groupData = this.get( bindGroup );\n\n\t\t\tif ( groupData.bindGroup === undefined ) {\n\n\t\t\t\tthis._init( bindGroup );\n\n\t\t\t\tthis.backend.createBindings( bindGroup, bindings );\n\n\t\t\t\tgroupData.bindGroup = bindGroup;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n\tupdateForCompute( computeNode ) {\n\n\t\tthis._updateBindings( this.getForCompute( computeNode ) );\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tthis._updateBindings( this.getForRender( renderObject ) );\n\n\t}\n\n\t_updateBindings( bindings ) {\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tthis._update( bindGroup, bindings );\n\n\t\t}\n\n\t}\n\n\t_init( bindGroup ) {\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isSampledTexture ) {\n\n\t\t\t\tthis.textures.updateTexture( binding.texture );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst attribute = binding.attribute;\n\n\t\t\t\tthis.attributes.update( attribute, AttributeType.STORAGE );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_update( bindGroup, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tlet needsBindingsUpdate = false;\n\n\t\t// iterate over all bindings and check if buffer updates or a new binding group is required\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isNodeUniformsGroup ) {\n\n\t\t\t\tconst updated = this.nodes.updateGroup( binding );\n\n\t\t\t\tif ( ! updated ) continue;\n\n\t\t\t}\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tbackend.updateBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tbinding.update();\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tif ( binding.needsBindingsUpdate( this.textures.get( binding.texture ).generation ) ) needsBindingsUpdate = true;\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tconst texture = binding.texture;\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tthis.textures.updateTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t\tconst textureData = backend.get( texture );\n\n\t\t\t\tif ( backend.isWebGPUBackend === true && textureData.texture === undefined && textureData.externalTexture === undefined ) {\n\n\t\t\t\t\t// TODO: Remove this once we found why updated === false isn't bound to a texture in the WebGPU backend\n\t\t\t\t\tconsole.error( 'Bindings._update: binding should be available:', binding, updated, texture, binding.textureNode.value, needsBindingsUpdate );\n\n\t\t\t\t\tthis.textures.updateTexture( texture );\n\t\t\t\t\tneedsBindingsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\t\t\tconst textureData = this.get( texture );\n\n\t\t\t\t\tif ( binding.store === true ) {\n\n\t\t\t\t\t\ttextureData.needsMipmap = true;\n\n\t\t\t\t\t} else if ( texture.generateMipmaps === true && this.textures.needsMipmaps( texture ) && textureData.needsMipmap === true ) {\n\n\t\t\t\t\t\tthis.backend.generateMipmaps( texture );\n\n\t\t\t\t\t\ttextureData.needsMipmap = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsBindingsUpdate === true ) {\n\n\t\t\tthis.backend.updateBindings( bindGroup, bindings );\n\n\t\t}\n\n\t}\n\n}\n\nexport default Bindings;\n", "class LightingModel {\n\n\tstart( /*input, stack, builder*/ ) { }\n\n\tfinish( /*input, stack, builder*/ ) { }\n\n\tdirect( /*input, stack, builder*/ ) { }\n\n\tdirectRectArea( /*input, stack, builder*/ ) {}\n\n\tindirect( /*input, stack, builder*/ ) { }\n\n\tambientOcclusion( /*input, stack, builder*/ ) { }\n\n}\n\nexport default LightingModel;\n", "class NodeAttribute {\n\n\tconstructor( name, type, node = null ) {\n\n\t\tthis.isNodeAttribute = true;\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.node = node;\n\n\t}\n\n}\n\nexport default NodeAttribute;\n", "class NodeUniform {\n\n\tconstructor( name, type, node ) {\n\n\t\tthis.isNodeUniform = true;\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.node = node.getSelf();\n\n\t}\n\n\tget value() {\n\n\t\treturn this.node.value;\n\n\t}\n\n\tset value( val ) {\n\n\t\tthis.node.value = val;\n\n\t}\n\n\tget id() {\n\n\t\treturn this.node.id;\n\n\t}\n\n\tget groupNode() {\n\n\t\treturn this.node.groupNode;\n\n\t}\n\n}\n\nexport default NodeUniform;\n", "class NodeVar {\n\n\tconstructor( name, type ) {\n\n\t\tthis.isNodeVar = true;\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\n\t}\n\n}\n\nexport default NodeVar;\n", "import NodeVar from './NodeVar.js';\n\nclass NodeVarying extends NodeVar {\n\n\tconstructor( name, type ) {\n\n\t\tsuper( name, type );\n\n\t\tthis.needsInterpolation = false;\n\n\t\tthis.isNodeVarying = true;\n\n\t}\n\n}\n\nexport default NodeVarying;\n", "class NodeCode {\n\n\tconstructor( name, type, code = '' ) {\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.code = code;\n\n\t\tObject.defineProperty( this, 'isNodeCode', { value: true } );\n\n\t}\n\n}\n\nexport default NodeCode;\n", "let id = 0;\n\nclass NodeCache {\n\n\tconstructor( parent = null ) {\n\n\t\tthis.id = id ++;\n\t\tthis.nodesData = new WeakMap();\n\n\t\tthis.parent = parent;\n\n\t}\n\n\tgetData( node ) {\n\n\t\tlet data = this.nodesData.get( node );\n\n\t\tif ( data === undefined && this.parent !== null ) {\n\n\t\t\tdata = this.parent.getData( node );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tsetData( node, data ) {\n\n\t\tthis.nodesData.set( node, data );\n\n\t}\n\n}\n\nexport default NodeCache;\n", "import { nodeObject } from '../tsl/TSLBase.js';\nimport PropertyNode from './PropertyNode.js';\n\nclass ParameterNode extends PropertyNode {\n\n\tstatic get type() {\n\n\t\treturn 'ParameterNode';\n\n\t}\n\n\tconstructor( nodeType, name = null ) {\n\n\t\tsuper( nodeType, name );\n\n\t\tthis.isParameterNode = true;\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgenerate() {\n\n\t\treturn this.name;\n\n\t}\n\n}\n\nexport default ParameterNode;\n\nexport const parameter = ( type, name ) => nodeObject( new ParameterNode( type, name ) );\n", "import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass CodeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'CodeNode';\n\n\t}\n\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( 'code' );\n\n\t\tthis.isCodeNode = true;\n\n\t\tthis.code = code;\n\t\tthis.language = language;\n\n\t\tthis.includes = includes;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tsetIncludes( includes ) {\n\n\t\tthis.includes = includes;\n\n\t\treturn this;\n\n\t}\n\n\tgetIncludes( /*builder*/ ) {\n\n\t\treturn this.includes;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst includes = this.getIncludes( builder );\n\n\t\tfor ( const include of includes ) {\n\n\t\t\tinclude.build( builder );\n\n\t\t}\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\n\t\tnodeCode.code = this.code;\n\n\t\treturn nodeCode.code;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.code = this.code;\n\t\tdata.language = this.language;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.code = data.code;\n\t\tthis.language = data.language;\n\n\t}\n\n}\n\nexport default CodeNode;\n\nexport const code = /*@__PURE__*/ nodeProxy( CodeNode );\n\nexport const js = ( src, includes ) => code( src, includes, 'js' );\nexport const wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\nexport const glsl = ( src, includes ) => code( src, includes, 'glsl' );\n", "import CodeNode from './CodeNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\nclass FunctionNode extends CodeNode {\n\n\tstatic get type() {\n\n\t\treturn 'FunctionNode';\n\n\t}\n\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( code, includes, language );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).type;\n\n\t}\n\n\tgetInputs( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).inputs;\n\n\t}\n\n\tgetNodeFunction( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tlet nodeFunction = nodeData.nodeFunction;\n\n\t\tif ( nodeFunction === undefined ) {\n\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\n\n\t\t\tnodeData.nodeFunction = nodeFunction;\n\n\t\t}\n\n\t\treturn nodeFunction;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tsuper.generate( builder );\n\n\t\tconst nodeFunction = this.getNodeFunction( builder );\n\n\t\tconst name = nodeFunction.name;\n\t\tconst type = nodeFunction.type;\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\n\n\t\tif ( name !== '' ) {\n\n\t\t\t// use a custom property name\n\n\t\t\tnodeCode.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\n\n\t\tconst code = this.getNodeFunction( builder ).getCode( propertyName );\n\n\t\tnodeCode.code = code + '\\n';\n\n\t\tif ( output === 'property' ) {\n\n\t\t\treturn propertyName;\n\n\t\t} else {\n\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default FunctionNode;\n\nconst nativeFn = ( code, includes = [], language = '' ) => {\n\n\tfor ( let i = 0; i < includes.length; i ++ ) {\n\n\t\tconst include = includes[ i ];\n\n\t\t// TSL Function: glslFn, wgslFn\n\n\t\tif ( typeof include === 'function' ) {\n\n\t\t\tincludes[ i ] = include.functionNode;\n\n\t\t}\n\n\t}\n\n\tconst functionNode = nodeObject( new FunctionNode( code, includes, language ) );\n\n\tconst fn = ( ...params ) => functionNode.call( ...params );\n\tfn.functionNode = functionNode;\n\n\treturn fn;\n\n};\n\nexport const glslFn = ( code, includes ) => nativeFn( code, includes, 'glsl' );\nexport const wgslFn = ( code, includes ) => nativeFn( code, includes, 'wgsl' );\n", "import { Color } from '../../math/Color.js';\nimport { Matrix3 } from '../../math/Matrix3.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\nclass Uniform {\n\n\tconstructor( name, value ) {\n\n\t\tthis.name = name;\n\t\tthis.value = value;\n\n\t\tthis.boundary = 0; // used to build the uniform buffer according to the STD140 layout\n\t\tthis.itemSize = 0;\n\n\t\tthis.offset = 0; // this property is set by WebGPUUniformsGroup and marks the start position in the uniform buffer\n\n\t}\n\n\tsetValue( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.value;\n\n\t}\n\n}\n\nclass NumberUniform extends Uniform {\n\n\tconstructor( name, value = 0 ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isNumberUniform = true;\n\n\t\tthis.boundary = 4;\n\t\tthis.itemSize = 1;\n\n\t}\n\n}\n\nclass Vector2Uniform extends Uniform {\n\n\tconstructor( name, value = new Vector2() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector2Uniform = true;\n\n\t\tthis.boundary = 8;\n\t\tthis.itemSize = 2;\n\n\t}\n\n}\n\nclass Vector3Uniform extends Uniform {\n\n\tconstructor( name, value = new Vector3() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector3Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\nclass Vector4Uniform extends Uniform {\n\n\tconstructor( name, value = new Vector4() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector4Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 4;\n\n\t}\n\n}\n\nclass ColorUniform extends Uniform {\n\n\tconstructor( name, value = new Color() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isColorUniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\nclass Matrix3Uniform extends Uniform {\n\n\tconstructor( name, value = new Matrix3() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isMatrix3Uniform = true;\n\n\t\tthis.boundary = 48;\n\t\tthis.itemSize = 12;\n\n\t}\n\n}\n\nclass Matrix4Uniform extends Uniform {\n\n\tconstructor( name, value = new Matrix4() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isMatrix4Uniform = true;\n\n\t\tthis.boundary = 64;\n\t\tthis.itemSize = 16;\n\n\t}\n\n}\n\nexport {\n\tNumberUniform,\n\tVector2Uniform, Vector3Uniform, Vector4Uniform, ColorUniform,\n\tMatrix3Uniform, Matrix4Uniform\n};\n", "import {\n\tNumberUniform, Vector2Uniform, Vector3Uniform, Vector4Uniform,\n\tColorUniform, Matrix3Uniform, Matrix4Uniform\n} from '../Uniform.js';\n\nclass NumberNodeUniform extends NumberUniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector2NodeUniform extends Vector2Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector3NodeUniform extends Vector3Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector4NodeUniform extends Vector4Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass ColorNodeUniform extends ColorUniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Matrix3NodeUniform extends Matrix3Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Matrix4NodeUniform extends Matrix4Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nexport {\n\tNumberNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\n};\n", "import Node from './Node.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { ShaderNode, nodeProxy, getCurrentStack, setCurrentStack } from '../tsl/TSLBase.js';\n\nclass StackNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StackNode';\n\n\t}\n\n\tconstructor( parent = null ) {\n\n\t\tsuper();\n\n\t\tthis.nodes = [];\n\t\tthis.outputNode = null;\n\n\t\tthis.parent = parent;\n\n\t\tthis._currentCond = null;\n\n\t\tthis.isStackNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\tadd( node ) {\n\n\t\tthis.nodes.push( node );\n\n\t\treturn this;\n\n\t}\n\n\tIf( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tthis._currentCond = select( boolNode, methodNode );\n\n\t\treturn this.add( this._currentCond );\n\n\t}\n\n\tElseIf( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tconst ifNode = select( boolNode, methodNode );\n\n\t\tthis._currentCond.elseNode = ifNode;\n\t\tthis._currentCond = ifNode;\n\n\t\treturn this;\n\n\t}\n\n\tElse( method ) {\n\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\n\n\t\treturn this;\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tconst previousStack = getCurrentStack();\n\n\t\tsetCurrentStack( this );\n\n\t\tfor ( const node of this.nodes ) {\n\n\t\t\tnode.build( builder, 'void' );\n\n\t\t}\n\n\t\tsetCurrentStack( previousStack );\n\n\t\treturn this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\n\n\t}\n\n\t//\n\n\telse( ...params ) { // @deprecated, r168\n\n\t\tconsole.warn( 'TSL.StackNode: .else() has been renamed to .Else().' );\n\t\treturn this.Else( ...params );\n\n\t}\n\n\telseif( ...params ) { // @deprecated, r168\n\n\t\tconsole.warn( 'TSL.StackNode: .elseif() has been renamed to .ElseIf().' );\n\t\treturn this.ElseIf( ...params );\n\n\t}\n\n}\n\nexport default StackNode;\n\nexport const stack = /*@__PURE__*/ nodeProxy( StackNode );\n", "import TempNode from '../core/TempNode.js';\nimport { positionWorldDirection } from '../accessors/Position.js';\nimport { nodeProxy, vec2 } from '../tsl/TSLBase.js';\n\nclass EquirectUVNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'EquirectUVNode';\n\n\t}\n\n\tconstructor( dirNode = positionWorldDirection ) {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.dirNode = dirNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst dir = this.dirNode;\n\n\t\tconst u = dir.z.atan2( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\n\t\tconst v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\n\n\t\treturn vec2( u, v );\n\n\t}\n\n}\n\nexport default EquirectUVNode;\n\nexport const equirectUV = /*@__PURE__*/ nodeProxy( EquirectUVNode );\n", "import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n", "import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _box = /*@__PURE__*/ new Box3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.isSphere = true;\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _v2 ) );\n\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _v2 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Sphere };\n", "import { Vector3 } from './Vector3.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector.dot( this.direction );\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Ray };\n", "import { Quaternion } from './Quaternion.js';\nimport { Matrix4 } from './Matrix4.js';\nimport { clamp } from './MathUtils.js';\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\nEuler.DEFAULT_ORDER = 'XYZ';\n\nexport { Euler };\n", "class Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\n\nexport { Layers };\n", "import { Quaternion } from '../math/Quaternion.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { Euler } from '../math/Euler.js';\nimport { Layers } from './Layers.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport * as MathUtils from '../math/MathUtils.js';\n\nlet _object3DId = 0;\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nconst _childaddedEvent = { type: 'childadded', child: null };\nconst _childremovedEvent = { type: 'childremoved', child: null };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isObject3D = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1.lookAt( _position, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1.lookAt( _target, _position, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tobject.removeFromParent();\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t_childaddedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t\t_childaddedEvent.child = null;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t_childremovedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childremovedEvent );\n\t\t\t_childremovedEvent.child = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1 );\n\n\t\tobject.removeFromParent();\n\t\tobject.parent = this;\n\t\tthis.children.push( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t_childaddedEvent.child = object;\n\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t_childaddedEvent.child = null;\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetObjectsByProperty( name, value, result = [] ) {\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// make sure descendants are updated if required\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tchild.updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// make sure descendants are updated\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\tif ( this.isBatchedMesh ) {\n\n\t\t\tobject.type = 'BatchedMesh';\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\t\tobject.sortObjects = this.sortObjects;\n\n\t\t\tobject.drawRanges = this._drawRanges;\n\t\t\tobject.reservedRanges = this._reservedRanges;\n\n\t\t\tobject.visibility = this._visibility;\n\t\t\tobject.active = this._active;\n\t\t\tobject.bounds = this._bounds.map( bound => ( {\n\t\t\t\tboxInitialized: bound.boxInitialized,\n\t\t\t\tboxMin: bound.box.min.toArray(),\n\t\t\t\tboxMax: bound.box.max.toArray(),\n\n\t\t\t\tsphereInitialized: bound.sphereInitialized,\n\t\t\t\tsphereRadius: bound.sphere.radius,\n\t\t\t\tsphereCenter: bound.sphere.center.toArray()\n\t\t\t} ) );\n\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\n\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\n\t\t\tobject.geometryCount = this._geometryCount;\n\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\n\n\t\t\tif ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tobject.boundingSphere = {\n\t\t\t\t\tcenter: object.boundingSphere.center.toArray(),\n\t\t\t\t\tradius: object.boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tobject.boundingBox = {\n\t\t\t\t\tmin: object.boundingBox.min.toArray(),\n\t\t\t\t\tmax: object.boundingBox.max.toArray()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nexport { Object3D };\n", "import { Vector3 } from './Vector3.js';\nimport { Vector4 } from './Vector4.js';\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nconst _v40 = /*@__PURE__*/ new Vector4();\nconst _v41 = /*@__PURE__*/ new Vector4();\nconst _v42 = /*@__PURE__*/ new Vector4();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0.subVectors( a, b );\n\t\ttarget.cross( _v0 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0.subVectors( c, a );\n\t\t_v1.subVectors( b, a );\n\t\t_v2.subVectors( point, a );\n\n\t\tconst dot00 = _v0.dot( _v0 );\n\t\tconst dot01 = _v0.dot( _v1 );\n\t\tconst dot02 = _v0.dot( _v2 );\n\t\tconst dot11 = _v1.dot( _v1 );\n\t\tconst dot12 = _v1.dot( _v2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\ttarget.set( 0, 0, 0 );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\t// if the triangle is degenerate then we can't contain a point\n\t\tif ( this.getBarycoord( point, a, b, c, _v3 ) === null ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t}\n\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3 ) === null ) {\n\n\t\t\ttarget.x = 0;\n\t\t\ttarget.y = 0;\n\t\t\tif ( 'z' in target ) target.z = 0;\n\t\t\tif ( 'w' in target ) target.w = 0;\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3.x );\n\t\ttarget.addScaledVector( v2, _v3.y );\n\t\ttarget.addScaledVector( v3, _v3.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\n\n\t\t_v40.setScalar( 0 );\n\t\t_v41.setScalar( 0 );\n\t\t_v42.setScalar( 0 );\n\n\t\t_v40.fromBufferAttribute( attr, i1 );\n\t\t_v41.fromBufferAttribute( attr, i2 );\n\t\t_v42.fromBufferAttribute( attr, i3 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( _v40, barycoord.x );\n\t\ttarget.addScaledVector( _v41, barycoord.y );\n\t\ttarget.addScaledVector( _v42, barycoord.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0.subVectors( c, b );\n\t\t_v1.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0.subVectors( this.c, this.b );\n\t\t_v1.subVectors( this.a, this.b );\n\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nexport { Triangle };\n", "import { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\nimport { Euler } from '../math/Euler.js';\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshBasicMaterial };\n", "import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Box3 } from '../math/Box3.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute } from './BufferAttribute.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Object3D } from './Object3D.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport * as MathUtils from '../math/MathUtils.js';\nimport { arrayNeedsUint32 } from '../utils.js';\n\nlet _id = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.min, _box.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\n\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.max, _box.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector.addVectors( _box.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box.expandByPoint( _vector );\n\n\t\t\t\t\t\t_vector.addVectors( _box.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box.expandByPoint( _vector );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst positionAttribute = attributes.position;\n\t\tconst normalAttribute = attributes.normal;\n\t\tconst uvAttribute = attributes.uv;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\n\n\t\t}\n\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\n\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: index.count\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindex.getX( j + 0 ),\n\t\t\t\t\tindex.getX( j + 1 ),\n\t\t\t\t\tindex.getX( j + 2 )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector.fromBufferAttribute( normals, i );\n\n\t\t\t_vector.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nexport { BufferGeometry };\n", "import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { BackSide, FrontSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere.containsPoint( _ray.origin ) === false ) {\n\n\t\t\tif ( _ray.intersectSphere( _sphere, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA );\n\tobject.getVertexPosition( b, _vB );\n\tobject.getVertexPosition( c, _vC );\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA, _vB, _vC, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.barycoord = barycoord;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { Mesh };\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\nexport { BoxGeometry };\n", "import { ColorManagement } from '../../math/ColorManagement.js';\n\n/**\n * Uniform Utilities\n */\n\nexport function cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nexport function mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nexport function cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nexport function getUnlitUniformColorSpace( renderer ) {\n\n\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\tif ( currentRenderTarget === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\t// https://github.com/mrdoob/three.js/issues/27868\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\treturn currentRenderTarget.texture.colorSpace;\n\n\t}\n\n\treturn ColorManagement.workingColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nexport { UniformsUtils };\n", "export default /* glsl */`\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n", "export default /* glsl */`\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n`;\n", "import { Material } from './Material.js';\nimport { cloneUniforms, cloneUniformsGroups } from '../renderers/shaders/UniformsUtils.js';\n\nimport default_vertex from '../renderers/shaders/ShaderChunk/default_vertex.glsl.js';\nimport default_fragment from '../renderers/shaders/ShaderChunk/default_fragment.glsl.js';\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.forceSinglePass = true;\n\n\t\tthis.extensions = {\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { ShaderMaterial };\n", "import { EventDispatcher } from './EventDispatcher.js';\nimport { Texture } from '../textures/Texture.js';\nimport { LinearFilter } from '../constants.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Source } from '../textures/Source.js';\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass RenderTarget extends EventDispatcher {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\toptions = Object.assign( {\n\t\t\tgenerateMipmaps: false,\n\t\t\tinternalFormat: null,\n\t\t\tminFilter: LinearFilter,\n\t\t\tdepthBuffer: true,\n\t\t\tstencilBuffer: false,\n\t\t\tresolveDepthBuffer: true,\n\t\t\tresolveStencilBuffer: true,\n\t\t\tdepthTexture: null,\n\t\t\tsamples: 0,\n\t\t\tcount: 1\n\t\t}, options );\n\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\ttexture.flipY = false;\n\t\ttexture.generateMipmaps = options.generateMipmaps;\n\t\ttexture.internalFormat = options.internalFormat;\n\n\t\tthis.textures = [];\n\n\t\tconst count = options.count;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.textures[ i ] = texture.clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\tthis.depthBuffer = options.depthBuffer;\n\t\tthis.stencilBuffer = options.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\n\n\t\tthis.depthTexture = options.depthTexture;\n\n\t\tthis.samples = options.samples;\n\n\t}\n\n\tget texture() {\n\n\t\treturn this.textures[ 0 ];\n\n\t}\n\n\tset texture( value ) {\n\n\t\tthis.textures[ 0 ] = value;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\n\n\t\t\t\tthis.textures[ i ].image.width = width;\n\t\t\t\tthis.textures[ i ].image.height = height;\n\t\t\t\tthis.textures[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.textures.length = 0;\n\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\n\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tconst image = Object.assign( {}, source.texture.image );\n\t\tthis.texture.source = new Source( image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nexport { RenderTarget };\n", "import { RenderTarget } from '../core/RenderTarget.js';\n\nclass WebGLRenderTarget extends RenderTarget {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t}\n\n}\n\nexport { WebGLRenderTarget };\n", "import { WebGLCoordinateSystem } from '../constants.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Camera };\n", "import { Camera } from './Camera.js';\nimport * as MathUtils from '../math/MathUtils.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nconst _v3 = /*@__PURE__*/ new Vector3();\nconst _minTarget = /*@__PURE__*/ new Vector2();\nconst _maxTarget = /*@__PURE__*/ new Vector2();\n\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.\n\t */\n\tgetViewBounds( distance, minTarget, maxTarget ) {\n\n\t\t_v3.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tminTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\n\n\t\t_v3.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tmaxTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\n\n\t}\n\n\t/**\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Copies the result into the target Vector2, where x is width and y is height.\n\t */\n\tgetViewSize( distance, target ) {\n\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\n\n\t\treturn target.subVectors( _maxTarget, _minTarget );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { PerspectiveCamera };\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\n\nconst fov = - 90; // negative fov is not an error\nconst aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tthis.renderTarget = renderTarget;\n\t\tthis.coordinateSystem = null;\n\t\tthis.activeMipmapLevel = 0;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, - 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\t\tcameraPX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst { renderTarget, activeMipmapLevel } = this;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\t// mipmaps are generated during the last call of render()\n\t\t// at this point, all sides of the cube render target are defined\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nexport { CubeCamera };\n", "import { Texture } from './Texture.js';\nimport { CubeReflectionMapping } from '../constants.js';\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nexport { CubeTexture };\n", "import { BackSide, LinearFilter, LinearMipmapLinearFilter, NoBlending } from '../constants.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { BoxGeometry } from '../geometries/BoxGeometry.js';\nimport { ShaderMaterial } from '../materials/ShaderMaterial.js';\nimport { cloneUniforms } from './shaders/UniformsUtils.js';\nimport { WebGLRenderTarget } from './WebGLRenderTarget.js';\nimport { CubeCamera } from '../cameras/CubeCamera.js';\nimport { CubeTexture } from '../textures/CubeTexture.js';\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nexport { WebGLCubeRenderTarget };\n", "import { Object3D } from '../core/Object3D.js';\nimport { Euler } from '../math/Euler.js';\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.backgroundBlurriness = 0;\n\t\tthis.backgroundIntensity = 1;\n\t\tthis.backgroundRotation = new Euler();\n\n\t\tthis.environmentIntensity = 1;\n\t\tthis.environmentRotation = new Euler();\n\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\t\tthis.backgroundRotation.copy( source.backgroundRotation );\n\n\t\tthis.environmentIntensity = source.environmentIntensity;\n\t\tthis.environmentRotation.copy( source.environmentRotation );\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\t\tdata.object.backgroundRotation = this.backgroundRotation.toArray();\n\n\t\tif ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;\n\t\tdata.object.environmentRotation = this.environmentRotation.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { Scene };\n", "import { equirectUV } from '../../nodes/utils/EquirectUVNode.js';\nimport { texture as TSL_Texture } from '../../nodes/accessors/TextureNode.js';\nimport { positionWorldDirection } from '../../nodes/accessors/Position.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { WebGLCubeRenderTarget } from '../../renderers/WebGLCubeRenderTarget.js';\nimport { Scene } from '../../scenes/Scene.js';\nimport { CubeCamera } from '../../cameras/CubeCamera.js';\nimport { BoxGeometry } from '../../geometries/BoxGeometry.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { BackSide, NoBlending, LinearFilter, LinearMipmapLinearFilter } from '../../constants.js';\n\n// @TODO: Consider rename WebGLCubeRenderTarget to just CubeRenderTarget\n\nclass CubeRenderTarget extends WebGLCubeRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, options );\n\n\t\tthis.isCubeRenderTarget = true;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tconst currentMinFilter = texture.minFilter;\n\t\tconst currentGenerateMipmaps = texture.generateMipmaps;\n\n\t\ttexture.generateMipmaps = true;\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst uvNode = equirectUV( positionWorldDirection );\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.colorNode = TSL_Texture( texture, uvNode, 0 );\n\t\tmaterial.side = BackSide;\n\t\tmaterial.blending = NoBlending;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst scene = new Scene();\n\t\tscene.add( mesh );\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\n\t\tconst currentMRT = renderer.getMRT();\n\t\trenderer.setMRT( null );\n\n\t\tcamera.update( renderer, scene );\n\n\t\trenderer.setMRT( currentMRT );\n\n\t\ttexture.minFilter = currentMinFilter;\n\t\ttexture.currentGenerateMipmaps = currentGenerateMipmaps;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport default CubeRenderTarget;\n", "import { Fn, int, float, vec2, vec3, vec4, If } from '../tsl/TSLBase.js';\nimport { cos, sin, abs, max, exp2, log2, clamp, fract, mix, floor, normalize, cross, all } from '../math/MathNode.js';\nimport { mul } from '../math/OperatorNode.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { Loop, Break } from '../utils/LoopNode.js';\n\n// These defines must match with PMREMGenerator\n\nconst cubeUV_r0 = /*@__PURE__*/ float( 1.0 );\nconst cubeUV_m0 = /*@__PURE__*/ float( - 2.0 );\nconst cubeUV_r1 = /*@__PURE__*/ float( 0.8 );\nconst cubeUV_m1 = /*@__PURE__*/ float( - 1.0 );\nconst cubeUV_r4 = /*@__PURE__*/ float( 0.4 );\nconst cubeUV_m4 = /*@__PURE__*/ float( 2.0 );\nconst cubeUV_r5 = /*@__PURE__*/ float( 0.305 );\nconst cubeUV_m5 = /*@__PURE__*/ float( 3.0 );\nconst cubeUV_r6 = /*@__PURE__*/ float( 0.21 );\nconst cubeUV_m6 = /*@__PURE__*/ float( 4.0 );\n\nconst cubeUV_minMipLevel = /*@__PURE__*/ float( 4.0 );\nconst cubeUV_minTileSize = /*@__PURE__*/ float( 16.0 );\n\n// These shader functions convert between the UV coordinates of a single face of\n// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n// sampling a textureCube (not generally normalized ).\n\nconst getFace = /*@__PURE__*/ Fn( ( [ direction ] ) => {\n\n\tconst absDirection = vec3( abs( direction ) ).toVar();\n\tconst face = float( - 1.0 ).toVar();\n\n\tIf( absDirection.x.greaterThan( absDirection.z ), () => {\n\n\t\tIf( absDirection.x.greaterThan( absDirection.y ), () => {\n\n\t\t\tface.assign( select( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\n\n\t\t} );\n\n\t} ).Else( () => {\n\n\t\tIf( absDirection.z.greaterThan( absDirection.y ), () => {\n\n\t\t\tface.assign( select( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\n\n\t\t} );\n\n\t} );\n\n\treturn face;\n\n} ).setLayout( {\n\tname: 'getFace',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'direction', type: 'vec3' }\n\t]\n} );\n\n// RH coordinate system; PMREM face-indexing convention\nconst getUV = /*@__PURE__*/ Fn( ( [ direction, face ] ) => {\n\n\tconst uv = vec2().toVar();\n\n\tIf( face.equal( 0.0 ), () => {\n\n\t\tuv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x\n\n\t} ).ElseIf( face.equal( 1.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y\n\n\t} ).ElseIf( face.equal( 2.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z\n\n\t} ).ElseIf( face.equal( 3.0 ), () => {\n\n\t\tuv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x\n\n\t} ).ElseIf( face.equal( 4.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y\n\n\t} ).Else( () => {\n\n\t\tuv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z\n\n\t} );\n\n\treturn mul( 0.5, uv.add( 1.0 ) );\n\n} ).setLayout( {\n\tname: 'getUV',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'direction', type: 'vec3' },\n\t\t{ name: 'face', type: 'float' }\n\t]\n} );\n\nconst roughnessToMip = /*@__PURE__*/ Fn( ( [ roughness ] ) => {\n\n\tconst mip = float( 0.0 ).toVar();\n\n\tIf( roughness.greaterThanEqual( cubeUV_r1 ), () => {\n\n\t\tmip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r4 ), () => {\n\n\t\tmip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r5 ), () => {\n\n\t\tmip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r6 ), () => {\n\n\t\tmip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );\n\n\t} ).Else( () => {\n\n\t\tmip.assign( float( - 2.0 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25\n\n\t} );\n\n\treturn mip;\n\n} ).setLayout( {\n\tname: 'roughnessToMip',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' }\n\t]\n} );\n\n// RH coordinate system; PMREM face-indexing convention\nexport const getDirection = /*@__PURE__*/ Fn( ( [ uv_immutable, face ] ) => {\n\n\tconst uv = uv_immutable.toVar();\n\tuv.assign( mul( 2.0, uv ).sub( 1.0 ) );\n\tconst direction = vec3( uv, 1.0 ).toVar();\n\n\tIf( face.equal( 0.0 ), () => {\n\n\t\tdirection.assign( direction.zyx ); // ( 1, v, u ) pos x\n\n\t} ).ElseIf( face.equal( 1.0 ), () => {\n\n\t\tdirection.assign( direction.xzy );\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -u, 1, -v ) pos y\n\n\t} ).ElseIf( face.equal( 2.0 ), () => {\n\n\t\tdirection.x.mulAssign( - 1.0 ); // ( -u, v, 1 ) pos z\n\n\t} ).ElseIf( face.equal( 3.0 ), () => {\n\n\t\tdirection.assign( direction.zyx );\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -1, v, -u ) neg x\n\n\t} ).ElseIf( face.equal( 4.0 ), () => {\n\n\t\tdirection.assign( direction.xzy );\n\t\tdirection.xy.mulAssign( - 1.0 ); // ( -u, -1, v ) neg y\n\n\t} ).ElseIf( face.equal( 5.0 ), () => {\n\n\t\tdirection.z.mulAssign( - 1.0 ); // ( u, v, -1 ) neg zS\n\n\t} );\n\n\treturn direction;\n\n} ).setLayout( {\n\tname: 'getDirection',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'uv', type: 'vec2' },\n\t\t{ name: 'face', type: 'float' }\n\t]\n} );\n\n//\n\nexport const textureCubeUV = /*@__PURE__*/ Fn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\n\n\tconst roughness = float( roughness_immutable );\n\tconst sampleDir = vec3( sampleDir_immutable );\n\n\tconst mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\tconst mipF = fract( mip );\n\tconst mipInt = floor( mip );\n\tconst color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\n\n\tIf( mipF.notEqual( 0.0 ), () => {\n\n\t\tconst color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\n\n\t\tcolor0.assign( mix( color0, color1, mipF ) );\n\n\t} );\n\n\treturn color0;\n\n} );\n\nconst bilinearCubeUV = /*@__PURE__*/ Fn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\n\n\tconst mipInt = float( mipInt_immutable ).toVar();\n\tconst direction = vec3( direction_immutable );\n\tconst face = float( getFace( direction ) ).toVar();\n\tconst filterInt = float( max( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();\n\tmipInt.assign( max( mipInt, cubeUV_minMipLevel ) );\n\tconst faceSize = float( exp2( mipInt ) ).toVar();\n\tconst uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();\n\n\tIf( face.greaterThan( 2.0 ), () => {\n\n\t\tuv.y.addAssign( faceSize );\n\t\tface.subAssign( 3.0 );\n\n\t} );\n\n\tuv.x.addAssign( face.mul( faceSize ) );\n\tuv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );\n\tuv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );\n\tuv.x.mulAssign( CUBEUV_TEXEL_WIDTH );\n\tuv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );\n\n\treturn envMap.uv( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering\n\n} );\n\nconst getSample = /*@__PURE__*/ Fn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\n\n\tconst cosTheta = cos( theta );\n\n\t// Rodrigues' axis-angle rotation\n\tconst sampleDirection = outputDirection.mul( cosTheta )\n\t\t.add( axis.cross( outputDirection ).mul( sin( theta ) ) )\n\t\t.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );\n\n\treturn bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );\n\n} );\n\nexport const blur = /*@__PURE__*/ Fn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\n\n\tconst axis = vec3( select( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();\n\n\tIf( all( axis.equals( vec3( 0.0 ) ) ), () => {\n\n\t\taxis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );\n\n\t} );\n\n\taxis.assign( normalize( axis ) );\n\n\tconst gl_FragColor = vec3().toVar();\n\tgl_FragColor.addAssign( weights.element( int( 0 ) ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\n\tLoop( { start: int( 1 ), end: n }, ( { i } ) => {\n\n\t\tIf( i.greaterThanEqual( samples ), () => {\n\n\t\t\tBreak();\n\n\t\t} );\n\n\t\tconst theta = float( dTheta.mul( float( i ) ) ).toVar();\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( - 1.0 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\n\t} );\n\n\treturn vec4( gl_FragColor, 1 );\n\n} );\n", "import { Camera } from './Camera.js';\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { OrthographicCamera };\n", "import NodeMaterial from '../../../materials/nodes/NodeMaterial.js';\nimport { getDirection, blur } from '../../../nodes/pmrem/PMREMUtils.js';\nimport { equirectUV } from '../../../nodes/utils/EquirectUVNode.js';\nimport { uniform } from '../../../nodes/core/UniformNode.js';\nimport { uniformArray } from '../../../nodes/accessors/UniformArrayNode.js';\nimport { texture } from '../../../nodes/accessors/TextureNode.js';\nimport { cubeTexture } from '../../../nodes/accessors/CubeTextureNode.js';\nimport { float, vec3 } from '../../../nodes/tsl/TSLBase.js';\nimport { uv } from '../../../nodes/accessors/UV.js';\nimport { attribute } from '../../../nodes/core/AttributeNode.js';\n\nimport { OrthographicCamera } from '../../../cameras/OrthographicCamera.js';\nimport { Color } from '../../../math/Color.js';\nimport { Vector3 } from '../../../math/Vector3.js';\nimport { BufferGeometry } from '../../../core/BufferGeometry.js';\nimport { BufferAttribute } from '../../../core/BufferAttribute.js';\nimport { RenderTarget } from '../../../core/RenderTarget.js';\nimport { Mesh } from '../../../objects/Mesh.js';\nimport { PerspectiveCamera } from '../../../cameras/PerspectiveCamera.js';\nimport { MeshBasicMaterial } from '../../../materials/MeshBasicMaterial.js';\nimport { BoxGeometry } from '../../../geometries/BoxGeometry.js';\nimport {\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tCubeUVReflectionMapping,\n\tLinearFilter,\n\tNoBlending,\n\tRGBAFormat,\n\tHalfFloatType,\n\tBackSide,\n\tLinearSRGBColorSpace\n} from '../../../constants.js';\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\nconst _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\nlet _oldActiveCubeFace = 0;\nlet _oldActiveMipmapLevel = 0;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 )\n];\n\n//\n\n// WebGPU Face indices\nconst _faceLib = [\n\t3, 1, 5,\n\t0, 4, 2\n];\n\nconst direction = getDirection( uv(), attribute( 'faceIndex' ) ).normalize();\nconst outputDirection = vec3( direction.x, direction.y.negate(), direction.z );\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\t\tthis._lodMeshes = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\t\tthis._backgroundBox = null;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tasync compileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tawait this._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tasync compileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tawait this._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\t\tif ( this._backgroundBox !== null ) {\n\n\t\t\tthis._backgroundBox.geometry.dispose();\n\t\t\tthis._backgroundBox.material.dispose();\n\n\t\t}\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t//depthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tasync _compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tawait this._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst cubeCamera = _cubeCamera;\n\t\tcubeCamera.near = near;\n\t\tcubeCamera.far = far;\n\n\t\t// px, py, pz, nx, ny, nz\n\t\tconst upSign = [ - 1, 1, - 1, - 1, - 1, - 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.autoClear = false;\n\n\t\tlet backgroundBox = this._backgroundBox;\n\n\t\tif ( backgroundBox === null ) {\n\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\t\tname: 'PMREM.Background',\n\t\t\t\tside: BackSide,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tdepthTest: false\n\t\t\t} );\n\n\t\t\tbackgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\t}\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundBox.material.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundBox.material.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\trenderer.clear();\n\n\t\tif ( useSolidColor ) {\n\n\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial( texture );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial( texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tmaterial.fragmentNode.value = texture;\n\n\t\tconst mesh = this._lodMeshes[ 0 ];\n\t\tmesh.material = material;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\t\tconst n = this._lodPlanes.length;\n\n\t\tfor ( let i = 1; i < n; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error( 'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = this._lodMeshes[ lodOut ];\n\t\tblurMesh.material = blurMaterial;\n\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\ttargetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;\n\n\t\tblurUniforms.envMap.value = targetIn.texture;\n\t\tblurUniforms.samples.value = samples;\n\t\tblurUniforms.weights.array = weights;\n\t\tblurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms.poleAxis.value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms.dTheta.value = radiansPerPixel;\n\t\tblurUniforms.mipInt.value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\tconst lodMeshes = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\n\t\t\tconst faceIdx = _faceLib[ face ];\n\t\t\tposition.set( coordinates, positionSize * vertices * faceIdx );\n\t\t\tuv.set( uv1, uvSize * vertices * faceIdx );\n\t\t\tconst fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * faceIdx );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\t\tlodMeshes.push( new Mesh( planes, null ) );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas, lodMeshes };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new RenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.texture.isPMREMTexture = true;\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getMaterial( type ) {\n\n\tconst material = new NodeMaterial();\n\tmaterial.depthTest = false;\n\tmaterial.depthWrite = false;\n\tmaterial.blending = NoBlending;\n\tmaterial.name = `PMREM_${ type }`;\n\n\treturn material;\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = uniformArray( new Array( MAX_SAMPLES ).fill( 0 ) );\n\tconst poleAxis = uniform( new Vector3( 0, 1, 0 ) );\n\tconst dTheta = uniform( 0 );\n\tconst n = float( MAX_SAMPLES );\n\tconst latitudinal = uniform( 0 ); // false, bool\n\tconst samples = uniform( 1 ); // int\n\tconst envMap = texture( null );\n\tconst mipInt = uniform( 0 ); // int\n\tconst CUBEUV_TEXEL_WIDTH = float( 1 / width );\n\tconst CUBEUV_TEXEL_HEIGHT = float( 1 / height );\n\tconst CUBEUV_MAX_MIP = float( lodMax );\n\n\tconst materialUniforms = {\n\t\tn,\n\t\tlatitudinal,\n\t\tweights,\n\t\tpoleAxis,\n\t\toutputDirection,\n\t\tdTheta,\n\t\tsamples,\n\t\tenvMap,\n\t\tmipInt,\n\t\tCUBEUV_TEXEL_WIDTH,\n\t\tCUBEUV_TEXEL_HEIGHT,\n\t\tCUBEUV_MAX_MIP\n\t};\n\n\tconst material = _getMaterial( 'blur' );\n\tmaterial.uniforms = materialUniforms; // TODO: Move to outside of the material\n\tmaterial.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );\n\n\treturn material;\n\n}\n\nfunction _getCubemapMaterial( envTexture ) {\n\n\tconst material = _getMaterial( 'cubemap' );\n\tmaterial.fragmentNode = cubeTexture( envTexture, outputDirection );\n\n\treturn material;\n\n}\n\nfunction _getEquirectMaterial( envTexture ) {\n\n\tconst material = _getMaterial( 'equirect' );\n\tmaterial.fragmentNode = texture( envTexture, equirectUV( outputDirection ), 0 );\n\n\treturn material;\n\n}\n\nexport default PMREMGenerator;\n", "let _id = 0;\n\nclass BindGroup {\n\n\tconstructor( name = '', bindings = [], index = 0, bindingsReference = [] ) {\n\n\t\tthis.name = name;\n\t\tthis.bindings = bindings;\n\t\tthis.index = index;\n\t\tthis.bindingsReference = bindingsReference;\n\n\t\tthis.id = _id ++;\n\n\t}\n\n}\n\nexport default BindGroup;\n", "import NodeUniform from './NodeUniform.js';\nimport NodeAttribute from './NodeAttribute.js';\nimport NodeVarying from './NodeVarying.js';\nimport NodeVar from './NodeVar.js';\nimport NodeCode from './NodeCode.js';\nimport NodeCache from './NodeCache.js';\nimport ParameterNode from './ParameterNode.js';\nimport FunctionNode from '../code/FunctionNode.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport { NodeUpdateType, defaultBuildStages, shaderStages } from './constants.js';\n\nimport {\n\tNumberNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\n} from '../../renderers/common/nodes/NodeUniform.js';\n\nimport { stack } from './StackNode.js';\nimport { getCurrentStack, setCurrentStack } from '../tsl/TSLBase.js';\n\nimport CubeRenderTarget from '../../renderers/common/CubeRenderTarget.js';\nimport ChainMap from '../../renderers/common/ChainMap.js';\n\nimport PMREMGenerator from '../../renderers/common/extras/PMREMGenerator.js';\n\nimport BindGroup from '../../renderers/common/BindGroup.js';\n\nimport { REVISION } from '../../constants.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { Color } from '../../math/Color.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { Float16BufferAttribute } from '../../core/BufferAttribute.js';\nimport { IntType, UnsignedIntType, LinearFilter, LinearMipmapNearestFilter, NearestMipmapLinearFilter, LinearMipmapLinearFilter } from '../../constants.js';\n\nconst rendererCache = new WeakMap();\n\nconst typeFromLength = new Map( [\n\t[ 2, 'vec2' ],\n\t[ 3, 'vec3' ],\n\t[ 4, 'vec4' ],\n\t[ 9, 'mat3' ],\n\t[ 16, 'mat4' ]\n] );\n\nconst typeFromArray = new Map( [\n\t[ Int8Array, 'int' ],\n\t[ Int16Array, 'int' ],\n\t[ Int32Array, 'int' ],\n\t[ Uint8Array, 'uint' ],\n\t[ Uint16Array, 'uint' ],\n\t[ Uint32Array, 'uint' ],\n\t[ Float32Array, 'float' ]\n] );\n\nconst toFloat = ( value ) => {\n\n\tvalue = Number( value );\n\n\treturn value + ( value % 1 ? '' : '.0' );\n\n};\n\nclass NodeBuilder {\n\n\tconstructor( object, renderer, parser ) {\n\n\t\tthis.object = object;\n\t\tthis.material = ( object && object.material ) || null;\n\t\tthis.geometry = ( object && object.geometry ) || null;\n\t\tthis.renderer = renderer;\n\t\tthis.parser = parser;\n\t\tthis.scene = null;\n\t\tthis.camera = null;\n\n\t\tthis.nodes = [];\n\t\tthis.updateNodes = [];\n\t\tthis.updateBeforeNodes = [];\n\t\tthis.updateAfterNodes = [];\n\t\tthis.hashNodes = {};\n\n\t\tthis.monitor = null;\n\n\t\tthis.lightsNode = null;\n\t\tthis.environmentNode = null;\n\t\tthis.fogNode = null;\n\n\t\tthis.clippingContext = null;\n\n\t\tthis.vertexShader = null;\n\t\tthis.fragmentShader = null;\n\t\tthis.computeShader = null;\n\n\t\tthis.flowNodes = { vertex: [], fragment: [], compute: [] };\n\t\tthis.flowCode = { vertex: '', fragment: '', compute: '' };\n\t\tthis.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };\n\t\tthis.structs = { vertex: [], fragment: [], compute: [], index: 0 };\n\t\tthis.bindings = { vertex: {}, fragment: {}, compute: {} };\n\t\tthis.bindingsIndexes = {};\n\t\tthis.bindGroups = null;\n\t\tthis.attributes = [];\n\t\tthis.bufferAttributes = [];\n\t\tthis.varyings = [];\n\t\tthis.codes = {};\n\t\tthis.vars = {};\n\t\tthis.flow = { code: '' };\n\t\tthis.chaining = [];\n\t\tthis.stack = stack();\n\t\tthis.stacks = [];\n\t\tthis.tab = '\\t';\n\n\t\tthis.currentFunctionNode = null;\n\n\t\tthis.context = {\n\t\t\tmaterial: this.material\n\t\t};\n\n\t\tthis.cache = new NodeCache();\n\t\tthis.globalCache = this.cache;\n\n\t\tthis.flowsData = new WeakMap();\n\n\t\tthis.shaderStage = null;\n\t\tthis.buildStage = null;\n\n\t\tthis.useComparisonMethod = false;\n\n\t}\n\n\tgetBindGroupsCache() {\n\n\t\tlet bindGroupsCache = rendererCache.get( this.renderer );\n\n\t\tif ( bindGroupsCache === undefined ) {\n\n\t\t\tbindGroupsCache = new ChainMap();\n\n\t\t\trendererCache.set( this.renderer, bindGroupsCache );\n\n\t\t}\n\n\t\treturn bindGroupsCache;\n\n\t}\n\n\tcreateRenderTarget( width, height, options ) {\n\n\t\treturn new RenderTarget( width, height, options );\n\n\t}\n\n\tcreateCubeRenderTarget( size, options ) {\n\n\t\treturn new CubeRenderTarget( size, options );\n\n\t}\n\n\tcreatePMREMGenerator() {\n\n\t\t// TODO: Move Materials.js to outside of the Nodes.js in order to remove this function and improve tree-shaking support\n\n\t\treturn new PMREMGenerator( this.renderer );\n\n\t}\n\n\tincludes( node ) {\n\n\t\treturn this.nodes.includes( node );\n\n\t}\n\n\t_getBindGroup( groupName, bindings ) {\n\n\t\tconst bindGroupsCache = this.getBindGroupsCache();\n\n\t\t//\n\n\t\tconst bindingsArray = [];\n\n\t\tlet sharedGroup = true;\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tbindingsArray.push( binding );\n\n\t\t\tsharedGroup = sharedGroup && binding.groupNode.shared !== true;\n\n\t\t}\n\n\t\t//\n\n\t\tlet bindGroup;\n\n\t\tif ( sharedGroup ) {\n\n\t\t\tbindGroup = bindGroupsCache.get( bindingsArray );\n\n\t\t\tif ( bindGroup === undefined ) {\n\n\t\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\n\n\t\t\t\tbindGroupsCache.set( bindingsArray, bindGroup );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\n\n\t\t}\n\n\t\treturn bindGroup;\n\n\t}\n\n\tgetBindGroupArray( groupName, shaderStage ) {\n\n\t\tconst bindings = this.bindings[ shaderStage ];\n\n\t\tlet bindGroup = bindings[ groupName ];\n\n\t\tif ( bindGroup === undefined ) {\n\n\t\t\tif ( this.bindingsIndexes[ groupName ] === undefined ) {\n\n\t\t\t\tthis.bindingsIndexes[ groupName ] = { binding: 0, group: Object.keys( this.bindingsIndexes ).length };\n\n\t\t\t}\n\n\t\t\tbindings[ groupName ] = bindGroup = [];\n\n\t\t}\n\n\t\treturn bindGroup;\n\n\t}\n\n\tgetBindings() {\n\n\t\tlet bindingsGroups = this.bindGroups;\n\n\t\tif ( bindingsGroups === null ) {\n\n\t\t\tconst groups = {};\n\t\t\tconst bindings = this.bindings;\n\n\t\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\t\tfor ( const groupName in bindings[ shaderStage ] ) {\n\n\t\t\t\t\tconst uniforms = bindings[ shaderStage ][ groupName ];\n\n\t\t\t\t\tconst groupUniforms = groups[ groupName ] || ( groups[ groupName ] = [] );\n\t\t\t\t\tgroupUniforms.push( ...uniforms );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingsGroups = [];\n\n\t\t\tfor ( const groupName in groups ) {\n\n\t\t\t\tconst group = groups[ groupName ];\n\n\t\t\t\tconst bindingsGroup = this._getBindGroup( groupName, group );\n\n\t\t\t\tbindingsGroups.push( bindingsGroup );\n\n\t\t\t}\n\n\t\t\tthis.bindGroups = bindingsGroups;\n\n\t\t}\n\n\t\treturn bindingsGroups;\n\n\t}\n\n\tsortBindingGroups() {\n\n\t\tconst bindingsGroups = this.getBindings();\n\n\t\tbindingsGroups.sort( ( a, b ) => ( a.bindings[ 0 ].groupNode.order - b.bindings[ 0 ].groupNode.order ) );\n\n\t\tfor ( let i = 0; i < bindingsGroups.length; i ++ ) {\n\n\t\t\tconst bindingGroup = bindingsGroups[ i ];\n\t\t\tthis.bindingsIndexes[ bindingGroup.name ].group = i;\n\n\t\t\tbindingGroup.index = i;\n\n\t\t}\n\n\t}\n\n\tsetHashNode( node, hash ) {\n\n\t\tthis.hashNodes[ hash ] = node;\n\n\t}\n\n\taddNode( node ) {\n\n\t\tif ( this.nodes.includes( node ) === false ) {\n\n\t\t\tthis.nodes.push( node );\n\n\t\t\tthis.setHashNode( node, node.getHash( this ) );\n\n\t\t}\n\n\t}\n\n\tbuildUpdateNodes() {\n\n\t\tfor ( const node of this.nodes ) {\n\n\t\t\tconst updateType = node.getUpdateType();\n\t\t\tconst updateBeforeType = node.getUpdateBeforeType();\n\t\t\tconst updateAfterType = node.getUpdateAfterType();\n\n\t\t\tif ( updateType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t\tif ( updateBeforeType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateBeforeNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t\tif ( updateAfterType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateAfterNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tget currentNode() {\n\n\t\treturn this.chaining[ this.chaining.length - 1 ];\n\n\t}\n\n\tisFilteredTexture( texture ) {\n\n\t\treturn ( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter );\n\n\t}\n\n\taddChain( node ) {\n\n\t\t/*\n\t\tif ( this.chaining.indexOf( node ) !== - 1 ) {\n\n\t\t\tconsole.warn( 'Recursive node: ', node );\n\n\t\t}\n\t\t*/\n\n\t\tthis.chaining.push( node );\n\n\t}\n\n\tremoveChain( node ) {\n\n\t\tconst lastChain = this.chaining.pop();\n\n\t\tif ( lastChain !== node ) {\n\n\t\t\tthrow new Error( 'NodeBuilder: Invalid node chaining!' );\n\n\t\t}\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\treturn method;\n\n\t}\n\n\tgetNodeFromHash( hash ) {\n\n\t\treturn this.hashNodes[ hash ];\n\n\t}\n\n\taddFlow( shaderStage, node ) {\n\n\t\tthis.flowNodes[ shaderStage ].push( node );\n\n\t\treturn node;\n\n\t}\n\n\tsetContext( context ) {\n\n\t\tthis.context = context;\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this.context;\n\n\t}\n\n\tgetSharedContext() {\n\n\t\tconst context = { ...this.context };\n\n\t\tdelete context.material;\n\n\t\treturn this.context;\n\n\t}\n\n\tsetCache( cache ) {\n\n\t\tthis.cache = cache;\n\n\t}\n\n\tgetCache() {\n\n\t\treturn this.cache;\n\n\t}\n\n\tgetCacheFromNode( node, parent = true ) {\n\n\t\tconst data = this.getDataFromNode( node );\n\t\tif ( data.cache === undefined ) data.cache = new NodeCache( parent ? this.getCache() : null );\n\n\t\treturn data.cache;\n\n\t}\n\n\tisAvailable( /*name*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetDrawIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetFragCoord() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\tincreaseUsage( node ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\t\tnodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\n\n\t\treturn nodeData.usageCount;\n\n\t}\n\n\tgenerateTexture( /* texture, textureProperty, uvSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgenerateTextureLod( /* texture, textureProperty, uvSnippet, levelSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgenerateConst( type, value = null ) {\n\n\t\tif ( value === null ) {\n\n\t\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) value = 0;\n\t\t\telse if ( type === 'bool' ) value = false;\n\t\t\telse if ( type === 'color' ) value = new Color();\n\t\t\telse if ( type === 'vec2' ) value = new Vector2();\n\t\t\telse if ( type === 'vec3' ) value = new Vector3();\n\t\t\telse if ( type === 'vec4' ) value = new Vector4();\n\n\t\t}\n\n\t\tif ( type === 'float' ) return toFloat( value );\n\t\tif ( type === 'int' ) return `${ Math.round( value ) }`;\n\t\tif ( type === 'uint' ) return value >= 0 ? `${ Math.round( value ) }u` : '0u';\n\t\tif ( type === 'bool' ) return value ? 'true' : 'false';\n\t\tif ( type === 'color' ) return `${ this.getType( 'vec3' ) }( ${ toFloat( value.r ) }, ${ toFloat( value.g ) }, ${ toFloat( value.b ) } )`;\n\n\t\tconst typeLength = this.getTypeLength( type );\n\n\t\tconst componentType = this.getComponentType( type );\n\n\t\tconst generateConst = value => this.generateConst( componentType, value );\n\n\t\tif ( typeLength === 2 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) } )`;\n\n\t\t} else if ( typeLength === 3 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) } )`;\n\n\t\t} else if ( typeLength === 4 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) }, ${ generateConst( value.w ) } )`;\n\n\t\t} else if ( typeLength > 4 && value && ( value.isMatrix3 || value.isMatrix4 ) ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ value.elements.map( generateConst ).join( ', ' ) } )`;\n\n\t\t} else if ( typeLength > 4 ) {\n\n\t\t\treturn `${ this.getType( type ) }()`;\n\n\t\t}\n\n\t\tthrow new Error( `NodeBuilder: Type '${type}' not found in generate constant attempt.` );\n\n\t}\n\n\tgetType( type ) {\n\n\t\tif ( type === 'color' ) return 'vec3';\n\n\t\treturn type;\n\n\t}\n\n\thasGeometryAttribute( name ) {\n\n\t\treturn this.geometry && this.geometry.getAttribute( name ) !== undefined;\n\n\t}\n\n\tgetAttribute( name, type ) {\n\n\t\tconst attributes = this.attributes;\n\n\t\t// find attribute\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tif ( attribute.name === name ) {\n\n\t\t\t\treturn attribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create a new if no exist\n\n\t\tconst attribute = new NodeAttribute( name, type );\n\n\t\tattributes.push( attribute );\n\n\t\treturn attribute;\n\n\t}\n\n\tgetPropertyName( node/*, shaderStage*/ ) {\n\n\t\treturn node.name;\n\n\t}\n\n\tisVector( type ) {\n\n\t\treturn /vec\\d/.test( type );\n\n\t}\n\n\tisMatrix( type ) {\n\n\t\treturn /mat\\d/.test( type );\n\n\t}\n\n\tisReference( type ) {\n\n\t\treturn type === 'void' || type === 'property' || type === 'sampler' || type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'depthTexture' || type === 'texture3D';\n\n\t}\n\n\tneedsToWorkingColorSpace( /*texture*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetComponentTypeFromTexture( texture ) {\n\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isDataTexture ) {\n\n\t\t\tif ( type === IntType ) return 'int';\n\t\t\tif ( type === UnsignedIntType ) return 'uint';\n\n\t\t}\n\n\t\treturn 'float';\n\n\t}\n\n\tgetElementType( type ) {\n\n\t\tif ( type === 'mat2' ) return 'vec2';\n\t\tif ( type === 'mat3' ) return 'vec3';\n\t\tif ( type === 'mat4' ) return 'vec4';\n\n\t\treturn this.getComponentType( type );\n\n\t}\n\n\tgetComponentType( type ) {\n\n\t\ttype = this.getVectorType( type );\n\n\t\tif ( type === 'float' || type === 'bool' || type === 'int' || type === 'uint' ) return type;\n\n\t\tconst componentType = /(b|i|u|)(vec|mat)([2-4])/.exec( type );\n\n\t\tif ( componentType === null ) return null;\n\n\t\tif ( componentType[ 1 ] === 'b' ) return 'bool';\n\t\tif ( componentType[ 1 ] === 'i' ) return 'int';\n\t\tif ( componentType[ 1 ] === 'u' ) return 'uint';\n\n\t\treturn 'float';\n\n\t}\n\n\tgetVectorType( type ) {\n\n\t\tif ( type === 'color' ) return 'vec3';\n\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) return 'vec4';\n\n\t\treturn type;\n\n\t}\n\n\tgetTypeFromLength( length, componentType = 'float' ) {\n\n\t\tif ( length === 1 ) return componentType;\n\n\t\tconst baseType = typeFromLength.get( length );\n\t\tconst prefix = componentType === 'float' ? '' : componentType[ 0 ];\n\n\t\treturn prefix + baseType;\n\n\t}\n\n\tgetTypeFromArray( array ) {\n\n\t\treturn typeFromArray.get( array.constructor );\n\n\t}\n\n\tgetTypeFromAttribute( attribute ) {\n\n\t\tlet dataAttribute = attribute;\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\n\n\t\tconst array = dataAttribute.array;\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst normalized = attribute.normalized;\n\n\t\tlet arrayType;\n\n\t\tif ( ! ( attribute instanceof Float16BufferAttribute ) && normalized !== true ) {\n\n\t\t\tarrayType = this.getTypeFromArray( array );\n\n\t\t}\n\n\t\treturn this.getTypeFromLength( itemSize, arrayType );\n\n\t}\n\n\tgetTypeLength( type ) {\n\n\t\tconst vecType = this.getVectorType( type );\n\t\tconst vecNum = /vec([2-4])/.exec( vecType );\n\n\t\tif ( vecNum !== null ) return Number( vecNum[ 1 ] );\n\t\tif ( vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint' ) return 1;\n\t\tif ( /mat2/.test( type ) === true ) return 4;\n\t\tif ( /mat3/.test( type ) === true ) return 9;\n\t\tif ( /mat4/.test( type ) === true ) return 16;\n\n\t\treturn 0;\n\n\t}\n\n\tgetVectorFromMatrix( type ) {\n\n\t\treturn type.replace( 'mat', 'vec' );\n\n\t}\n\n\tchangeComponentType( type, newComponentType ) {\n\n\t\treturn this.getTypeFromLength( this.getTypeLength( type ), newComponentType );\n\n\t}\n\n\tgetIntegerType( type ) {\n\n\t\tconst componentType = this.getComponentType( type );\n\n\t\tif ( componentType === 'int' || componentType === 'uint' ) return type;\n\n\t\treturn this.changeComponentType( type, 'int' );\n\n\t}\n\n\taddStack() {\n\n\t\tthis.stack = stack( this.stack );\n\n\t\tthis.stacks.push( getCurrentStack() || this.stack );\n\t\tsetCurrentStack( this.stack );\n\n\t\treturn this.stack;\n\n\t}\n\n\tremoveStack() {\n\n\t\tconst lastStack = this.stack;\n\t\tthis.stack = lastStack.parent;\n\n\t\tsetCurrentStack( this.stacks.pop() );\n\n\t\treturn lastStack;\n\n\t}\n\n\tgetDataFromNode( node, shaderStage = this.shaderStage, cache = null ) {\n\n\t\tcache = cache === null ? ( node.isGlobal( this ) ? this.globalCache : this.cache ) : cache;\n\n\t\tlet nodeData = cache.getData( node );\n\n\t\tif ( nodeData === undefined ) {\n\n\t\t\tnodeData = {};\n\n\t\t\tcache.setData( node, nodeData );\n\n\t\t}\n\n\t\tif ( nodeData[ shaderStage ] === undefined ) nodeData[ shaderStage ] = {};\n\n\t\treturn nodeData[ shaderStage ];\n\n\t}\n\n\tgetNodeProperties( node, shaderStage = 'any' ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\treturn nodeData.properties || ( nodeData.properties = { outputNode: null } );\n\n\t}\n\n\tgetBufferAttributeFromNode( node, type ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\n\t\tlet bufferAttribute = nodeData.bufferAttribute;\n\n\t\tif ( bufferAttribute === undefined ) {\n\n\t\t\tconst index = this.uniforms.index ++;\n\n\t\t\tbufferAttribute = new NodeAttribute( 'nodeAttribute' + index, type, node );\n\n\t\t\tthis.bufferAttributes.push( bufferAttribute );\n\n\t\t\tnodeData.bufferAttribute = bufferAttribute;\n\n\t\t}\n\n\t\treturn bufferAttribute;\n\n\t}\n\n\tgetStructTypeFromNode( node, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tif ( nodeData.structType === undefined ) {\n\n\t\t\tconst index = this.structs.index ++;\n\n\t\t\tnode.name = `StructType${ index }`;\n\t\t\tthis.structs[ shaderStage ].push( node );\n\n\t\t\tnodeData.structType = node;\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetUniformFromNode( node, type, shaderStage = this.shaderStage, name = null ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet nodeUniform = nodeData.uniform;\n\n\t\tif ( nodeUniform === undefined ) {\n\n\t\t\tconst index = this.uniforms.index ++;\n\n\t\t\tnodeUniform = new NodeUniform( name || ( 'nodeUniform' + index ), type, node );\n\n\t\t\tthis.uniforms[ shaderStage ].push( nodeUniform );\n\n\t\t\tnodeData.uniform = nodeUniform;\n\n\t\t}\n\n\t\treturn nodeUniform;\n\n\t}\n\n\tgetVarFromNode( node, name = null, type = node.getNodeType( this ), shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tlet nodeVar = nodeData.variable;\n\n\t\tif ( nodeVar === undefined ) {\n\n\t\t\tconst vars = this.vars[ shaderStage ] || ( this.vars[ shaderStage ] = [] );\n\n\t\t\tif ( name === null ) name = 'nodeVar' + vars.length;\n\n\t\t\tnodeVar = new NodeVar( name, type );\n\n\t\t\tvars.push( nodeVar );\n\n\t\t\tnodeData.variable = nodeVar;\n\n\t\t}\n\n\t\treturn nodeVar;\n\n\t}\n\n\tgetVaryingFromNode( node, name = null, type = node.getNodeType( this ) ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, 'any' );\n\n\t\tlet nodeVarying = nodeData.varying;\n\n\t\tif ( nodeVarying === undefined ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst index = varyings.length;\n\n\t\t\tif ( name === null ) name = 'nodeVarying' + index;\n\n\t\t\tnodeVarying = new NodeVarying( name, type );\n\n\t\t\tvaryings.push( nodeVarying );\n\n\t\t\tnodeData.varying = nodeVarying;\n\n\t\t}\n\n\t\treturn nodeVarying;\n\n\t}\n\n\tgetCodeFromNode( node, type, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\n\t\tlet nodeCode = nodeData.code;\n\n\t\tif ( nodeCode === undefined ) {\n\n\t\t\tconst codes = this.codes[ shaderStage ] || ( this.codes[ shaderStage ] = [] );\n\t\t\tconst index = codes.length;\n\n\t\t\tnodeCode = new NodeCode( 'nodeCode' + index, type );\n\n\t\t\tcodes.push( nodeCode );\n\n\t\t\tnodeData.code = nodeCode;\n\n\t\t}\n\n\t\treturn nodeCode;\n\n\t}\n\n\taddFlowCodeHierarchy( node, nodeBlock ) {\n\n\t\tconst { flowCodes, flowCodeBlock } = this.getDataFromNode( node );\n\n\t\tlet needsFlowCode = true;\n\t\tlet nodeBlockHierarchy = nodeBlock;\n\n\t\twhile ( nodeBlockHierarchy ) {\n\n\t\t\tif ( flowCodeBlock.get( nodeBlockHierarchy ) === true ) {\n\n\t\t\t\tneedsFlowCode = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tnodeBlockHierarchy = this.getDataFromNode( nodeBlockHierarchy ).parentNodeBlock;\n\n\t\t}\n\n\t\tif ( needsFlowCode ) {\n\n\t\t\tfor ( const flowCode of flowCodes ) {\n\n\t\t\t\tthis.addLineFlowCode( flowCode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddLineFlowCodeBlock( node, code, nodeBlock ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\t\tconst flowCodes = nodeData.flowCodes || ( nodeData.flowCodes = [] );\n\t\tconst codeBlock = nodeData.flowCodeBlock || ( nodeData.flowCodeBlock = new WeakMap() );\n\n\t\tflowCodes.push( code );\n\t\tcodeBlock.set( nodeBlock, true );\n\n\t}\n\n\taddLineFlowCode( code, node = null ) {\n\n\t\tif ( code === '' ) return this;\n\n\t\tif ( node !== null && this.context.nodeBlock ) {\n\n\t\t\tthis.addLineFlowCodeBlock( node, code, this.context.nodeBlock );\n\n\t\t}\n\n\t\tcode = this.tab + code;\n\n\t\tif ( ! /;\\s*$/.test( code ) ) {\n\n\t\t\tcode = code + ';\\n';\n\n\t\t}\n\n\t\tthis.flow.code += code;\n\n\t\treturn this;\n\n\t}\n\n\taddFlowCode( code ) {\n\n\t\tthis.flow.code += code;\n\n\t\treturn this;\n\n\t}\n\n\taddFlowTab() {\n\n\t\tthis.tab += '\\t';\n\n\t\treturn this;\n\n\t}\n\n\tremoveFlowTab() {\n\n\t\tthis.tab = this.tab.slice( 0, - 1 );\n\n\t\treturn this;\n\n\t}\n\n\tgetFlowData( node/*, shaderStage*/ ) {\n\n\t\treturn this.flowsData.get( node );\n\n\t}\n\n\tflowNode( node ) {\n\n\t\tconst output = node.getNodeType( this );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tthis.flowsData.set( node, flowData );\n\n\t\treturn flowData;\n\n\t}\n\n\tbuildFunctionNode( shaderNode ) {\n\n\t\tconst fn = new FunctionNode();\n\n\t\tconst previous = this.currentFunctionNode;\n\n\t\tthis.currentFunctionNode = fn;\n\n\t\tfn.code = this.buildFunctionCode( shaderNode );\n\n\t\tthis.currentFunctionNode = previous;\n\n\t\treturn fn;\n\n\t}\n\n\tflowShaderNode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\n\t\tconst inputs = {\n\t\t\t[ Symbol.iterator ]() {\n\n\t\t\t\tlet index = 0;\n\t\t\t\tconst values = Object.values( this );\n\t\t\t\treturn {\n\t\t\t\t\tnext: () => ( {\n\t\t\t\t\t\tvalue: values[ index ],\n\t\t\t\t\t\tdone: index ++ >= values.length\n\t\t\t\t\t} )\n\t\t\t\t};\n\n\t\t\t}\n\t\t};\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tinputs[ input.name ] = new ParameterNode( input.type, input.name );\n\n\t\t}\n\n\t\t//\n\n\t\tshaderNode.layout = null;\n\n\t\tconst callNode = shaderNode.call( inputs );\n\t\tconst flowData = this.flowStagesNode( callNode, layout.type );\n\n\t\tshaderNode.layout = layout;\n\n\t\treturn flowData;\n\n\t}\n\n\tflowStagesNode( node, output = null ) {\n\n\t\tconst previousFlow = this.flow;\n\t\tconst previousVars = this.vars;\n\t\tconst previousCache = this.cache;\n\t\tconst previousBuildStage = this.buildStage;\n\t\tconst previousStack = this.stack;\n\n\t\tconst flow = {\n\t\t\tcode: ''\n\t\t};\n\n\t\tthis.flow = flow;\n\t\tthis.vars = {};\n\t\tthis.cache = new NodeCache();\n\t\tthis.stack = stack();\n\n\t\tfor ( const buildStage of defaultBuildStages ) {\n\n\t\t\tthis.setBuildStage( buildStage );\n\n\t\t\tflow.result = node.build( this, output );\n\n\t\t}\n\n\t\tflow.vars = this.getVars( this.shaderStage );\n\n\t\tthis.flow = previousFlow;\n\t\tthis.vars = previousVars;\n\t\tthis.cache = previousCache;\n\t\tthis.stack = previousStack;\n\n\t\tthis.setBuildStage( previousBuildStage );\n\n\t\treturn flow;\n\n\t}\n\n\tgetFunctionOperator() {\n\n\t\treturn null;\n\n\t}\n\n\tflowChildNode( node, output = null ) {\n\n\t\tconst previousFlow = this.flow;\n\n\t\tconst flow = {\n\t\t\tcode: ''\n\t\t};\n\n\t\tthis.flow = flow;\n\n\t\tflow.result = node.build( this, output );\n\n\t\tthis.flow = previousFlow;\n\n\t\treturn flow;\n\n\t}\n\n\tflowNodeFromShaderStage( shaderStage, node, output = null, propertyName = null ) {\n\n\t\tconst previousShaderStage = this.shaderStage;\n\n\t\tthis.setShaderStage( shaderStage );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tif ( propertyName !== null ) {\n\n\t\t\tflowData.code += `${ this.tab + propertyName } = ${ flowData.result };\\n`;\n\n\t\t}\n\n\t\tthis.flowCode[ shaderStage ] = this.flowCode[ shaderStage ] + flowData.code;\n\n\t\tthis.setShaderStage( previousShaderStage );\n\n\t\treturn flowData;\n\n\t}\n\n\tgetAttributesArray() {\n\n\t\treturn this.attributes.concat( this.bufferAttributes );\n\n\t}\n\n\tgetAttributes( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetVaryings( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetVar( type, name ) {\n\n\t\treturn `${ this.getType( type ) } ${ name }`;\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippet += `${ this.getVar( variable.type, variable.name ) }; `;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetUniforms( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetCodes( shaderStage ) {\n\n\t\tconst codes = this.codes[ shaderStage ];\n\n\t\tlet code = '';\n\n\t\tif ( codes !== undefined ) {\n\n\t\t\tfor ( const nodeCode of codes ) {\n\n\t\t\t\tcode += nodeCode.code + '\\n';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.vertexShader + this.fragmentShader + this.computeShader;\n\n\t}\n\n\tsetShaderStage( shaderStage ) {\n\n\t\tthis.shaderStage = shaderStage;\n\n\t}\n\n\tgetShaderStage() {\n\n\t\treturn this.shaderStage;\n\n\t}\n\n\tsetBuildStage( buildStage ) {\n\n\t\tthis.buildStage = buildStage;\n\n\t}\n\n\tgetBuildStage() {\n\n\t\treturn this.buildStage;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tbuild() {\n\n\t\tconst { object, material, renderer } = this;\n\n\t\tif ( material !== null ) {\n\n\t\t\tlet nodeMaterial = renderer.nodes.library.fromMaterial( material );\n\n\t\t\tif ( nodeMaterial === null ) {\n\n\t\t\t\tconsole.error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\n\n\t\t\t\tnodeMaterial = new NodeMaterial();\n\n\t\t\t}\n\n\t\t\tnodeMaterial.build( this );\n\n\t\t} else {\n\n\t\t\tthis.addFlow( 'compute', object );\n\n\t\t}\n\n\t\t// setup() -> stage 1: create possible new nodes and returns an output reference node\n\t\t// analyze()   -> stage 2: analyze nodes to possible optimization and validation\n\t\t// generate()  -> stage 3: generate shader\n\n\t\tfor ( const buildStage of defaultBuildStages ) {\n\n\t\t\tthis.setBuildStage( buildStage );\n\n\t\t\tif ( this.context.vertex && this.context.vertex.isNode ) {\n\n\t\t\t\tthis.flowNodeFromShaderStage( 'vertex', this.context.vertex );\n\n\t\t\t}\n\n\t\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\t\tthis.setShaderStage( shaderStage );\n\n\t\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\n\t\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\t\tif ( buildStage === 'generate' ) {\n\n\t\t\t\t\t\tthis.flowNode( node );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode.build( this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setBuildStage( null );\n\t\tthis.setShaderStage( null );\n\n\t\t// stage 4: build code for a specific output\n\n\t\tthis.buildCode();\n\t\tthis.buildUpdateNodes();\n\n\t\treturn this;\n\n\t}\n\n\tgetNodeUniform( uniformNode, type ) {\n\n\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) return new NumberNodeUniform( uniformNode );\n\t\tif ( type === 'vec2' || type === 'ivec2' || type === 'uvec2' ) return new Vector2NodeUniform( uniformNode );\n\t\tif ( type === 'vec3' || type === 'ivec3' || type === 'uvec3' ) return new Vector3NodeUniform( uniformNode );\n\t\tif ( type === 'vec4' || type === 'ivec4' || type === 'uvec4' ) return new Vector4NodeUniform( uniformNode );\n\t\tif ( type === 'color' ) return new ColorNodeUniform( uniformNode );\n\t\tif ( type === 'mat3' ) return new Matrix3NodeUniform( uniformNode );\n\t\tif ( type === 'mat4' ) return new Matrix4NodeUniform( uniformNode );\n\n\t\tthrow new Error( `Uniform \"${type}\" not declared.` );\n\n\t}\n\n\tcreateNodeMaterial( type = 'NodeMaterial' ) { // @deprecated, r168\n\n\t\tthrow new Error( `THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${ type }() instead.` );\n\n\t}\n\n\tformat( snippet, fromType, toType ) {\n\n\t\tfromType = this.getVectorType( fromType );\n\t\ttoType = this.getVectorType( toType );\n\n\t\tif ( fromType === toType || toType === null || this.isReference( toType ) ) {\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tconst fromTypeLength = this.getTypeLength( fromType );\n\t\tconst toTypeLength = this.getTypeLength( toType );\n\n\t\tif ( fromTypeLength === 16 && toTypeLength === 9 ) {\n\n\t\t\treturn `${ this.getType( toType ) }(${ snippet }[0].xyz, ${ snippet }[1].xyz, ${ snippet }[2].xyz)`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 9 && toTypeLength === 4 ) {\n\n\t\t\treturn `${ this.getType( toType ) }(${ snippet }[0].xy, ${ snippet }[1].xy)`;\n\n\t\t}\n\n\n\t\tif ( fromTypeLength > 4 ) { // fromType is matrix-like\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( toTypeLength > 4 || toTypeLength === 0 ) { // toType is matrix-like or unknown\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( fromTypeLength === toTypeLength ) {\n\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet } )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength > toTypeLength ) {\n\n\t\t\treturn this.format( `${ snippet }.${ 'xyz'.slice( 0, toTypeLength ) }`, this.getTypeFromLength( toTypeLength, this.getComponentType( fromType ) ), toType );\n\n\t\t}\n\n\t\tif ( toTypeLength === 4 && fromTypeLength > 1 ) { // toType is vec4-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec3' ) }, 1.0 )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 2 ) { // fromType is vec2-like and toType is vec3-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec2' ) }, 0.0 )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType( toType ) ) { // fromType is float-like\n\n\t\t\t// convert a number value to vector type, e.g:\n\t\t\t// vec3( 1u ) -> vec3( float( 1u ) )\n\n\t\t\tsnippet = `${ this.getType( this.getComponentType( toType ) ) }( ${ snippet } )`;\n\n\t\t}\n\n\t\treturn `${ this.getType( toType ) }( ${ snippet } )`; // fromType is float-like\n\n\t}\n\n\tgetSignature() {\n\n\t\treturn `// Three.js r${ REVISION } - Node System\\n`;\n\n\t}\n\n}\n\nexport default NodeBuilder;\n", "import { NodeUpdateType } from './constants.js';\n\nclass NodeFrame {\n\n\tconstructor() {\n\n\t\tthis.time = 0;\n\t\tthis.deltaTime = 0;\n\n\t\tthis.frameId = 0;\n\t\tthis.renderId = 0;\n\n\t\tthis.startTime = null;\n\n\t\tthis.updateMap = new WeakMap();\n\t\tthis.updateBeforeMap = new WeakMap();\n\t\tthis.updateAfterMap = new WeakMap();\n\n\t\tthis.renderer = null;\n\t\tthis.material = null;\n\t\tthis.camera = null;\n\t\tthis.object = null;\n\t\tthis.scene = null;\n\n\t}\n\n\t_getMaps( referenceMap, nodeRef ) {\n\n\t\tlet maps = referenceMap.get( nodeRef );\n\n\t\tif ( maps === undefined ) {\n\n\t\t\tmaps = {\n\t\t\t\trenderMap: new WeakMap(),\n\t\t\t\tframeMap: new WeakMap()\n\t\t\t};\n\n\t\t\treferenceMap.set( nodeRef, maps );\n\n\t\t}\n\n\t\treturn maps;\n\n\t}\n\n\tupdateBeforeNode( node ) {\n\n\t\tconst updateType = node.getUpdateBeforeType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateBefore( this );\n\n\t\t}\n\n\t}\n\n\tupdateAfterNode( node ) {\n\n\t\tconst updateType = node.getUpdateAfterType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateAfterMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateAfterMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateAfter( this );\n\n\t\t}\n\n\t}\n\n\tupdateNode( node ) {\n\n\t\tconst updateType = node.getUpdateType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.update( this );\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tthis.frameId ++;\n\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\n\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\n\n\t\tthis.lastTime = performance.now();\n\n\t\tthis.time += this.deltaTime;\n\n\t}\n\n}\n\nexport default NodeFrame;\n", "class NodeFunctionInput {\n\n\tconstructor( type, name, count = null, qualifier = '', isConst = false ) {\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\t\tthis.count = count;\n\t\tthis.qualifier = qualifier;\n\t\tthis.isConst = isConst;\n\n\t}\n\n}\n\nNodeFunctionInput.isNodeFunctionInput = true;\n\nexport default NodeFunctionInput;\n", "import Node from './Node.js';\n\nclass StructTypeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StructTypeNode';\n\n\t}\n\n\tconstructor( types ) {\n\n\t\tsuper();\n\n\t\tthis.types = types;\n\t\tthis.isStructTypeNode = true;\n\n\t}\n\n\tgetMemberTypes() {\n\n\t\treturn this.types;\n\n\t}\n\n}\n\nexport default StructTypeNode;\n", "import Node from './Node.js';\nimport StructTypeNode from './StructTypeNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass OutputStructNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'OutputStructNode';\n\n\t}\n\n\tconstructor( ...members ) {\n\n\t\tsuper();\n\n\t\tthis.members = members;\n\n\t\tthis.isOutputStructNode = true;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst members = this.members;\n\t\tconst types = [];\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\ttypes.push( members[ i ].getNodeType( builder ) );\n\n\t\t}\n\n\t\tthis.nodeType = builder.getStructTypeFromNode( new StructTypeNode( types ) ).name;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst propertyName = builder.getOutputStructName();\n\t\tconst members = this.members;\n\n\t\tconst structPrefix = propertyName !== '' ? propertyName + '.' : '';\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst snippet = members[ i ].build( builder, output );\n\n\t\t\tbuilder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }`, this );\n\n\t\t}\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\nexport default OutputStructNode;\n\nexport const outputStruct = /*@__PURE__*/ nodeProxy( OutputStructNode );\n", "import OutputStructNode from './OutputStructNode.js';\nimport { nodeProxy, vec4 } from '../tsl/TSLBase.js';\n\nexport function getTextureIndex( textures, name ) {\n\n\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\tif ( textures[ i ].name === name ) {\n\n\t\t\treturn i;\n\n\t\t}\n\n\t}\n\n\treturn - 1;\n\n}\n\nclass MRTNode extends OutputStructNode {\n\n\tstatic get type() {\n\n\t\treturn 'MRTNode';\n\n\t}\n\n\tconstructor( outputNodes ) {\n\n\t\tsuper();\n\n\t\tthis.outputNodes = outputNodes;\n\n\t\tthis.isMRTNode = true;\n\n\t}\n\n\thas( name ) {\n\n\t\treturn this.outputNodes[ name ] !== undefined;\n\n\t}\n\n\tget( name ) {\n\n\t\treturn this.outputNodes[ name ];\n\n\t}\n\n\tmerge( mrtNode ) {\n\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\n\n\t\treturn mrt( outputs );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst outputNodes = this.outputNodes;\n\t\tconst mrt = builder.renderer.getRenderTarget();\n\n\t\tconst members = [];\n\n\t\tconst textures = mrt.textures;\n\n\t\tfor ( const name in outputNodes ) {\n\n\t\t\tconst index = getTextureIndex( textures, name );\n\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\n\n\t\t}\n\n\t\tthis.members = members;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n}\n\nexport default MRTNode;\n\nexport const mrt = /*@__PURE__*/ nodeProxy( MRTNode );\n", "import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass FunctionOverloadingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'FunctionOverloadingNode';\n\n\t}\n\n\tconstructor( functionNodes = [], ...parametersNodes ) {\n\n\t\tsuper();\n\n\t\tthis.functionNodes = functionNodes;\n\t\tthis.parametersNodes = parametersNodes;\n\n\t\tthis._candidateFnCall = null;\n\n\t\tthis.global = true;\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst params = this.parametersNodes;\n\n\t\tlet candidateFnCall = this._candidateFnCall;\n\n\t\tif ( candidateFnCall === null ) {\n\n\t\t\tlet candidateFn = null;\n\t\t\tlet candidateScore = - 1;\n\n\t\t\tfor ( const functionNode of this.functionNodes ) {\n\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\n\t\t\t\tconst layout = shaderNode.layout;\n\n\t\t\t\tif ( layout === null ) {\n\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst inputs = layout.inputs;\n\n\t\t\t\tif ( params.length === inputs.length ) {\n\n\t\t\t\t\tlet score = 0;\n\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\t\t\tconst param = params[ i ];\n\t\t\t\t\t\tconst input = inputs[ i ];\n\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\n\n\t\t\t\t\t\t\tscore ++;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tscore = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( score > candidateScore ) {\n\n\t\t\t\t\t\tcandidateFn = functionNode;\n\t\t\t\t\t\tcandidateScore = score;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\n\n\t\t}\n\n\t\treturn candidateFnCall;\n\n\t}\n\n}\n\nexport default FunctionOverloadingNode;\n\nconst overloadingBaseFn = /*@__PURE__*/ nodeProxy( FunctionOverloadingNode );\n\nexport const overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\n", "import TempNode from '../core/TempNode.js';\nimport { transformedNormalView } from '../accessors/Normal.js';\nimport { positionViewDirection } from '../accessors/Position.js';\nimport { nodeImmutable, vec2, vec3 } from '../tsl/TSLBase.js';\n\nclass MatcapUVNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'MatcapUVNode';\n\n\t}\n\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t}\n\n\tsetup() {\n\n\t\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\n\t\tconst y = positionViewDirection.cross( x );\n\n\t\treturn vec2( x.dot( transformedNormalView ), y.dot( transformedNormalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t}\n\n}\n\nexport default MatcapUVNode;\n\nexport const matcapUV = /*@__PURE__*/ nodeImmutable( MatcapUVNode );\n", "import UniformNode from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject, nodeImmutable } from '../tsl/TSLBase.js';\n\nclass TimerNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'TimerNode';\n\n\t}\n\n\tconstructor( scope = TimerNode.LOCAL, scale = 1, value = 0 ) {\n\n\t\tsuper( value );\n\n\t\tthis.scope = scope;\n\t\tthis.scale = scale;\n\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t}\n\t/*\n\t@TODO:\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === TimerNode.FRAME ) {\n\n\t\t\treturn 'uint';\n\n\t\t}\n\n\t\treturn 'float';\n\n\t}\n*/\n\tupdate( frame ) {\n\n\t\tconst scope = this.scope;\n\t\tconst scale = this.scale;\n\n\t\tif ( scope === TimerNode.LOCAL ) {\n\n\t\t\tthis.value += frame.deltaTime * scale;\n\n\t\t} else if ( scope === TimerNode.DELTA ) {\n\n\t\t\tthis.value = frame.deltaTime * scale;\n\n\t\t} else if ( scope === TimerNode.FRAME ) {\n\n\t\t\tthis.value = frame.frameId;\n\n\t\t} else {\n\n\t\t\t// global\n\n\t\t\tthis.value = frame.time * scale;\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\t\tdata.scale = this.scale;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\t\tthis.scale = data.scale;\n\n\t}\n\n}\n\nTimerNode.LOCAL = 'local';\nTimerNode.GLOBAL = 'global';\nTimerNode.DELTA = 'delta';\nTimerNode.FRAME = 'frame';\n\nexport default TimerNode;\n\n// @TODO: add support to use node in timeScale\nexport const timerLocal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.LOCAL, timeScale, value ) );\nexport const timerGlobal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.GLOBAL, timeScale, value ) );\nexport const timerDelta = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.DELTA, timeScale, value ) );\nexport const frameId = /*@__PURE__*/ nodeImmutable( TimerNode, TimerNode.FRAME ).toUint();\n", "import Node from '../core/Node.js';\nimport { timerLocal } from './TimerNode.js';\nimport { nodeObject, nodeProxy } from '../tsl/TSLBase.js';\n\nclass OscNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'OscNode';\n\n\t}\n\n\tconstructor( method = OscNode.SINE, timeNode = timerLocal() ) {\n\n\t\tsuper();\n\n\t\tthis.method = method;\n\t\tthis.timeNode = timeNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.timeNode.getNodeType( builder );\n\n\t}\n\n\tsetup() {\n\n\t\tconst method = this.method;\n\t\tconst timeNode = nodeObject( this.timeNode );\n\n\t\tlet outputNode = null;\n\n\t\tif ( method === OscNode.SINE ) {\n\n\t\t\toutputNode = timeNode.add( 0.75 ).mul( Math.PI * 2 ).sin().mul( 0.5 ).add( 0.5 );\n\n\t\t} else if ( method === OscNode.SQUARE ) {\n\n\t\t\toutputNode = timeNode.fract().round();\n\n\t\t} else if ( method === OscNode.TRIANGLE ) {\n\n\t\t\toutputNode = timeNode.add( 0.5 ).fract().mul( 2 ).sub( 1 ).abs();\n\n\t\t} else if ( method === OscNode.SAWTOOTH ) {\n\n\t\t\toutputNode = timeNode.fract();\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.method = this.method;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.method = data.method;\n\n\t}\n\n}\n\nOscNode.SINE = 'sine';\nOscNode.SQUARE = 'square';\nOscNode.TRIANGLE = 'triangle';\nOscNode.SAWTOOTH = 'sawtooth';\n\nexport default OscNode;\n\nexport const oscSine = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SINE );\nexport const oscSquare = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SQUARE );\nexport const oscTriangle = /*@__PURE__*/ nodeProxy( OscNode, OscNode.TRIANGLE );\nexport const oscSawtooth = /*@__PURE__*/ nodeProxy( OscNode, OscNode.SAWTOOTH );\n", "import TempNode from '../core/TempNode.js';\nimport { nodeProxy, vec4, mat2, mat4 } from '../tsl/TSLBase.js';\nimport { cos, sin } from '../math/MathNode.js';\n\nclass RotateNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'RotateNode';\n\n\t}\n\n\tconstructor( positionNode, rotationNode ) {\n\n\t\tsuper();\n\n\t\tthis.positionNode = positionNode;\n\t\tthis.rotationNode = rotationNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.positionNode.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { rotationNode, positionNode } = this;\n\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( nodeType === 'vec2' ) {\n\n\t\t\tconst cosAngle = rotationNode.cos();\n\t\t\tconst sinAngle = rotationNode.sin();\n\n\t\t\tconst rotationMatrix = mat2(\n\t\t\t\tcosAngle, sinAngle,\n\t\t\t\tsinAngle.negate(), cosAngle\n\t\t\t);\n\n\t\t\treturn rotationMatrix.mul( positionNode );\n\n\t\t} else {\n\n\t\t\tconst rotation = rotationNode;\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\n\n\t\t}\n\n\t}\n\n}\n\nexport default RotateNode;\n\nexport const rotate = /*@__PURE__*/ nodeProxy( RotateNode );\n", "import Node from '../core/Node.js';\nimport { uv } from '../accessors/UV.js';\nimport { nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\n\nclass SpriteSheetUVNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SpriteSheetUVNode';\n\n\t}\n\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.countNode = countNode;\n\t\tthis.uvNode = uvNode;\n\t\tthis.frameNode = frameNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { frameNode, uvNode, countNode } = this;\n\n\t\tconst { width, height } = countNode;\n\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\n\n\t\tconst column = frameNum.mod( width );\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\n\n\t\tconst scale = countNode.reciprocal();\n\t\tconst uvFrameOffset = vec2( column, row );\n\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\n\n\t}\n\n}\n\nexport default SpriteSheetUVNode;\n\nexport const spritesheetUV = /*@__PURE__*/ nodeProxy( SpriteSheetUVNode );\n", "import { nodeProxy } from '../tsl/TSLBase.js';\nimport ArrayElementNode from './ArrayElementNode.js';\n\nclass StorageArrayElementNode extends ArrayElementNode {\n\n\tstatic get type() {\n\n\t\treturn 'StorageArrayElementNode';\n\n\t}\n\n\tconstructor( storageBufferNode, indexNode ) {\n\n\t\tsuper( storageBufferNode, indexNode );\n\n\t\tthis.isStorageArrayElementNode = true;\n\n\t}\n\n\tset storageBufferNode( value ) {\n\n\t\tthis.node = value;\n\n\t}\n\n\tget storageBufferNode() {\n\n\t\treturn this.node;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\n\n\t\t\tif ( this.node.bufferObject === true ) {\n\n\t\t\t\tbuilder.setupPBO( this.node );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tconst isAssignContext = builder.context.assign;\n\n\t\t//\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\n\n\t\t\tif ( this.node.bufferObject === true && isAssignContext !== true ) {\n\n\t\t\t\tsnippet = builder.generatePBO( this );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = this.node.build( builder );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsnippet = super.generate( builder );\n\n\t\t}\n\n\t\tif ( isAssignContext !== true ) {\n\n\t\t\tconst type = this.getNodeType( builder );\n\n\t\t\tsnippet = builder.format( snippet, type, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n}\n\nexport default StorageArrayElementNode;\n\nexport const storageElement = /*@__PURE__*/ nodeProxy( StorageArrayElementNode );\n", "import Node from '../core/Node.js';\nimport { add } from '../math/OperatorNode.js';\nimport { normalLocal } from '../accessors/Normal.js';\nimport { positionLocal } from '../accessors/Position.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { nodeProxy, float, vec3 } from '../tsl/TSLBase.js';\n\nclass TriplanarTexturesNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TriplanarTexturesNode';\n\n\t}\n\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureXNode = textureXNode;\n\t\tthis.textureYNode = textureYNode;\n\t\tthis.textureZNode = textureZNode;\n\n\t\tthis.scaleNode = scaleNode;\n\n\t\tthis.positionNode = positionNode;\n\t\tthis.normalNode = normalNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\n\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\n\n\t\t// Blending factor of triplanar mapping\n\t\tlet bf = normalNode.abs().normalize();\n\t\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\n\n\t\t// Triplanar mapping\n\t\tconst tx = positionNode.yz.mul( scaleNode );\n\t\tconst ty = positionNode.zx.mul( scaleNode );\n\t\tconst tz = positionNode.xy.mul( scaleNode );\n\n\t\t// Base color\n\t\tconst textureX = textureXNode.value;\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\n\n\t\tconst cx = texture( textureX, tx ).mul( bf.x );\n\t\tconst cy = texture( textureY, ty ).mul( bf.y );\n\t\tconst cz = texture( textureZ, tz ).mul( bf.z );\n\n\t\treturn add( cx, cy, cz );\n\n\t}\n\n}\n\nexport default TriplanarTexturesNode;\n\nexport const triplanarTextures = /*@__PURE__*/ nodeProxy( TriplanarTexturesNode );\nexport const triplanarTexture = ( ...params ) => triplanarTextures( ...params );\n", "import TextureNode from '../accessors/TextureNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { screenUV } from '../display/ScreenNode.js';\n\nimport { HalfFloatType, LinearMipMapLinearFilter } from '../../constants.js';\nimport { Plane } from '../../math/Plane.js';\nimport { Object3D } from '../../core/Object3D.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\n\nconst _reflectorPlane = new Plane();\nconst _normal = new Vector3();\nconst _reflectorWorldPosition = new Vector3();\nconst _cameraWorldPosition = new Vector3();\nconst _rotationMatrix = new Matrix4();\nconst _lookAtPosition = new Vector3( 0, 0, - 1 );\nconst clipPlane = new Vector4();\n\nconst _view = new Vector3();\nconst _target = new Vector3();\nconst _q = new Vector4();\n\nconst _size = new Vector2();\n\nconst _defaultRT = new RenderTarget();\nconst _defaultUV = screenUV.flipX();\n\nlet _inReflector = false;\n\nclass ReflectorNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ReflectorNode';\n\n\t}\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( _defaultRT.texture, _defaultUV );\n\n\t\tconst {\n\t\t\ttarget = new Object3D(),\n\t\t\tresolution = 1,\n\t\t\tgenerateMipmaps = false,\n\t\t\tbounces = true\n\t\t} = parameters;\n\n\t\t//\n\n\t\tthis.target = target;\n\t\tthis.resolution = resolution;\n\t\tthis.generateMipmaps = generateMipmaps;\n\t\tthis.bounces = bounces;\n\n\t\tthis.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\n\n\t\tthis.virtualCameras = new WeakMap();\n\t\tthis.renderTargets = new WeakMap();\n\n\n\t}\n\n\t_updateResolution( renderTarget, renderer ) {\n\n\t\tconst resolution = this.resolution;\n\n\t\trenderer.getDrawingBufferSize( _size );\n\n\t\trenderTarget.setSize( Math.round( _size.width * resolution ), Math.round( _size.height * resolution ) );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis._updateResolution( _defaultRT, builder.renderer );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this.textureNode;\n\n\t}\n\n\tgetVirtualCamera( camera ) {\n\n\t\tlet virtualCamera = this.virtualCameras.get( camera );\n\n\t\tif ( virtualCamera === undefined ) {\n\n\t\t\tvirtualCamera = camera.clone();\n\n\t\t\tthis.virtualCameras.set( camera, virtualCamera );\n\n\t\t}\n\n\t\treturn virtualCamera;\n\n\t}\n\n\tgetRenderTarget( camera ) {\n\n\t\tlet renderTarget = this.renderTargets.get( camera );\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = new RenderTarget( 0, 0, { type: HalfFloatType } );\n\n\t\t\tif ( this.generateMipmaps === true ) {\n\n\t\t\t    renderTarget.texture.minFilter = LinearMipMapLinearFilter;\n\t\t\t    renderTarget.texture.generateMipmaps = true;\n\n\t\t\t}\n\n\t\t\tthis.renderTargets.set( camera, renderTarget );\n\n\t\t}\n\n\t\treturn renderTarget;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tif ( this.bounces === false && _inReflector ) return false;\n\n\t\t_inReflector = true;\n\n\t\tconst { scene, camera, renderer, material } = frame;\n\t\tconst { target } = this;\n\n\t\tconst virtualCamera = this.getVirtualCamera( camera );\n\t\tconst renderTarget = this.getRenderTarget( virtualCamera );\n\n\t\trenderer.getDrawingBufferSize( _size );\n\n\t\tthis._updateResolution( renderTarget, renderer );\n\n\t\t//\n\n\t\t_reflectorWorldPosition.setFromMatrixPosition( target.matrixWorld );\n\t\t_cameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t_rotationMatrix.extractRotation( target.matrixWorld );\n\n\t\t_normal.set( 0, 0, 1 );\n\t\t_normal.applyMatrix4( _rotationMatrix );\n\n\t\t_view.subVectors( _reflectorWorldPosition, _cameraWorldPosition );\n\n\t\t// Avoid rendering when reflector is facing away\n\n\t\tif ( _view.dot( _normal ) > 0 ) return;\n\n\t\t_view.reflect( _normal ).negate();\n\t\t_view.add( _reflectorWorldPosition );\n\n\t\t_rotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t_lookAtPosition.set( 0, 0, - 1 );\n\t\t_lookAtPosition.applyMatrix4( _rotationMatrix );\n\t\t_lookAtPosition.add( _cameraWorldPosition );\n\n\t\t_target.subVectors( _reflectorWorldPosition, _lookAtPosition );\n\t\t_target.reflect( _normal ).negate();\n\t\t_target.add( _reflectorWorldPosition );\n\n\t\t//\n\n\t\tvirtualCamera.coordinateSystem = camera.coordinateSystem;\n\t\tvirtualCamera.position.copy( _view );\n\t\tvirtualCamera.up.set( 0, 1, 0 );\n\t\tvirtualCamera.up.applyMatrix4( _rotationMatrix );\n\t\tvirtualCamera.up.reflect( _normal );\n\t\tvirtualCamera.lookAt( _target );\n\n\t\tvirtualCamera.near = camera.near;\n\t\tvirtualCamera.far = camera.far;\n\n\t\tvirtualCamera.updateMatrixWorld();\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t_reflectorPlane.setFromNormalAndCoplanarPoint( _normal, _reflectorWorldPosition );\n\t\t_reflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\n\n\t\tclipPlane.set( _reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant );\n\n\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\n\n\t\t_q.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t_q.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t_q.z = - 1.0;\n\t\t_q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t// Calculate the scaled plane vector\n\t\tclipPlane.multiplyScalar( 1.0 / clipPlane.dot( _q ) );\n\n\t\tconst clipBias = 0;\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z - clipBias;\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t//\n\n\t\tthis.value = renderTarget.texture;\n\n\t\tmaterial.visible = false;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\n\t\trenderer.setMRT( null );\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\trenderer.render( scene, virtualCamera );\n\n\t\trenderer.setMRT( currentMRT );\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\tmaterial.visible = true;\n\n\t\t_inReflector = false;\n\n\t}\n\n}\n\nexport const reflector = ( parameters ) => nodeObject( new ReflectorNode( parameters ) );\n\nexport default ReflectorNode;\n", "import { BufferGeometry } from '../../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../../core/BufferAttribute.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { OrthographicCamera } from '../../cameras/OrthographicCamera.js';\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass QuadGeometry extends BufferGeometry {\n\n\tconstructor( flipY = false ) {\n\n\t\tsuper();\n\n\t\tconst uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\n\n\t}\n\n}\n\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\n\nclass QuadMesh extends Mesh {\n\n\tconstructor( material = null ) {\n\n\t\tsuper( _geometry, material );\n\n\t\tthis.camera = _camera;\n\n\t\tthis.isQuadMesh = true;\n\n\t}\n\n\trenderAsync( renderer ) {\n\n\t\treturn renderer.renderAsync( this, _camera );\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this, _camera );\n\n\t}\n\n}\n\nexport default QuadMesh;\n", "import { nodeObject } from '../tsl/TSLCore.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uv } from '../accessors/UV.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\n\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { HalfFloatType } from '../../constants.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\n\nclass RTTNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'RTTNode';\n\n\t}\n\n\tconstructor( node, width = null, height = null, options = { type: HalfFloatType } ) {\n\n\t\tconst renderTarget = new RenderTarget( width, height, options );\n\n\t\tsuper( renderTarget.texture, uv() );\n\n\t\tthis.node = node;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tthis.textureNeedsUpdate = true;\n\t\tthis.autoUpdate = true;\n\n\t\tthis.updateMap = new WeakMap();\n\n\t\tthis._rttNode = null;\n\t\tthis._quadMesh = new QuadMesh( new NodeMaterial() );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tget autoSize() {\n\n\t\treturn this.width === null;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis._rttNode = this.node.context( builder.getSharedContext() );\n\t\tthis._quadMesh.material.name = 'RTT';\n\t\tthis._quadMesh.material.needsUpdate = true;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tconst effectiveWidth = width * this.pixelRatio;\n\t\tconst effectiveHeight = height * this.pixelRatio;\n\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\n\n\t\tthis.textureNeedsUpdate = true;\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis.pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this.width, this.height );\n\n\t}\n\n\tupdateBefore( { renderer } ) {\n\n\t\tif ( this.textureNeedsUpdate === false && this.autoUpdate === false ) return;\n\n\t\tthis.textureNeedsUpdate = false;\n\n\t\t//\n\n\t\tif ( this.autoSize === true ) {\n\n\t\t\tthis.pixelRatio = renderer.getPixelRatio();\n\n\t\t\tconst size = renderer.getSize( _size );\n\n\t\t\tthis.setSize( size.width, size.height );\n\n\t\t}\n\n\t\t//\n\n\t\tthis._quadMesh.material.fragmentNode = this._rttNode;\n\n\t\t//\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\n\t\tthis._quadMesh.render( renderer );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tclone() {\n\n\t\tconst newNode = new TextureNode( this.value, this.uvNode, this.levelNode );\n\t\tnewNode.sampler = this.sampler;\n\t\tnewNode.referenceNode = this;\n\n\t\treturn newNode;\n\n\t}\n\n}\n\nexport default RTTNode;\n\nexport const rtt = ( node, ...params ) => nodeObject( new RTTNode( nodeObject( node ), ...params ) );\nexport const convertToTexture = ( node, ...params ) => node.isTextureNode ? node : rtt( node, ...params );\n", "import Node from '../core/Node.js';\nimport { nodeImmutable } from '../tsl/TSLBase.js';\n\nclass PointUVNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'PointUVNode';\n\n\t}\n\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.isPointUVNode = true;\n\n\t}\n\n\tgenerate( /*builder*/ ) {\n\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\n\n\t}\n\n}\n\nexport default PointUVNode;\n\nexport const pointUV = /*@__PURE__*/ nodeImmutable( PointUVNode );\n", "import Node from '../core/Node.js';\nimport { nodeImmutable } from '../tsl/TSLBase.js';\nimport { reference } from './ReferenceNode.js';\n\nclass SceneNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SceneNode';\n\n\t}\n\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\t\tthis.scene = scene;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\n\n\t\tlet output;\n\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\n\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\n\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\n\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\n\nexport default SceneNode;\n\nexport const backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\nexport const backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\n", "export const GPUPrimitiveTopology = {\n\tPointList: 'point-list',\n\tLineList: 'line-list',\n\tLineStrip: 'line-strip',\n\tTriangleList: 'triangle-list',\n\tTriangleStrip: 'triangle-strip',\n};\n\nexport const GPUCompareFunction = {\n\tNever: 'never',\n\tLess: 'less',\n\tEqual: 'equal',\n\tLessEqual: 'less-equal',\n\tGreater: 'greater',\n\tNotEqual: 'not-equal',\n\tGreaterEqual: 'greater-equal',\n\tAlways: 'always'\n};\n\nexport const GPUStoreOp = {\n\tStore: 'store',\n\tDiscard: 'discard'\n};\n\nexport const GPULoadOp = {\n\tLoad: 'load',\n\tClear: 'clear'\n};\n\nexport const GPUFrontFace = {\n\tCCW: 'ccw',\n\tCW: 'cw'\n};\n\nexport const GPUCullMode = {\n\tNone: 'none',\n\tFront: 'front',\n\tBack: 'back'\n};\n\nexport const GPUIndexFormat = {\n\tUint16: 'uint16',\n\tUint32: 'uint32'\n};\n\nexport const GPUVertexFormat = {\n\tUint8x2: 'uint8x2',\n\tUint8x4: 'uint8x4',\n\tSint8x2: 'sint8x2',\n\tSint8x4: 'sint8x4',\n\tUnorm8x2: 'unorm8x2',\n\tUnorm8x4: 'unorm8x4',\n\tSnorm8x2: 'snorm8x2',\n\tSnorm8x4: 'snorm8x4',\n\tUint16x2: 'uint16x2',\n\tUint16x4: 'uint16x4',\n\tSint16x2: 'sint16x2',\n\tSint16x4: 'sint16x4',\n\tUnorm16x2: 'unorm16x2',\n\tUnorm16x4: 'unorm16x4',\n\tSnorm16x2: 'snorm16x2',\n\tSnorm16x4: 'snorm16x4',\n\tFloat16x2: 'float16x2',\n\tFloat16x4: 'float16x4',\n\tFloat32: 'float32',\n\tFloat32x2: 'float32x2',\n\tFloat32x3: 'float32x3',\n\tFloat32x4: 'float32x4',\n\tUint32: 'uint32',\n\tUint32x2: 'uint32x2',\n\tUint32x3: 'uint32x3',\n\tUint32x4: 'uint32x4',\n\tSint32: 'sint32',\n\tSint32x2: 'sint32x2',\n\tSint32x3: 'sint32x3',\n\tSint32x4: 'sint32x4'\n};\n\nexport const GPUTextureFormat = {\n\n\t// 8-bit formats\n\n\tR8Unorm: 'r8unorm',\n\tR8Snorm: 'r8snorm',\n\tR8Uint: 'r8uint',\n\tR8Sint: 'r8sint',\n\n\t// 16-bit formats\n\n\tR16Uint: 'r16uint',\n\tR16Sint: 'r16sint',\n\tR16Float: 'r16float',\n\tRG8Unorm: 'rg8unorm',\n\tRG8Snorm: 'rg8snorm',\n\tRG8Uint: 'rg8uint',\n\tRG8Sint: 'rg8sint',\n\n\t// 32-bit formats\n\n\tR32Uint: 'r32uint',\n\tR32Sint: 'r32sint',\n\tR32Float: 'r32float',\n\tRG16Uint: 'rg16uint',\n\tRG16Sint: 'rg16sint',\n\tRG16Float: 'rg16float',\n\tRGBA8Unorm: 'rgba8unorm',\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\n\tRGBA8Snorm: 'rgba8snorm',\n\tRGBA8Uint: 'rgba8uint',\n\tRGBA8Sint: 'rgba8sint',\n\tBGRA8Unorm: 'bgra8unorm',\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\n\t// Packed 32-bit formats\n\tRGB9E5UFloat: 'rgb9e5ufloat',\n\tRGB10A2Unorm: 'rgb10a2unorm',\n\tRG11B10uFloat: 'rgb10a2unorm',\n\n\t// 64-bit formats\n\n\tRG32Uint: 'rg32uint',\n\tRG32Sint: 'rg32sint',\n\tRG32Float: 'rg32float',\n\tRGBA16Uint: 'rgba16uint',\n\tRGBA16Sint: 'rgba16sint',\n\tRGBA16Float: 'rgba16float',\n\n\t// 128-bit formats\n\n\tRGBA32Uint: 'rgba32uint',\n\tRGBA32Sint: 'rgba32sint',\n\tRGBA32Float: 'rgba32float',\n\n\t// Depth and stencil formats\n\n\tStencil8: 'stencil8',\n\tDepth16Unorm: 'depth16unorm',\n\tDepth24Plus: 'depth24plus',\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\n\tDepth32Float: 'depth32float',\n\n\t// 'depth32float-stencil8' extension\n\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\n\t// BC compressed formats usable if 'texture-compression-bc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n\tBC4RUnorm: 'bc4-r-unorm',\n\tBC4RSnorm: 'bc4-r-snorm',\n\tBC5RGUnorm: 'bc5-rg-unorm',\n\tBC5RGSnorm: 'bc5-rg-snorm',\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\n\tBC6HRGBFloat: 'bc6h-rgb-float',\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\n\tEACR11Unorm: 'eac-r11unorm',\n\tEACR11Snorm: 'eac-r11snorm',\n\tEACRG11Unorm: 'eac-rg11unorm',\n\tEACRG11Snorm: 'eac-rg11snorm',\n\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tASTC4x4Unorm: 'astc-4x4-unorm',\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\n\tASTC5x4Unorm: 'astc-5x4-unorm',\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\n\tASTC5x5Unorm: 'astc-5x5-unorm',\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\n\tASTC6x5Unorm: 'astc-6x5-unorm',\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\n\tASTC6x6Unorm: 'astc-6x6-unorm',\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\n\tASTC8x5Unorm: 'astc-8x5-unorm',\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\n\tASTC8x6Unorm: 'astc-8x6-unorm',\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\n\tASTC8x8Unorm: 'astc-8x8-unorm',\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\n\tASTC10x5Unorm: 'astc-10x5-unorm',\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\n\tASTC10x6Unorm: 'astc-10x6-unorm',\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\n\tASTC10x8Unorm: 'astc-10x8-unorm',\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\n\tASTC10x10Unorm: 'astc-10x10-unorm',\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\n\tASTC12x10Unorm: 'astc-12x10-unorm',\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\n\tASTC12x12Unorm: 'astc-12x12-unorm',\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\n\n};\n\nexport const GPUAddressMode = {\n\tClampToEdge: 'clamp-to-edge',\n\tRepeat: 'repeat',\n\tMirrorRepeat: 'mirror-repeat'\n};\n\nexport const GPUFilterMode = {\n\tLinear: 'linear',\n\tNearest: 'nearest'\n};\n\nexport const GPUBlendFactor = {\n\tZero: 'zero',\n\tOne: 'one',\n\tSrc: 'src',\n\tOneMinusSrc: 'one-minus-src',\n\tSrcAlpha: 'src-alpha',\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\n\tDst: 'dst',\n\tOneMinusDstColor: 'one-minus-dst',\n\tDstAlpha: 'dst-alpha',\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\n\tSrcAlphaSaturated: 'src-alpha-saturated',\n\tConstant: 'constant',\n\tOneMinusConstant: 'one-minus-constant'\n};\n\nexport const GPUBlendOperation = {\n\tAdd: 'add',\n\tSubtract: 'subtract',\n\tReverseSubtract: 'reverse-subtract',\n\tMin: 'min',\n\tMax: 'max'\n};\n\nexport const GPUColorWriteFlags = {\n\tNone: 0,\n\tRed: 0x1,\n\tGreen: 0x2,\n\tBlue: 0x4,\n\tAlpha: 0x8,\n\tAll: 0xF\n};\n\nexport const GPUStencilOperation = {\n\tKeep: 'keep',\n\tZero: 'zero',\n\tReplace: 'replace',\n\tInvert: 'invert',\n\tIncrementClamp: 'increment-clamp',\n\tDecrementClamp: 'decrement-clamp',\n\tIncrementWrap: 'increment-wrap',\n\tDecrementWrap: 'decrement-wrap'\n};\n\nexport const GPUBufferBindingType = {\n\tUniform: 'uniform',\n\tStorage: 'storage',\n\tReadOnlyStorage: 'read-only-storage'\n};\n\nexport const GPUStorageTextureAccess = {\n\tWriteOnly: 'write-only',\n\tReadOnly: 'read-only',\n\tReadWrite: 'read-write',\n};\n\nexport const GPUSamplerBindingType = {\n\tFiltering: 'filtering',\n\tNonFiltering: 'non-filtering',\n\tComparison: 'comparison'\n};\n\nexport const GPUTextureSampleType = {\n\tFloat: 'float',\n\tUnfilterableFloat: 'unfilterable-float',\n\tDepth: 'depth',\n\tSInt: 'sint',\n\tUInt: 'uint'\n};\n\nexport const GPUTextureDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureViewDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tTwoDArray: '2d-array',\n\tCube: 'cube',\n\tCubeArray: 'cube-array',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureAspect = {\n\tAll: 'all',\n\tStencilOnly: 'stencil-only',\n\tDepthOnly: 'depth-only'\n};\n\nexport const GPUInputStepMode = {\n\tVertex: 'vertex',\n\tInstance: 'instance'\n};\n\nexport const GPUFeatureName = {\n\tDepthClipControl: 'depth-clip-control',\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\tTextureCompressionBC: 'texture-compression-bc',\n\tTextureCompressionETC2: 'texture-compression-etc2',\n\tTextureCompressionASTC: 'texture-compression-astc',\n\tTimestampQuery: 'timestamp-query',\n\tIndirectFirstInstance: 'indirect-first-instance',\n\tShaderF16: 'shader-f16',\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\n\tFloat32Filterable: 'float32-filterable',\n\tClipDistances: 'clip-distances',\n\tDualSourceBlending: 'dual-source-blending',\n\tSubgroups: 'subgroups'\n};\n", "import TextureNode from './TextureNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\nimport { GPUStorageTextureAccess } from '../../renderers/webgpu/utils/WebGPUConstants.js';\n\nclass StorageTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'StorageTextureNode';\n\n\t}\n\n\tconstructor( value, uvNode, storeNode = null ) {\n\n\t\tsuper( value, uvNode );\n\n\t\tthis.storeNode = storeNode;\n\n\t\tthis.isStorageTextureNode = true;\n\n\t\tthis.access = GPUStorageTextureAccess.WriteOnly;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'storageTexture';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.storeNode = this.storeNode;\n\n\t}\n\n\tsetAccess( value ) {\n\n\t\tthis.access = value;\n\t\treturn this;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tif ( this.storeNode !== null ) {\n\n\t\t\tsnippet = this.generateStore( builder );\n\n\t\t} else {\n\n\t\t\tsnippet = super.generate( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\ttoReadOnly() {\n\n\t\treturn this.setAccess( GPUStorageTextureAccess.ReadOnly );\n\n\t}\n\n\ttoWriteOnly() {\n\n\t\treturn this.setAccess( GPUStorageTextureAccess.WriteOnly );\n\n\t}\n\n\tgenerateStore( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tconst { uvNode, storeNode } = properties;\n\n\t\tconst textureProperty = super.generate( builder, 'property' );\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\n\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, storeSnippet );\n\n\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t}\n\n}\n\nexport default StorageTextureNode;\n\nexport const storageTexture = /*@__PURE__*/ nodeProxy( StorageTextureNode );\n\nexport const textureStore = ( value, uvNode, storeNode ) => {\n\n\tconst node = storageTexture( value, uvNode, storeNode );\n\n\tif ( storeNode !== null ) node.append();\n\n\treturn node;\n\n};\n", "import TextureNode from './TextureNode.js';\nimport { nodeProxy, vec3, Fn, If } from '../tsl/TSLBase.js';\n\nconst normal = Fn( ( { texture, uv } ) => {\n\n\tconst epsilon = 0.0001;\n\n\tconst ret = vec3().toVar();\n\n\tIf( uv.x.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 1, 0 ) );\n\n\t} ).ElseIf( uv.z.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, 1 ) );\n\n\t} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( - 1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, - 1, 0 ) );\n\n\t} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, - 1 ) );\n\n\t} ).Else( () => {\n\n\t\tconst step = 0.01;\n\n\t\tconst x = texture.uv( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\n\t\tconst y = texture.uv( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\n\t\tconst z = texture.uv( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\n\n\t\tret.assign( vec3( x, y, z ) );\n\n\t} );\n\n\treturn ret.normalize();\n\n} );\n\n\nclass Texture3DNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'Texture3DNode';\n\n\t}\n\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode );\n\n\t\tthis.isTexture3DNode = true;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture3D';\n\n\t}\n\n\tgetDefaultUV() {\n\n\t\treturn vec3( 0.5, 0.5, 0.5 );\n\n\t}\n\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for 3d TextureNode\n\n\tsetupUV( builder, uvNode ) {\n\n\t\treturn uvNode;\n\n\t}\n\n\tgenerateUV( builder, uvNode ) {\n\n\t\treturn uvNode.build( builder, 'vec3' );\n\n\t}\n\n\tnormal( uvNode ) {\n\n\t\treturn normal( { texture: this, uv: uvNode } );\n\n\t}\n\n}\n\nexport default Texture3DNode;\n\nexport const texture3D = /*@__PURE__*/ nodeProxy( Texture3DNode );\n", "import TempNode from '../core/TempNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass PosterizeNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PosterizeNode';\n\n\t}\n\n\tconstructor( sourceNode, stepsNode ) {\n\n\t\tsuper();\n\n\t\tthis.sourceNode = sourceNode;\n\t\tthis.stepsNode = stepsNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { sourceNode, stepsNode } = this;\n\n\t\treturn sourceNode.mul( stepsNode ).floor().div( stepsNode );\n\n\t}\n\n}\n\nexport default PosterizeNode;\n\nexport const posterize = /*@__PURE__*/ nodeProxy( PosterizeNode );\n", "import ViewportTextureNode from './ViewportTextureNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\nimport { screenUV } from './ScreenNode.js';\n\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\n\nlet _sharedFramebuffer = null;\n\nclass ViewportSharedTextureNode extends ViewportTextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ViewportSharedTextureNode';\n\n\t}\n\n\tconstructor( uvNode = screenUV, levelNode = null ) {\n\n\t\tif ( _sharedFramebuffer === null ) {\n\n\t\t\t_sharedFramebuffer = new FramebufferTexture();\n\n\t\t}\n\n\t\tsuper( uvNode, levelNode, _sharedFramebuffer );\n\n\t}\n\n\tupdateReference() {\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport default ViewportSharedTextureNode;\n\nexport const viewportSharedTexture = /*@__PURE__*/ nodeProxy( ViewportSharedTextureNode );\n", "import TempNode from '../core/TempNode.js';\nimport { default as TextureNode/*, texture*/ } from '../accessors/TextureNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\n\nimport { HalfFloatType/*, FloatType*/ } from '../../constants.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { DepthTexture } from '../../textures/DepthTexture.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\n\nclass PassTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassTextureNode';\n\n\t}\n\n\tconstructor( passNode, texture ) {\n\n\t\tsuper( texture );\n\n\t\tthis.passNode = passNode;\n\n\t\tthis.setUpdateMatrix( false );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( builder.object.isQuadMesh ) this.passNode.build( builder );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.passNode, this.value );\n\n\t}\n\n}\n\nclass PassMultipleTextureNode extends PassTextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassMultipleTextureNode';\n\n\t}\n\n\tconstructor( passNode, textureName, previousTexture = false ) {\n\n\t\tsuper( passNode, null );\n\n\t\tthis.textureName = textureName;\n\t\tthis.previousTexture = previousTexture;\n\n\t}\n\n\tupdateTexture() {\n\n\t\tthis.value = this.previousTexture ? this.passNode.getPreviousTexture( this.textureName ) : this.passNode.getTexture( this.textureName );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.updateTexture();\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.passNode, this.textureName, this.previousTexture );\n\n\t}\n\n}\n\nclass PassNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassNode';\n\n\t}\n\n\tconstructor( scope, scene, camera, options = {} ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.scope = scope;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.options = options;\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = 1;\n\t\tthis._height = 1;\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.isRenderTargetTexture = true;\n\t\t//depthTexture.type = FloatType;\n\t\tdepthTexture.name = 'depth';\n\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );\n\t\trenderTarget.texture.name = 'output';\n\t\trenderTarget.depthTexture = depthTexture;\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t\tthis._textures = {\n\t\t\toutput: renderTarget.texture,\n\t\t\tdepth: depthTexture\n\t\t};\n\n\t\tthis._textureNodes = {};\n\t\tthis._linearDepthNodes = {};\n\t\tthis._viewZNodes = {};\n\n\t\tthis._previousTextures = {};\n\t\tthis._previousTextureNodes = {};\n\n\t\tthis._cameraNear = uniform( 0 );\n\t\tthis._cameraFar = uniform( 0 );\n\n\t\tthis._mrt = null;\n\n\t\tthis.isPassNode = true;\n\n\t}\n\n\tsetMRT( mrt ) {\n\n\t\tthis._mrt = mrt;\n\n\t\treturn this;\n\n\t}\n\n\tgetMRT() {\n\n\t\treturn this._mrt;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetTexture( name ) {\n\n\t\tlet texture = this._textures[ name ];\n\n\t\tif ( texture === undefined ) {\n\n\t\t\tconst refTexture = this.renderTarget.texture;\n\n\t\t\ttexture = refTexture.clone();\n\t\t\ttexture.isRenderTargetTexture = true;\n\t\t\ttexture.name = name;\n\n\t\t\tthis._textures[ name ] = texture;\n\n\t\t\tthis.renderTarget.textures.push( texture );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tgetPreviousTexture( name ) {\n\n\t\tlet texture = this._previousTextures[ name ];\n\n\t\tif ( texture === undefined ) {\n\n\t\t\ttexture = this.getTexture( name ).clone();\n\t\t\ttexture.isRenderTargetTexture = true;\n\n\t\t\tthis._previousTextures[ name ] = texture;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\ttoggleTexture( name ) {\n\n\t\tconst prevTexture = this._previousTextures[ name ];\n\n\t\tif ( prevTexture !== undefined ) {\n\n\t\t\tconst texture = this._textures[ name ];\n\n\t\t\tconst index = this.renderTarget.textures.indexOf( texture );\n\t\t\tthis.renderTarget.textures[ index ] = prevTexture;\n\n\t\t\tthis._textures[ name ] = prevTexture;\n\t\t\tthis._previousTextures[ name ] = texture;\n\n\t\t\tthis._textureNodes[ name ].updateTexture();\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\n\n\t\t}\n\n\t}\n\n\tgetTextureNode( name = 'output' ) {\n\n\t\tlet textureNode = this._textureNodes[ name ];\n\n\t\tif ( textureNode === undefined ) {\n\n\t\t\tthis._textureNodes[ name ] = textureNode = nodeObject( new PassMultipleTextureNode( this, name ) );\n\t\t\tthis._textureNodes[ name ].updateTexture();\n\n\t\t}\n\n\t\treturn textureNode;\n\n\t}\n\n\tgetPreviousTextureNode( name = 'output' ) {\n\n\t\tlet textureNode = this._previousTextureNodes[ name ];\n\n\t\tif ( textureNode === undefined ) {\n\n\t\t\tif ( this._textureNodes[ name ] === undefined ) this.getTextureNode( name );\n\n\t\t\tthis._previousTextureNodes[ name ] = textureNode = nodeObject( new PassMultipleTextureNode( this, name, true ) );\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\n\n\t\t}\n\n\t\treturn textureNode;\n\n\t}\n\n\tgetViewZNode( name = 'depth' ) {\n\n\t\tlet viewZNode = this._viewZNodes[ name ];\n\n\t\tif ( viewZNode === undefined ) {\n\n\t\t\tconst cameraNear = this._cameraNear;\n\t\t\tconst cameraFar = this._cameraFar;\n\n\t\t\tthis._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );\n\n\t\t}\n\n\t\treturn viewZNode;\n\n\t}\n\n\tgetLinearDepthNode( name = 'depth' ) {\n\n\t\tlet linearDepthNode = this._linearDepthNodes[ name ];\n\n\t\tif ( linearDepthNode === undefined ) {\n\n\t\t\tconst cameraNear = this._cameraNear;\n\t\t\tconst cameraFar = this._cameraFar;\n\t\t\tconst viewZNode = this.getViewZNode( name );\n\n\t\t\t// TODO: just if ( builder.camera.isPerspectiveCamera )\n\n\t\t\tthis._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );\n\n\t\t}\n\n\t\treturn linearDepthNode;\n\n\t}\n\n\tsetup( { renderer } ) {\n\n\t\tthis.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\n\n\t\t// Disable MSAA for WebGL backend for now\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\n\n\t\t\tthis.renderTarget.samples = 0;\n\n\t\t}\n\n\t\tthis.renderTarget.depthTexture.isMultisampleRenderTargetTexture = this.renderTarget.samples > 1;\n\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, camera } = this;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tconst size = renderer.getSize( _size );\n\n\t\tthis.setSize( size.width, size.height );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\n\t\tthis._cameraNear.value = camera.near;\n\t\tthis._cameraFar.value = camera.far;\n\n\t\tfor ( const name in this._previousTextures ) {\n\n\t\t\tthis.toggleTexture( name );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\t\trenderer.setMRT( this._mrt );\n\n\t\trenderer.render( scene, camera );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\n}\n\nPassNode.COLOR = 'color';\nPassNode.DEPTH = 'depth';\n\nexport default PassNode;\n\nexport const pass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera, options ) );\nexport const passTexture = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\nexport const depthPass = ( scene, camera ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera ) );\n", "import TempNode from '../core/TempNode.js';\nimport { nodeObject, Fn, float, vec2, vec4 } from '../tsl/TSLBase.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { mul } from '../math/OperatorNode.js';\nimport { uv } from '../accessors/UV.js';\nimport { passTexture } from './PassNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { convertToTexture } from '../utils/RTTNode.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\n\nimport { Vector2 } from '../../math/Vector2.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\n// WebGPU: The use of a single QuadMesh for both gaussian blur passes results in a single RenderObject with a SampledTexture binding that\n// alternates between source textures and triggers creation of new BindGroups and BindGroupLayouts every frame.\n\nconst _quadMesh1 = /*@__PURE__*/ new QuadMesh();\nconst _quadMesh2 = /*@__PURE__*/ new QuadMesh();\n\nclass GaussianBlurNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'GaussianBlurNode';\n\n\t}\n\n\tconstructor( textureNode, directionNode = null, sigma = 2 ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.directionNode = directionNode;\n\t\tthis.sigma = sigma;\n\n\t\tthis._invSize = uniform( new Vector2() );\n\t\tthis._passDirection = uniform( new Vector2() );\n\n\t\tthis._horizontalRT = new RenderTarget();\n\t\tthis._horizontalRT.texture.name = 'GaussianBlurNode.horizontal';\n\t\tthis._verticalRT = new RenderTarget();\n\t\tthis._verticalRT.texture.name = 'GaussianBlurNode.vertical';\n\n\t\tthis._textureNode = passTexture( this, this._verticalRT.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t\tthis.resolution = new Vector2( 1, 1 );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\n\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\n\t\tthis._horizontalRT.setSize( width, height );\n\t\tthis._verticalRT.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\n\t\tconst currentTexture = textureNode.value;\n\n\t\t_quadMesh1.material = this._material;\n\t\t_quadMesh2.material = this._material;\n\n\t\tthis.setSize( map.image.width, map.image.height );\n\n\t\tconst textureType = map.type;\n\n\t\tthis._horizontalRT.texture.type = textureType;\n\t\tthis._verticalRT.texture.type = textureType;\n\n\t\t// clear\n\n\t\trenderer.setMRT( null );\n\n\t\t// horizontal\n\n\t\trenderer.setRenderTarget( this._horizontalRT );\n\n\t\tthis._passDirection.value.set( 1, 0 );\n\n\t\t_quadMesh1.render( renderer );\n\n\t\t// vertical\n\n\t\ttextureNode.value = this._horizontalRT.texture;\n\t\trenderer.setRenderTarget( this._verticalRT );\n\n\t\tthis._passDirection.value.set( 0, 1 );\n\n\t\t_quadMesh2.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\t\ttextureNode.value = currentTexture;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\n\t\tif ( textureNode.isTextureNode !== true ) {\n\n\t\t\tconsole.error( 'GaussianBlurNode requires a TextureNode.' );\n\n\t\t\treturn vec4();\n\n\t\t}\n\n\t\t//\n\n\t\tconst uvNode = textureNode.uvNode || uv();\n\t\tconst directionNode = vec2( this.directionNode || 1 );\n\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\n\n\t\tconst blur = Fn( () => {\n\n\t\t\tconst kernelSize = 3 + ( 2 * this.sigma );\n\t\t\tconst gaussianCoefficients = this._getCoefficients( kernelSize );\n\n\t\t\tconst invSize = this._invSize;\n\t\t\tconst direction = directionNode.mul( this._passDirection );\n\n\t\t\tconst weightSum = float( gaussianCoefficients[ 0 ] ).toVar();\n\t\t\tconst diffuseSum = vec4( sampleTexture( uvNode ).mul( weightSum ) ).toVar();\n\n\t\t\tfor ( let i = 1; i < kernelSize; i ++ ) {\n\n\t\t\t\tconst x = float( i );\n\t\t\t\tconst w = float( gaussianCoefficients[ i ] );\n\n\t\t\t\tconst uvOffset = vec2( direction.mul( invSize.mul( x ) ) ).toVar();\n\n\t\t\t\tconst sample1 = vec4( sampleTexture( uvNode.add( uvOffset ) ) );\n\t\t\t\tconst sample2 = vec4( sampleTexture( uvNode.sub( uvOffset ) ) );\n\n\t\t\t\tdiffuseSum.addAssign( sample1.add( sample2 ).mul( w ) );\n\t\t\t\tweightSum.addAssign( mul( 2.0, w ) );\n\n\t\t\t}\n\n\t\t\treturn diffuseSum.div( weightSum );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\n\t\tmaterial.fragmentNode = blur().context( builder.getSharedContext() );\n\t\tmaterial.name = 'Gaussian_blur';\n\t\tmaterial.needsUpdate = true;\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tdispose() {\n\n\t\tthis._horizontalRT.dispose();\n\t\tthis._verticalRT.dispose();\n\n\t}\n\n\t_getCoefficients( kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\treturn coefficients;\n\n\t}\n\n}\n\nexport default GaussianBlurNode;\n\nexport const gaussianBlur = ( node, directionNode, sigma ) => nodeObject( new GaussianBlurNode( convertToTexture( node ), directionNode, sigma ) );\n", "import TempNode from '../core/TempNode.js';\nimport { nodeObject, Fn, float, vec4 } from '../tsl/TSLBase.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uv } from '../accessors/UV.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { passTexture } from './PassNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { sign, max } from '../math/MathNode.js';\nimport { convertToTexture } from '../utils/RTTNode.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { Vector2 } from '../../math/Vector2.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\n\nconst _quadMeshComp = /*@__PURE__*/ new QuadMesh();\n\nclass AfterImageNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'AfterImageNode';\n\n\t}\n\n\tconstructor( textureNode, damp = 0.96 ) {\n\n\t\tsuper( textureNode );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.textureNodeOld = texture();\n\t\tthis.damp = uniform( damp );\n\n\t\tthis._compRT = new RenderTarget();\n\t\tthis._compRT.texture.name = 'AfterImageNode.comp';\n\n\t\tthis._oldRT = new RenderTarget();\n\t\tthis._oldRT.texture.name = 'AfterImageNode.old';\n\n\t\tthis._textureNode = passTexture( this, this._compRT.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._compRT.setSize( width, height );\n\t\tthis._oldRT.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tconst textureType = map.type;\n\n\t\tthis._compRT.texture.type = textureType;\n\t\tthis._oldRT.texture.type = textureType;\n\n\t\trenderer.getDrawingBufferSize( _size );\n\n\t\tthis.setSize( _size.x, _size.y );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentTexture = textureNode.value;\n\n\t\tthis.textureNodeOld.value = this._oldRT.texture;\n\n\t\t// comp\n\t\trenderer.setRenderTarget( this._compRT );\n\t\t_quadMeshComp.render( renderer );\n\n\t\t// Swap the textures\n\t\tconst temp = this._oldRT;\n\t\tthis._oldRT = this._compRT;\n\t\tthis._compRT = temp;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\ttextureNode.value = currentTexture;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst textureNodeOld = this.textureNodeOld;\n\n\t\t//\n\n\t\tconst uvNode = textureNode.uvNode || uv();\n\n\t\ttextureNodeOld.uvNode = uvNode;\n\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\n\n\t\tconst when_gt = Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\t\t\tconst y = float( y_immutable ).toVar();\n\t\t\tconst x = vec4( x_immutable ).toVar();\n\n\t\t\treturn max( sign( x.sub( y ) ), 0.0 );\n\n\t\t} );\n\n\t\tconst afterImg = Fn( () => {\n\n\t\t\tconst texelOld = vec4( textureNodeOld );\n\t\t\tconst texelNew = vec4( sampleTexture( uvNode ) );\n\n\t\t\ttexelOld.mulAssign( this.damp.mul( when_gt( texelOld, 0.1 ) ) );\n\t\t\treturn max( texelNew, texelOld );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst materialComposed = this._materialComposed || ( this._materialComposed = new NodeMaterial() );\n\t\tmaterialComposed.name = 'AfterImage';\n\t\tmaterialComposed.fragmentNode = afterImg();\n\n\t\t_quadMeshComp.material = materialComposed;\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tdispose() {\n\n\t\tthis._compRT.dispose();\n\t\tthis._oldRT.dispose();\n\n\t}\n\n}\n\nexport const afterImage = ( node, damp ) => nodeObject( new AfterImageNode( convertToTexture( node ), damp ) );\n\nexport default AfterImageNode;\n", "import { dot, mix } from '../math/MathNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { Fn, float, vec3 } from '../tsl/TSLBase.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nexport const grayscale = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\treturn luminance( color.rgb );\n\n} );\n\nexport const saturation = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\n\n} );\n\nexport const vibrance = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\n\n\tconst mx = color.r.max( color.g.max( color.b ) );\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( - 3.0 );\n\n\treturn mix( color.rgb, mx, amt );\n\n} );\n\nexport const hue = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\n\n\tconst cosAngle = adjustment.cos();\n\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\n\n} );\n\nconst _luminanceCoefficients = /*@__PURE__*/ new Vector3();\nexport const luminance = (\n\tcolor,\n\tluminanceCoefficients = vec3( ... ColorManagement.getLuminanceCoefficients( _luminanceCoefficients ) )\n) => dot( color, luminanceCoefficients );\n\nexport const threshold = ( color, threshold ) => mix( vec3( 0.0 ), color, luminance( color ).sub( threshold ).max( 0 ) );\n", "import TempNode from '../core/TempNode.js';\nimport { nodeObject, Fn, float, vec2, vec3 } from '../tsl/TSLBase.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { threshold } from './ColorAdjustment.js';\nimport { uv } from '../accessors/UV.js';\nimport { passTexture } from './PassNode.js';\nimport { convertToTexture } from '../utils/RTTNode.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { Vector2 } from '../../math/Vector2.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\n\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nclass AnamorphicNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'AnamorphicNode';\n\n\t}\n\n\tconstructor( textureNode, tresholdNode, scaleNode, samples ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.tresholdNode = tresholdNode;\n\t\tthis.scaleNode = scaleNode;\n\t\tthis.colorNode = vec3( 0.1, 0.0, 1.0 );\n\t\tthis.samples = samples;\n\t\tthis.resolution = new Vector2( 1, 1 );\n\n\t\tthis._renderTarget = new RenderTarget();\n\t\tthis._renderTarget.texture.name = 'anamorphic';\n\n\t\tthis._invSize = uniform( new Vector2() );\n\n\t\tthis._textureNode = passTexture( this, this._renderTarget.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\n\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\n\n\t\tthis._renderTarget.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tthis._renderTarget.texture.type = map.type;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentTexture = textureNode.value;\n\n\t\t_quadMesh.material = this._material;\n\n\t\tthis.setSize( map.image.width, map.image.height );\n\n\t\t// render\n\n\t\trenderer.setRenderTarget( this._renderTarget );\n\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\ttextureNode.value = currentTexture;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst uvNode = textureNode.uvNode || uv();\n\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\n\n\t\tconst anamorph = Fn( () => {\n\n\t\t\tconst samples = this.samples;\n\t\t\tconst halfSamples = Math.floor( samples / 2 );\n\n\t\t\tconst total = vec3( 0 ).toVar();\n\n\t\t\tLoop( { start: - halfSamples, end: halfSamples }, ( { i } ) => {\n\n\t\t\t\tconst softness = float( i ).abs().div( halfSamples ).oneMinus();\n\n\t\t\t\tconst uv = vec2( uvNode.x.add( this._invSize.x.mul( i ).mul( this.scaleNode ) ), uvNode.y );\n\t\t\t\tconst color = sampleTexture( uv );\n\t\t\t\tconst pass = threshold( color, this.tresholdNode ).mul( softness );\n\n\t\t\t\ttotal.addAssign( pass );\n\n\t\t\t} );\n\n\t\t\treturn total.mul( this.colorNode );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\n\t\tmaterial.name = 'Anamorphic';\n\t\tmaterial.fragmentNode = anamorph();\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tdispose() {\n\n\t\tthis._renderTarget.dispose();\n\n\t}\n\n}\n\nexport const anamorphic = ( node, threshold = .9, scale = 3, samples = 32 ) => nodeObject( new AnamorphicNode( convertToTexture( node ), nodeObject( threshold ), nodeObject( scale ), samples ) );\n\nexport default AnamorphicNode;\n", "import TempNode from '../core/TempNode.js';\nimport { uv } from '../accessors/UV.js';\nimport { Fn, nodeProxy, vec4 } from '../tsl/TSLBase.js';\nimport { mix, fract, clamp, rand } from '../math/MathNode.js';\nimport { timerLocal } from '../utils/TimerNode.js';\n\nclass FilmNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'FilmNode';\n\n\t}\n\n\tconstructor( inputNode, intensityNode = null, uvNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.inputNode = inputNode;\n\t\tthis.intensityNode = intensityNode;\n\t\tthis.uvNode = uvNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst uvNode = this.uvNode || uv();\n\n\t\tconst film = Fn( () => {\n\n\t\t\tconst base = this.inputNode.rgb;\n\t\t\tconst noise = rand( fract( uvNode.add( timerLocal() ) ) );\n\n\t\t\tlet color = base.add( base.mul( clamp( noise.add( 0.1 ), 0, 1 ) ) );\n\n\t\t\tif ( this.intensityNode !== null ) {\n\n\t\t\t\tcolor = mix( base, color, this.intensityNode );\n\n\t\t\t}\n\n\t\t\treturn vec4( color, this.inputNode.a );\n\n\t\t} );\n\n\t\tconst outputNode = film();\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default FilmNode;\n\nexport const film = /*@__PURE__*/ nodeProxy( FilmNode );\n", "import { Texture } from './Texture.js';\nimport { NearestFilter } from '../constants.js';\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nexport { DataTexture };\n", "import TempNode from '../core/TempNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { textureSize } from '../accessors/TextureSizeNode.js';\nimport { uv } from '../accessors/UV.js';\nimport { nodeObject, Fn, mat3, vec2, vec3, vec4, float, int, If } from '../tsl/TSLBase.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { DataTexture } from '../../textures/DataTexture.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { PI, cos, sin, pow, clamp, abs, max, mix, sqrt, acos, dot, normalize, cross } from '../math/MathNode.js';\nimport { div, mul, add, sub } from '../math/OperatorNode.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { passTexture } from './PassNode.js';\nimport { RepeatWrapping } from '../../constants.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { Color } from '../../math/Color.js';\n\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\nconst _currentClearColor = /*@__PURE__*/ new Color();\nconst _size = /*@__PURE__*/ new Vector2();\n\nclass GTAONode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'GTAONode';\n\n\t}\n\n\tconstructor( depthNode, normalNode, camera ) {\n\n\t\tsuper();\n\n\t\tthis.depthNode = depthNode;\n\t\tthis.normalNode = normalNode;\n\n\t\tthis.radius = uniform( 0.25 );\n\t\tthis.resolution = uniform( new Vector2() );\n\t\tthis.thickness = uniform( 1 );\n\t\tthis.distanceExponent = uniform( 1 );\n\t\tthis.distanceFallOff = uniform( 1 );\n\t\tthis.scale = uniform( 1 );\n\t\tthis.noiseNode = texture( generateMagicSquareNoise() );\n\n\t\tthis.cameraProjectionMatrix = uniform( camera.projectionMatrix );\n\t\tthis.cameraProjectionMatrixInverse = uniform( camera.projectionMatrixInverse );\n\n\t\tthis.SAMPLES = uniform( 16 );\n\n\t\tthis._aoRenderTarget = new RenderTarget();\n\t\tthis._aoRenderTarget.texture.name = 'GTAONode.AO';\n\n\t\tthis._material = null;\n\t\tthis._textureNode = passTexture( this, this._aoRenderTarget.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.resolution.value.set( width, height );\n\t\tthis._aoRenderTarget.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst size = renderer.getDrawingBufferSize( _size );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\t\trenderer.getClearColor( _currentClearColor );\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\n\n\t\t_quadMesh.material = this._material;\n\n\t\tthis.setSize( size.width, size.height );\n\n\t\t// clear\n\n\t\trenderer.setMRT( null );\n\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t// ao\n\n\t\trenderer.setRenderTarget( this._aoRenderTarget );\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst uvNode = uv();\n\n\t\tconst sampleDepth = ( uv ) => this.depthNode.uv( uv ).x;\n\t\tconst sampleNoise = ( uv ) => this.noiseNode.uv( uv );\n\n\t\tconst getSceneUvAndDepth = Fn( ( [ sampleViewPos ] )=> {\n\n\t\t\tconst sampleClipPos = this.cameraProjectionMatrix.mul( vec4( sampleViewPos, 1.0 ) );\n\t\t\tlet sampleUv = sampleClipPos.xy.div( sampleClipPos.w ).mul( 0.5 ).add( 0.5 ).toVar();\n\t\t\tsampleUv = vec2( sampleUv.x, sampleUv.y.oneMinus() );\n\t\t\tconst sampleSceneDepth = sampleDepth( sampleUv );\n\t\t\treturn vec3( sampleUv, sampleSceneDepth );\n\n\t\t} );\n\n\t\tconst getViewPosition = Fn( ( [ screenPosition, depth ] ) => {\n\n\t\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\n\n\t\t\tconst clipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\n\t\t\tconst viewSpacePosition = vec4( this.cameraProjectionMatrixInverse.mul( clipSpacePosition ) );\n\n\t\t\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\n\n\t\t} );\n\n\t\tconst ao = Fn( () => {\n\n\t\t\tconst depth = sampleDepth( uvNode );\n\n\t\t\tdepth.greaterThanEqual( 1.0 ).discard();\n\n\t\t\tconst viewPosition = getViewPosition( uvNode, depth );\n\t\t\tconst viewNormal = this.normalNode.rgb.normalize();\n\n\t\t\tconst radiusToUse = this.radius;\n\n\t\t\tconst noiseResolution = textureSize( this.noiseNode, 0 );\n\t\t\tlet noiseUv = vec2( uvNode.x, uvNode.y.oneMinus() );\n\t\t\tnoiseUv = noiseUv.mul( this.resolution.div( noiseResolution ) );\n\t\t\tconst noiseTexel = sampleNoise( noiseUv );\n\t\t\tconst randomVec = noiseTexel.xyz.mul( 2.0 ).sub( 1.0 );\n\t\t\tconst tangent = vec3( randomVec.xy, 0.0 ).normalize();\n\t\t\tconst bitangent = vec3( tangent.y.mul( - 1.0 ), tangent.x, 0.0 );\n\t\t\tconst kernelMatrix = mat3( tangent, bitangent, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\tconst DIRECTIONS = this.SAMPLES.lessThan( 30 ).select( 3, 5 );\n\t\t\tconst STEPS = add( this.SAMPLES, DIRECTIONS.sub( 1 ) ).div( DIRECTIONS );\n\n\t\t\tconst ao = float( 0 ).toVar();\n\n\t\t\tLoop( { start: int( 0 ), end: DIRECTIONS, type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\t\t\tconst angle = float( i ).div( float( DIRECTIONS ) ).mul( PI );\n\t\t\t\tconst sampleDir = vec4( cos( angle ), sin( angle ), 0., add( 0.5, mul( 0.5, noiseTexel.w ) ) );\n\t\t\t\tsampleDir.xyz = normalize( kernelMatrix.mul( sampleDir.xyz ) );\n\n\t\t\t\tconst viewDir = normalize( viewPosition.xyz.negate() );\n\t\t\t\tconst sliceBitangent = normalize( cross( sampleDir.xyz, viewDir ) );\n\t\t\t\tconst sliceTangent = cross( sliceBitangent, viewDir );\n\t\t\t\tconst normalInSlice = normalize( viewNormal.sub( sliceBitangent.mul( dot( viewNormal, sliceBitangent ) ) ) );\n\n\t\t\t\tconst tangentToNormalInSlice = cross( normalInSlice, sliceBitangent );\n\t\t\t\tconst cosHorizons = vec2( dot( viewDir, tangentToNormalInSlice ), dot( viewDir, tangentToNormalInSlice.negate() ) ).toVar();\n\n\t\t\t\tLoop( { end: STEPS, type: 'int', name: 'j', condition: '<' }, ( { j } ) => {\n\n\t\t\t\t\tconst sampleViewOffset = sampleDir.xyz.mul( radiusToUse ).mul( sampleDir.w ).mul( pow( div( float( j ).add( 1.0 ), float( STEPS ) ), this.distanceExponent ) );\n\n\t\t\t\t\t// x\n\n\t\t\t\t\tconst sampleSceneUvDepthX = getSceneUvAndDepth( viewPosition.add( sampleViewOffset ) );\n\t\t\t\t\tconst sampleSceneViewPositionX = getViewPosition( sampleSceneUvDepthX.xy, sampleSceneUvDepthX.z );\n\t\t\t\t\tconst viewDeltaX = sampleSceneViewPositionX.sub( viewPosition );\n\n\t\t\t\t\tIf( abs( viewDeltaX.z ).lessThan( this.thickness ), () => {\n\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaX ) );\n\t\t\t\t\t\tcosHorizons.x.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.x ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\t// y\n\n\t\t\t\t\tconst sampleSceneUvDepthY = getSceneUvAndDepth( viewPosition.sub( sampleViewOffset ) );\n\t\t\t\t\tconst sampleSceneViewPositionY = getViewPosition( sampleSceneUvDepthY.xy, sampleSceneUvDepthY.z );\n\t\t\t\t\tconst viewDeltaY = sampleSceneViewPositionY.sub( viewPosition );\n\n\t\t\t\t\tIf( abs( viewDeltaY.z ).lessThan( this.thickness ), () => {\n\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaY ) );\n\t\t\t\t\t\tcosHorizons.y.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.y ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tconst sinHorizons = sqrt( sub( 1.0, cosHorizons.mul( cosHorizons ) ) );\n\t\t\t\tconst nx = dot( normalInSlice, sliceTangent );\n\t\t\t\tconst ny = dot( normalInSlice, viewDir );\n\t\t\t\tconst nxb = mul( 0.5, acos( cosHorizons.y ).sub( acos( cosHorizons.x ) ).add( sinHorizons.x.mul( cosHorizons.x ).sub( sinHorizons.y.mul( cosHorizons.y ) ) ) );\n\t\t\t\tconst nyb = mul( 0.5, sub( 2.0, cosHorizons.x.mul( cosHorizons.x ) ).sub( cosHorizons.y.mul( cosHorizons.y ) ) );\n\t\t\t\tconst occlusion = nx.mul( nxb ).add( ny.mul( nyb ) );\n\t\t\t\tao.addAssign( occlusion );\n\n\t\t\t} );\n\n\t\t\tao.assign( clamp( ao.div( DIRECTIONS ), 0, 1 ) );\n\t\t\tao.assign( pow( ao, this.scale ) );\n\n\t\t\treturn vec4( vec3( ao ), 1.0 );\n\n\t\t} );\n\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\n\t\tmaterial.fragmentNode = ao().context( builder.getSharedContext() );\n\t\tmaterial.name = 'GTAO';\n\t\tmaterial.needsUpdate = true;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tdispose() {\n\n\t\tthis._aoRenderTarget.dispose();\n\n\t}\n\n}\n\nexport default GTAONode;\n\nfunction generateMagicSquareNoise( size = 5 ) {\n\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\n\tconst magicSquare = generateMagicSquare( noiseSize );\n\tconst noiseSquareSize = magicSquare.length;\n\tconst data = new Uint8Array( noiseSquareSize * 4 );\n\n\tfor ( let inx = 0; inx < noiseSquareSize; ++ inx ) {\n\n\t\tconst iAng = magicSquare[ inx ];\n\t\tconst angle = ( 2 * Math.PI * iAng ) / noiseSquareSize;\n\t\tconst randomVec = new Vector3(\n\t\t\tMath.cos( angle ),\n\t\t\tMath.sin( angle ),\n\t\t\t0\n\t\t).normalize();\n\t\tdata[ inx * 4 ] = ( randomVec.x * 0.5 + 0.5 ) * 255;\n\t\tdata[ inx * 4 + 1 ] = ( randomVec.y * 0.5 + 0.5 ) * 255;\n\t\tdata[ inx * 4 + 2 ] = 127;\n\t\tdata[ inx * 4 + 3 ] = 255;\n\n\t}\n\n\tconst noiseTexture = new DataTexture( data, noiseSize, noiseSize );\n\tnoiseTexture.wrapS = RepeatWrapping;\n\tnoiseTexture.wrapT = RepeatWrapping;\n\tnoiseTexture.needsUpdate = true;\n\n\treturn noiseTexture;\n\n}\n\nfunction generateMagicSquare( size ) {\n\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\n\tconst noiseSquareSize = noiseSize * noiseSize;\n\tconst magicSquare = Array( noiseSquareSize ).fill( 0 );\n\tlet i = Math.floor( noiseSize / 2 );\n\tlet j = noiseSize - 1;\n\n\tfor ( let num = 1; num <= noiseSquareSize; ) {\n\n\t\tif ( i === - 1 && j === noiseSize ) {\n\n\t\t\tj = noiseSize - 2;\n\t\t\ti = 0;\n\n\t\t} else {\n\n\t\t\tif ( j === noiseSize ) {\n\n\t\t\t\tj = 0;\n\n\t\t\t}\n\n\t\t\tif ( i < 0 ) {\n\n\t\t\t\ti = noiseSize - 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( magicSquare[ i * noiseSize + j ] !== 0 ) {\n\n\t\t\tj -= 2;\n\t\t\ti ++;\n\t\t\tcontinue;\n\n\t\t} else {\n\n\t\t\tmagicSquare[ i * noiseSize + j ] = num ++;\n\n\t\t}\n\n\t\tj ++;\n\t\ti --;\n\n\t}\n\n\treturn magicSquare;\n\n}\n\nexport const ao = ( depthNode, normalNode, camera ) => nodeObject( new GTAONode( nodeObject( depthNode ), nodeObject( normalNode ), camera ) );\n", "import TempNode from '../core/TempNode.js';\nimport { Fn, nodeObject, float, vec4, int } from '../tsl/TSLBase.js';\nimport { mix, smoothstep } from '../math/MathNode.js';\nimport { luminance } from './ColorAdjustment.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { uniformArray } from '../accessors/UniformArrayNode.js';\nimport { uv } from '../accessors/UV.js';\nimport { Color } from '../../math/Color.js';\nimport { passTexture } from './PassNode.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { HalfFloatType } from '../../constants.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nconst _clearColor = /*@__PURE__*/ new Color( 0, 0, 0 );\nconst _currentClearColor = /*@__PURE__*/ new Color();\nconst _size = /*@__PURE__*/ new Vector2();\n\nconst _BlurDirectionX = /*@__PURE__*/ new Vector2( 1.0, 0.0 );\nconst _BlurDirectionY = /*@__PURE__*/ new Vector2( 0.0, 1.0 );\n\nclass BloomNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'BloomNode';\n\n\t}\n\n\tconstructor( inputNode, strength = 1, radius = 0, threshold = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.inputNode = inputNode;\n\t\tthis.strength = uniform( strength );\n\t\tthis.radius = uniform( radius );\n\t\tthis.threshold = uniform( threshold );\n\n\t\tthis.smoothWidth = uniform( 0.01 );\n\n\t\t//\n\n\t\tthis._renderTargetsHorizontal = [];\n\t\tthis._renderTargetsVertical = [];\n\t\tthis._nMips = 5;\n\n\t\t// render targets\n\n\t\tthis._renderTargetBright = new RenderTarget( 1, 1, { type: HalfFloatType } );\n\t\tthis._renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis._renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizontal = new RenderTarget( 1, 1, { type: HalfFloatType } );\n\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\n\n\t\t\tthis._renderTargetsHorizontal.push( renderTargetHorizontal );\n\n\t\t\tconst renderTargetVertical = new RenderTarget( 1, 1, { type: HalfFloatType } );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis._renderTargetsVertical.push( renderTargetVertical );\n\n\t\t}\n\n\t\t// materials\n\n\t\tthis._compositeMaterial = null;\n\t\tthis._highPassFilterMaterial = null;\n\t\tthis._separableBlurMaterials = [];\n\n\t\t// pass and texture nodes\n\n\t\tthis._textureNodeBright = texture( this._renderTargetBright.texture );\n\t\tthis._textureNodeBlur0 = texture( this._renderTargetsVertical[ 0 ].texture );\n\t\tthis._textureNodeBlur1 = texture( this._renderTargetsVertical[ 1 ].texture );\n\t\tthis._textureNodeBlur2 = texture( this._renderTargetsVertical[ 2 ].texture );\n\t\tthis._textureNodeBlur3 = texture( this._renderTargetsVertical[ 3 ].texture );\n\t\tthis._textureNodeBlur4 = texture( this._renderTargetsVertical[ 4 ].texture );\n\n\t\tthis._textureOutput = passTexture( this, this._renderTargetsHorizontal[ 0 ].texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureOutput;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis._renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\n\n\t\t\tthis._renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis._renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis._separableBlurMaterials[ i ].invSize.value.set( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst size = renderer.getDrawingBufferSize( _size );\n\t\tthis.setSize( size.width, size.height );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\t\trenderer.getClearColor( _currentClearColor );\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\n\n\t\tthis.setSize( size.width, size.height );\n\n\t\trenderer.setMRT( null );\n\t\trenderer.setClearColor( _clearColor, 0 );\n\n\t\t// 1. Extract Bright Areas\n\n\t\trenderer.setRenderTarget( this._renderTargetBright );\n\t\t_quadMesh.material = this._highPassFilterMaterial;\n\t\t_quadMesh.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this._renderTargetBright;\n\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\n\n\t\t\t_quadMesh.material = this._separableBlurMaterials[ i ];\n\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = inputRenderTarget.texture;\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\t_quadMesh.render( renderer );\n\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = this._renderTargetsHorizontal[ i ].texture;\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this._renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\t_quadMesh.render( renderer );\n\n\t\t\tinputRenderTarget = this._renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// 3. Composite All the mips\n\n\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\t_quadMesh.material = this._compositeMaterial;\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// luminosity high pass material\n\n\t\tconst luminosityHighPass = Fn( () => {\n\n\t\t\tconst texel = this.inputNode;\n\t\t\tconst v = luminance( texel.rgb );\n\n\t\t\tconst alpha = smoothstep( this.threshold, this.threshold.add( this.smoothWidth ), v );\n\n\t\t\treturn mix( vec4( 0 ), texel, alpha );\n\n\t\t} );\n\n\t\tthis._highPassFilterMaterial = this._highPassFilterMaterial || new NodeMaterial();\n\t\tthis._highPassFilterMaterial.fragmentNode = luminosityHighPass().context( builder.getSharedContext() );\n\t\tthis._highPassFilterMaterial.name = 'Bloom_highPass';\n\t\tthis._highPassFilterMaterial.needsUpdate = true;\n\n\t\t// gaussian blur materials\n\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\n\n\t\t\tthis._separableBlurMaterials.push( this._getSeperableBlurMaterial( builder, kernelSizeArray[ i ] ) );\n\n\t\t}\n\n\t\t// composite material\n\n\t\tconst bloomFactors = uniformArray( [ 1.0, 0.8, 0.6, 0.4, 0.2 ] );\n\t\tconst bloomTintColors = uniformArray( [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ] );\n\n\t\tconst lerpBloomFactor = Fn( ( [ factor, radius ] ) => {\n\n\t\t\tconst mirrorFactor = float( 1.2 ).sub( factor );\n\t\t\treturn mix( factor, mirrorFactor, radius );\n\n\t\t} ).setLayout( {\n\t\t\tname: 'lerpBloomFactor',\n\t\t\ttype: 'float',\n\t\t\tinputs: [\n\t\t\t\t{ name: 'factor', type: 'float' },\n\t\t\t\t{ name: 'radius', type: 'float' },\n\t\t\t]\n\t\t} );\n\n\n\t\tconst compositePass = Fn( () => {\n\n\t\t\tconst color0 = lerpBloomFactor( bloomFactors.element( 0 ), this.radius ).mul( vec4( bloomTintColors.element( 0 ), 1.0 ) ).mul( this._textureNodeBlur0 );\n\t\t\tconst color1 = lerpBloomFactor( bloomFactors.element( 1 ), this.radius ).mul( vec4( bloomTintColors.element( 1 ), 1.0 ) ).mul( this._textureNodeBlur1 );\n\t\t\tconst color2 = lerpBloomFactor( bloomFactors.element( 2 ), this.radius ).mul( vec4( bloomTintColors.element( 2 ), 1.0 ) ).mul( this._textureNodeBlur2 );\n\t\t\tconst color3 = lerpBloomFactor( bloomFactors.element( 3 ), this.radius ).mul( vec4( bloomTintColors.element( 3 ), 1.0 ) ).mul( this._textureNodeBlur3 );\n\t\t\tconst color4 = lerpBloomFactor( bloomFactors.element( 4 ), this.radius ).mul( vec4( bloomTintColors.element( 4 ), 1.0 ) ).mul( this._textureNodeBlur4 );\n\n\t\t\tconst sum = color0.add( color1 ).add( color2 ).add( color3 ).add( color4 );\n\n\t\t\treturn sum.mul( this.strength );\n\n\t\t} );\n\n\t\tthis._compositeMaterial = this._compositeMaterial || new NodeMaterial();\n\t\tthis._compositeMaterial.fragmentNode = compositePass().context( builder.getSharedContext() );\n\t\tthis._compositeMaterial.name = 'Bloom_comp';\n\t\tthis._compositeMaterial.needsUpdate = true;\n\n\t\t//\n\n\t\treturn this._textureOutput;\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this._renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis._renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this._renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis._renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis._renderTargetBright.dispose();\n\n\t}\n\n\t_getSeperableBlurMaterial( builder, kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\t//\n\n\t\tconst colorTexture = texture();\n\t\tconst gaussianCoefficients = uniformArray( coefficients );\n\t\tconst invSize = uniform( new Vector2() );\n\t\tconst direction = uniform( new Vector2( 0.5, 0.5 ) );\n\n\t\tconst uvNode = uv();\n\t\tconst sampleTexel = ( uv ) => colorTexture.uv( uv );\n\n\t\tconst seperableBlurPass = Fn( () => {\n\n\t\t\tconst weightSum = gaussianCoefficients.element( 0 ).toVar();\n\t\t\tconst diffuseSum = sampleTexel( uvNode ).rgb.mul( weightSum ).toVar();\n\n\t\t\tLoop( { start: int( 1 ), end: int( kernelRadius ), type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\t\t\tconst x = float( i );\n\t\t\t\tconst w = gaussianCoefficients.element( i );\n\t\t\t\tconst uvOffset = direction.mul( invSize ).mul( x );\n\t\t\t\tconst sample1 = sampleTexel( uvNode.add( uvOffset ) ).rgb;\n\t\t\t\tconst sample2 = sampleTexel( uvNode.sub( uvOffset ) ).rgb;\n\t\t\t\tdiffuseSum.addAssign( add( sample1, sample2 ).mul( w ) );\n\t\t\t\tweightSum.addAssign( float( 2.0 ).mul( w ) );\n\n\t\t\t} );\n\n\t\t\treturn vec4( diffuseSum.div( weightSum ), 1.0 );\n\n\t\t} );\n\n\t\tconst seperableBlurMaterial = new NodeMaterial();\n\t\tseperableBlurMaterial.fragmentNode = seperableBlurPass().context( builder.getSharedContext() );\n\t\tseperableBlurMaterial.name = 'Bloom_seperable';\n\t\tseperableBlurMaterial.needsUpdate = true;\n\n\t\t// uniforms\n\t\tseperableBlurMaterial.colorTexture = colorTexture;\n\t\tseperableBlurMaterial.direction = direction;\n\t\tseperableBlurMaterial.invSize = invSize;\n\n\t\treturn seperableBlurMaterial;\n\n\t}\n\n}\n\nexport const bloom = ( node, strength, radius, threshold ) => nodeObject( new BloomNode( nodeObject( node ), strength, radius, threshold ) );\n\nexport default BloomNode;\n", "import { nodeObject } from '../tsl/TSLBase.js';\nimport PassNode from './PassNode.js';\nimport { Color } from '../../math/Color.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { AdditiveBlending } from '../../constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { mrt, getTextureIndex } from '../core/MRTNode.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\n\n/**\n*\n* Supersample Anti-Aliasing Render Pass\n*\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\n*\n* References: https://en.wikipedia.org/wiki/Supersampling\n*\n*/\n\nclass SSAAPassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'SSAAPassNode';\n\n\t}\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\tthis.isSSAAPassNode = true;\n\n\t\tthis.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\n\t\tthis.unbiased = true;\n\t\tthis.clearColor = new Color( 0x000000 );\n\t\tthis.clearAlpha = 0;\n\n\t\tthis._currentClearColor = new Color();\n\n\t\tthis.sampleWeight = uniform( 1 );\n\n\t\tthis.sampleRenderTarget = null;\n\n\t\tthis._quadMesh = new QuadMesh();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, camera } = this;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tconst size = renderer.getSize( _size );\n\n\t\tthis.setSize( size.width, size.height );\n\t\tthis.sampleRenderTarget.setSize( this.renderTarget.width, this.renderTarget.height );\n\n\t\t// save current renderer settings\n\n\t\trenderer.getClearColor( this._currentClearColor );\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\t\tconst currentAutoClear = renderer.autoClear;\n\n\t\t//\n\n\t\tthis._cameraNear.value = camera.near;\n\t\tthis._cameraFar.value = camera.far;\n\n\t\trenderer.setMRT( this.getMRT() );\n\t\trenderer.autoClear = false;\n\n\t\tconst jitterOffsets = _JitterVectors[ Math.max( 0, Math.min( this.sampleLevel, 5 ) ) ];\n\n\t\tconst baseSampleWeight = 1.0 / jitterOffsets.length;\n\t\tconst roundingRange = 1 / 32;\n\n\t\tconst viewOffset = {\n\n\t\t\tfullWidth: this.renderTarget.width,\n\t\t\tfullHeight: this.renderTarget.height,\n\t\t\toffsetX: 0,\n\t\t\toffsetY: 0,\n\t\t\twidth: this.renderTarget.width,\n\t\t\theight: this.renderTarget.height\n\n\t\t};\n\n\t\tconst originalViewOffset = Object.assign( {}, camera.view );\n\n\t\tif ( originalViewOffset.enabled ) Object.assign( viewOffset, originalViewOffset );\n\n\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n\n\t\tfor ( let i = 0; i < jitterOffsets.length; i ++ ) {\n\n\t\t\tconst jitterOffset = jitterOffsets[ i ];\n\n\t\t\tif ( camera.setViewOffset ) {\n\n\t\t\t\tcamera.setViewOffset(\n\n\t\t\t\t\tviewOffset.fullWidth, viewOffset.fullHeight,\n\n\t\t\t\t\tviewOffset.offsetX + jitterOffset[ 0 ] * 0.0625, viewOffset.offsetY + jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\n\n\t\t\t\t\tviewOffset.width, viewOffset.height\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tthis.sampleWeight.value = baseSampleWeight;\n\n\t\t\tif ( this.unbiased ) {\n\n\t\t\t\t// the theory is that equal weights for each sample lead to an accumulation of rounding errors.\n\t\t\t\t// The following equation varies the sampleWeight per sample so that it is uniformly distributed\n\t\t\t\t// across a range of values whose rounding errors cancel each other out.\n\n\t\t\t\tconst uniformCenteredDistribution = ( - 0.5 + ( i + 0.5 ) / jitterOffsets.length );\n\t\t\t\tthis.sampleWeight.value += roundingRange * uniformCenteredDistribution;\n\n\t\t\t}\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, camera );\n\n\t\t\t// accumulation\n\n\t\t\trenderer.setRenderTarget( this.renderTarget );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis._quadMesh.render( renderer );\n\n\t\t}\n\n\t\trenderer.copyTextureToTexture( this.sampleRenderTarget.depthTexture, this.renderTarget.depthTexture );\n\n\t\t// restore\n\n\t\tif ( camera.setViewOffset && originalViewOffset.enabled ) {\n\n\t\t\tcamera.setViewOffset(\n\n\t\t\t\toriginalViewOffset.fullWidth, originalViewOffset.fullHeight,\n\n\t\t\t\toriginalViewOffset.offsetX, originalViewOffset.offsetY,\n\n\t\t\t\toriginalViewOffset.width, originalViewOffset.height\n\n\t\t\t);\n\n\t\t} else if ( camera.clearViewOffset ) {\n\n\t\t\tcamera.clearViewOffset();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\n\t\trenderer.autoClear = currentAutoClear;\n\t\trenderer.setClearColor( this._currentClearColor, currentClearAlpha );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( this.sampleRenderTarget === null ) {\n\n\t\t\tthis.sampleRenderTarget = this.renderTarget.clone();\n\n\t\t}\n\n\t\tlet sampleTexture;\n\n\t\tconst passMRT = this.getMRT();\n\n\t\tif ( passMRT !== null ) {\n\n\t\t\tconst outputs = {};\n\n\t\t\tfor ( const name in passMRT.outputNodes ) {\n\n\t\t\t\tconst index = getTextureIndex( this.sampleRenderTarget.textures, name );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\toutputs[ name ] = texture( this.sampleRenderTarget.textures[ index ] ).mul( this.sampleWeight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsampleTexture = mrt( outputs );\n\n\t\t} else {\n\n\t\t\tsampleTexture = texture( this.sampleRenderTarget.texture ).mul( this.sampleWeight );\n\n\t\t}\n\n\t\tthis._quadMesh.material = new NodeMaterial();\n\t\tthis._quadMesh.material.fragmentNode = sampleTexture;\n\t\tthis._quadMesh.material.transparent = true;\n\t\tthis._quadMesh.material.depthTest = false;\n\t\tthis._quadMesh.material.depthWrite = false;\n\t\tthis._quadMesh.material.premultipliedAlpha = true;\n\t\tthis._quadMesh.material.blending = AdditiveBlending;\n\t\tthis._quadMesh.material.normals = false;\n\t\tthis._quadMesh.material.name = 'SSAA';\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tif ( this.sampleRenderTarget !== null ) {\n\n\t\t\tthis.sampleRenderTarget.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport default SSAAPassNode;\n\n// These jitter vectors are specified in integers because it is easier.\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\n// before being used, thus these integers need to be scaled by 1/16.\n//\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\nconst _JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n\nexport const ssaaPass = ( scene, camera ) => nodeObject( new SSAAPassNode( scene, camera ) );\n", "import { Matrix4 } from '../math/Matrix4.js';\nimport * as MathUtils from '../math/MathUtils.js';\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nexport { StereoCamera };\n", "import { nodeObject } from '../tsl/TSLBase.js';\nimport PassNode from './PassNode.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { StereoCamera } from '../../cameras/StereoCamera.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\n\nclass StereoPassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'StereoPassNode';\n\n\t}\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\tthis.isStereoPassNode = true;\n\n\t\tthis.stereo = new StereoCamera();\n\t\tthis.stereo.aspect = 0.5;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, camera, stereo, renderTarget } = this;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tstereo.cameraL.coordinateSystem = renderer.coordinateSystem;\n\t\tstereo.cameraR.coordinateSystem = renderer.coordinateSystem;\n\t\tstereo.update( camera );\n\n\t\tconst size = renderer.getSize( _size );\n\t\tthis.setSize( size.width, size.height );\n\n\t\tconst currentAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\n\t\tthis._cameraNear.value = camera.near;\n\t\tthis._cameraFar.value = camera.far;\n\n\t\tfor ( const name in this._previousTextures ) {\n\n\t\t\tthis.toggleTexture( name );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.setMRT( this._mrt );\n\t\trenderer.clear();\n\n\t\trenderTarget.scissorTest = true;\n\n\t\trenderTarget.scissor.set( 0, 0, renderTarget.width / 2, renderTarget.height );\n\t\trenderTarget.viewport.set( 0, 0, renderTarget.width / 2, renderTarget.height );\n\t\trenderer.render( scene, stereo.cameraL );\n\n\t\trenderTarget.scissor.set( renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height );\n\t\trenderTarget.viewport.set( renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height );\n\t\trenderer.render( scene, stereo.cameraR );\n\n\t\trenderTarget.scissorTest = false;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\n\t\trenderer.autoClear = currentAutoClear;\n\n\t}\n\n}\n\nexport default StereoPassNode;\n\nexport const stereoPass = ( scene, camera ) => nodeObject( new StereoPassNode( scene, camera ) );\n", "\nimport PassNode from './PassNode.js';\nimport { StereoCamera } from '../../cameras/StereoCamera.js';\nimport { HalfFloatType, LinearFilter, NearestFilter } from '../../constants.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\n\nconst _size = /*@__PURE__*/ new Vector2();\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nclass StereoCompositePassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'StereoCompositePassNode';\n\n\t}\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\tthis.isStereoCompositePassNode = true;\n\n\t\tthis.stereo = new StereoCamera();\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, type: HalfFloatType };\n\n\t\tthis._renderTargetL = new RenderTarget( 1, 1, _params );\n\t\tthis._renderTargetR = new RenderTarget( 1, 1, _params );\n\n\t\tthis._mapLeft = texture( this._renderTargetL.texture );\n\t\tthis._mapRight = texture( this._renderTargetR.texture );\n\n\t\tthis._material = null;\n\n\t}\n\n\tupdateStereoCamera( coordinateSystem ) {\n\n\t\tthis.stereo.cameraL.coordinateSystem = coordinateSystem;\n\t\tthis.stereo.cameraR.coordinateSystem = coordinateSystem;\n\t\tthis.stereo.update( this.camera );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tsuper.setSize( width, height );\n\n\t\tthis._renderTargetL.setSize( this.renderTarget.width, this.renderTarget.height );\n\t\tthis._renderTargetR.setSize( this.renderTarget.width, this.renderTarget.height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, stereo, renderTarget } = this;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tthis.updateStereoCamera( renderer.coordinateSystem );\n\n\t\tconst size = renderer.getSize( _size );\n\t\tthis.setSize( size.width, size.height );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t// left\n\n\t\trenderer.setRenderTarget( this._renderTargetL );\n\t\trenderer.render( scene, stereo.cameraL );\n\n\t\t// right\n\n\t\trenderer.setRenderTarget( this._renderTargetR );\n\t\trenderer.render( scene, stereo.cameraR );\n\n\t\t// composite\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\t_quadMesh.material = this._material;\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis._renderTargetL.dispose();\n\t\tthis._renderTargetR.dispose();\n\n\t\tif ( this._material !== null ) {\n\n\t\t\tthis._material.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport default StereoCompositePassNode;\n", "import Node from '../core/Node.js';\nimport { arrayBufferToBase64, base64ToArrayBuffer } from '../core/NodeUtils.js';\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\n\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\n\nclass ScriptableValueNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScriptableValueNode';\n\n\t}\n\n\tconstructor( value = null ) {\n\n\t\tsuper();\n\n\t\tthis._value = value;\n\t\tthis._cache = null;\n\n\t\tthis.inputType = null;\n\t\tthis.outpuType = null;\n\n\t\tthis.events = new EventDispatcher();\n\n\t\tthis.isScriptableValueNode = true;\n\n\t}\n\n\tget isScriptableOutputNode() {\n\n\t\treturn this.outputType !== null;\n\n\t}\n\n\tset value( val ) {\n\n\t\tif ( this._value === val ) return;\n\n\t\tif ( this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer ) {\n\n\t\t\tURL.revokeObjectURL( this._cache );\n\n\t\t\tthis._cache = null;\n\n\t\t}\n\n\t\tthis._value = val;\n\n\t\tthis.events.dispatchEvent( { type: 'change' } );\n\n\t\tthis.refresh();\n\n\t}\n\n\tget value() {\n\n\t\treturn this._value;\n\n\t}\n\n\trefresh() {\n\n\t\tthis.events.dispatchEvent( { type: 'refresh' } );\n\n\t}\n\n\tgetValue() {\n\n\t\tconst value = this.value;\n\n\t\tif ( value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer ) {\n\n\t\t\tthis._cache = URL.createObjectURL( new Blob( [ value.value ] ) );\n\n\t\t} else if ( value && value.value !== null && value.value !== undefined && (\n\t\t\t( ( this.inputType === 'URL' || this.inputType === 'String' ) && typeof value.value === 'string' ) ||\n\t\t\t( this.inputType === 'Number' && typeof value.value === 'number' ) ||\n\t\t\t( this.inputType === 'Vector2' && value.value.isVector2 ) ||\n\t\t\t( this.inputType === 'Vector3' && value.value.isVector3 ) ||\n\t\t\t( this.inputType === 'Vector4' && value.value.isVector4 ) ||\n\t\t\t( this.inputType === 'Color' && value.value.isColor ) ||\n\t\t\t( this.inputType === 'Matrix3' && value.value.isMatrix3 ) ||\n\t\t\t( this.inputType === 'Matrix4' && value.value.isMatrix4 )\n\t\t) ) {\n\n\t\t\treturn value.value;\n\n\t\t}\n\n\t\treturn this._cache || value;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.value && this.value.isNode ? this.value.getNodeType( builder ) : 'float';\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.value && this.value.isNode ? this.value : float();\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tif ( this.value !== null ) {\n\n\t\t\tif ( this.inputType === 'ArrayBuffer' ) {\n\n\t\t\t\tdata.value = arrayBufferToBase64( this.value );\n\n\t\t\t} else {\n\n\t\t\t\tdata.value = this.value ? this.value.toJSON( data.meta ).uuid : null;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.value = null;\n\n\t\t}\n\n\t\tdata.inputType = this.inputType;\n\t\tdata.outputType = this.outputType;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tlet value = null;\n\n\t\tif ( data.value !== null ) {\n\n\t\t\tif ( data.inputType === 'ArrayBuffer' ) {\n\n\t\t\t\tvalue = base64ToArrayBuffer( data.value );\n\n\t\t\t} else if ( data.inputType === 'Texture' ) {\n\n\t\t\t\tvalue = data.meta.textures[ data.value ];\n\n\t\t\t} else {\n\n\t\t\t\tvalue = data.meta.nodes[ data.value ] || null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t\tthis.inputType = data.inputType;\n\t\tthis.outputType = data.outputType;\n\n\t}\n\n}\n\nexport default ScriptableValueNode;\n\nexport const scriptableValue = /*@__PURE__*/ nodeProxy( ScriptableValueNode );\n", "import Node from '../core/Node.js';\nimport { scriptableValue } from './ScriptableValueNode.js';\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\nimport { hashArray, hashString } from '../core/NodeUtils.js';\n\nclass Resources extends Map {\n\n\tget( key, callback = null, ...params ) {\n\n\t\tif ( this.has( key ) ) return super.get( key );\n\n\t\tif ( callback !== null ) {\n\n\t\t\tconst value = callback( ...params );\n\t\t\tthis.set( key, value );\n\t\t\treturn value;\n\n\t\t}\n\n\t}\n\n}\n\nclass Parameters {\n\n\tconstructor( scriptableNode ) {\n\n\t\tthis.scriptableNode = scriptableNode;\n\n\t}\n\n\tget parameters() {\n\n\t\treturn this.scriptableNode.parameters;\n\n\t}\n\n\tget layout() {\n\n\t\treturn this.scriptableNode.getLayout();\n\n\t}\n\n\tgetInputLayout( id ) {\n\n\t\treturn this.scriptableNode.getInputLayout( id );\n\n\t}\n\n\tget( name ) {\n\n\t\tconst param = this.parameters[ name ];\n\t\tconst value = param ? param.getValue() : null;\n\n\t\treturn value;\n\n\t}\n\n}\n\nexport const global = new Resources();\n\nclass ScriptableNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScriptableNode';\n\n\t}\n\n\tconstructor( codeNode = null, parameters = {} ) {\n\n\t\tsuper();\n\n\t\tthis.codeNode = codeNode;\n\t\tthis.parameters = parameters;\n\n\t\tthis._local = new Resources();\n\t\tthis._output = scriptableValue();\n\t\tthis._outputs = {};\n\t\tthis._source = this.source;\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\n\t\tthis.onRefresh = this.onRefresh.bind( this );\n\n\t\tthis.isScriptableNode = true;\n\n\t}\n\n\tget source() {\n\n\t\treturn this.codeNode ? this.codeNode.code : '';\n\n\t}\n\n\tsetLocal( name, value ) {\n\n\t\treturn this._local.set( name, value );\n\n\t}\n\n\tgetLocal( name ) {\n\n\t\treturn this._local.get( name );\n\n\t}\n\n\tonRefresh() {\n\n\t\tthis._refresh();\n\n\t}\n\n\tgetInputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetOutputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetOutput( name, value ) {\n\n\t\tconst outputs = this._outputs;\n\n\t\tif ( outputs[ name ] === undefined ) {\n\n\t\t\toutputs[ name ] = scriptableValue( value );\n\n\t\t} else {\n\n\t\t\toutputs[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetOutput( name ) {\n\n\t\treturn this._outputs[ name ];\n\n\t}\n\n\tgetParameter( name ) {\n\n\t\treturn this.parameters[ name ];\n\n\t}\n\n\tsetParameter( name, value ) {\n\n\t\tconst parameters = this.parameters;\n\n\t\tif ( value && value.isScriptableNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( value && value.isScriptableValueNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( parameters[ name ] === undefined ) {\n\n\t\t\tparameters[ name ] = scriptableValue( value );\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else {\n\n\t\t\tparameters[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.getDefaultOutput().getValue();\n\n\t}\n\n\tdeleteParameter( name ) {\n\n\t\tlet valueNode = this.parameters[ name ];\n\n\t\tif ( valueNode ) {\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclearParameters() {\n\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tcall( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method( ...params );\n\n\t\t}\n\n\t}\n\n\tasync callAsync( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\n\n\t\t}\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\n\n\t}\n\n\trefresh( output = null ) {\n\n\t\tif ( output !== null ) {\n\n\t\t\tthis.getOutput( output ).refresh();\n\n\t\t} else {\n\n\t\t\tthis._refresh();\n\n\t\t}\n\n\t}\n\n\tgetObject() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._object !== null ) return this._object;\n\n\t\t//\n\n\t\tconst refresh = () => this.refresh();\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\n\n\t\tconst parameters = new Parameters( this );\n\n\t\tconst THREE = global.get( 'THREE' );\n\t\tconst TSL = global.get( 'TSL' );\n\n\t\tconst method = this.getMethod( this.codeNode );\n\t\tconst params = [ parameters, this._local, global, refresh, setOutput, THREE, TSL ];\n\n\t\tthis._object = method( ...params );\n\n\t\tconst layout = this._object.layout;\n\n\t\tif ( layout ) {\n\n\t\t\tif ( layout.cache === false ) {\n\n\t\t\t\tthis._local.clear();\n\n\t\t\t}\n\n\t\t\t// default output\n\t\t\tthis._output.outputType = layout.outputType || null;\n\n\t\t\tif ( Array.isArray( layout.elements ) ) {\n\n\t\t\t\tfor ( const element of layout.elements ) {\n\n\t\t\t\t\tconst id = element.id || element.name;\n\n\t\t\t\t\tif ( element.inputType ) {\n\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\n\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.outputType ) {\n\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\n\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._object;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tfor ( const name in this.parameters ) {\n\n\t\t\tlet valueNode = this.parameters[ name ];\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t}\n\n\tgetLayout() {\n\n\t\treturn this.getObject().layout;\n\n\t}\n\n\tgetDefaultOutputNode() {\n\n\t\tconst output = this.getDefaultOutput().value;\n\n\t\tif ( output && output.isNode ) {\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\treturn float();\n\n\t}\n\n\tgetDefaultOutput()\t{\n\n\t\treturn this._exec()._output;\n\n\t}\n\n\tgetMethod() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._method !== null ) return this._method;\n\n\t\t//\n\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\n\n\t\tconst properties = interfaceProps.join( ', ' );\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\n\n\t\tconst code = declarations + this.codeNode.code + returns;\n\n\t\t//\n\n\t\tthis._method = new Function( ...parametersProps, code );\n\n\t\treturn this._method;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this._method === null ) return;\n\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\n\n\t\t\tthis._object.dispose();\n\n\t\t}\n\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._source = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\t\tthis._output.value = null;\n\t\tthis._outputs = {};\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.getDefaultOutputNode();\n\n\t}\n\n\tgetCacheKey( force ) {\n\n\t\tconst values = [ hashString( this.source ), this.getDefaultOutputNode().getCacheKey( force ) ];\n\n\t\tfor ( const param in this.parameters ) {\n\n\t\t\tvalues.push( this.parameters[ param ].getCacheKey( force ) );\n\n\t\t}\n\n\t\treturn hashArray( values );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.dispose();\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn this.source !== this._source;\n\n\t}\n\n\t_exec()\t{\n\n\t\tif ( this.codeNode === null ) return this;\n\n\t\tif ( this._needsOutputUpdate === true ) {\n\n\t\t\tthis._value = this.call( 'main' );\n\n\t\t\tthis._needsOutputUpdate = false;\n\n\t\t}\n\n\t\tthis._output.value = this._value;\n\n\t\treturn this;\n\n\t}\n\n\t_refresh() {\n\n\t\tthis.needsUpdate = true;\n\n\t\tthis._exec();\n\n\t\tthis._output.refresh();\n\n\t}\n\n}\n\nexport default ScriptableNode;\n\nexport const scriptable = /*@__PURE__*/ nodeProxy( ScriptableNode );\n", "import Node from '../core/Node.js';\nimport { positionView } from '../accessors/Position.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass FogNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'FogNode';\n\n\t}\n\n\tconstructor( colorNode, factorNode ) {\n\n\t\tsuper( 'float' );\n\n\t\tthis.isFogNode = true;\n\n\t\tthis.colorNode = colorNode;\n\t\tthis.factorNode = factorNode;\n\n\t}\n\n\tgetViewZNode( builder ) {\n\n\t\tlet viewZ;\n\n\t\tconst getViewZ = builder.context.getViewZ;\n\n\t\tif ( getViewZ !== undefined ) {\n\n\t\t\tviewZ = getViewZ( this );\n\n\t\t}\n\n\t\treturn ( viewZ || positionView.z ).negate();\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.factorNode;\n\n\t}\n\n}\n\nexport default FogNode;\n\nexport const fog = /*@__PURE__*/ nodeProxy( FogNode );\n", "import FogNode from './FogNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass FogRangeNode extends FogNode {\n\n\tstatic get type() {\n\n\t\treturn 'FogRangeNode';\n\n\t}\n\n\tconstructor( colorNode, nearNode, farNode ) {\n\n\t\tsuper( colorNode );\n\n\t\tthis.isFogRangeNode = true;\n\n\t\tthis.nearNode = nearNode;\n\t\tthis.farNode = farNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst viewZ = this.getViewZNode( builder );\n\n\t\treturn smoothstep( this.nearNode, this.farNode, viewZ );\n\n\t}\n\n}\n\nexport default FogRangeNode;\n\nexport const rangeFog = /*@__PURE__*/ nodeProxy( FogRangeNode );\n", "import FogNode from './FogNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\nclass FogExp2Node extends FogNode {\n\n\tstatic get type() {\n\n\t\treturn 'FogExp2Node';\n\n\t}\n\n\tconstructor( colorNode, densityNode ) {\n\n\t\tsuper( colorNode );\n\n\t\tthis.isFogExp2Node = true;\n\n\t\tthis.densityNode = densityNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst viewZ = this.getViewZNode( builder );\n\t\tconst density = this.densityNode;\n\n\t\treturn density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();\n\n\t}\n\n}\n\nexport default FogExp2Node;\n\nexport const densityFog = /*@__PURE__*/ nodeProxy( FogExp2Node );\n", "import Node from '../core/Node.js';\nimport { getValueType } from '../core/NodeUtils.js';\nimport { buffer } from '../accessors/BufferNode.js';\nimport { instancedBufferAttribute } from '../accessors/BufferAttributeNode.js';\nimport { instanceIndex } from '../core/IndexNode.js';\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\n\nimport { Vector4 } from '../../math/Vector4.js';\nimport { MathUtils } from '../../math/MathUtils.js';\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\n\nlet min = null;\nlet max = null;\n\nclass RangeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'RangeNode';\n\n\t}\n\n\tconstructor( minNode = float(), maxNode = float() ) {\n\n\t\tsuper();\n\n\t\tthis.minNode = minNode;\n\t\tthis.maxNode = maxNode;\n\n\t}\n\n\tgetVectorLength( builder ) {\n\n\t\tconst minLength = builder.getTypeLength( getValueType( this.minNode.value ) );\n\t\tconst maxLength = builder.getTypeLength( getValueType( this.maxNode.value ) );\n\n\t\treturn minLength > maxLength ? minLength : maxLength;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn builder.object.count > 1 ? builder.getTypeFromLength( this.getVectorLength( builder ) ) : 'float';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst object = builder.object;\n\n\t\tlet output = null;\n\n\t\tif ( object.count > 1 ) {\n\n\t\t\tconst minValue = this.minNode.value;\n\t\t\tconst maxValue = this.maxNode.value;\n\n\t\t\tconst minLength = builder.getTypeLength( getValueType( minValue ) );\n\t\t\tconst maxLength = builder.getTypeLength( getValueType( maxValue ) );\n\n\t\t\tmin = min || new Vector4();\n\t\t\tmax = max || new Vector4();\n\n\t\t\tmin.setScalar( 0 );\n\t\t\tmax.setScalar( 0 );\n\n\t\t\tif ( minLength === 1 ) min.setScalar( minValue );\n\t\t\telse if ( minValue.isColor ) min.set( minValue.r, minValue.g, minValue.b );\n\t\t\telse min.set( minValue.x, minValue.y, minValue.z || 0, minValue.w || 0 );\n\n\t\t\tif ( maxLength === 1 ) max.setScalar( maxValue );\n\t\t\telse if ( maxValue.isColor ) max.set( maxValue.r, maxValue.g, maxValue.b );\n\t\t\telse max.set( maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0 );\n\n\t\t\tconst stride = 4;\n\n\t\t\tconst length = stride * object.count;\n\t\t\tconst array = new Float32Array( length );\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst index = i % stride;\n\n\t\t\t\tconst minElementValue = min.getComponent( index );\n\t\t\t\tconst maxElementValue = max.getComponent( index );\n\n\t\t\t\tarray[ i ] = MathUtils.lerp( minElementValue, maxElementValue, Math.random() );\n\n\t\t\t}\n\n\t\t\tconst nodeType = this.getNodeType( builder );\n\n\t\t\tif ( object.count <= 4096 ) {\n\n\t\t\t\toutput = buffer( array, 'vec4', object.count ).element( instanceIndex ).convert( nodeType );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: Improve anonymous buffer attribute creation removing this part\n\t\t\t\tconst bufferAttribute = new InstancedBufferAttribute( array, 4 );\n\t\t\t\tbuilder.geometry.setAttribute( '__range' + this.id, bufferAttribute );\n\n\t\t\t\toutput = instancedBufferAttribute( bufferAttribute ).convert( nodeType );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\toutput = float( 0 );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nexport default RangeNode;\n\nexport const range = /*@__PURE__*/ nodeProxy( RangeNode );\n", "import LightingNode from './LightingNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { float, vec2, vec3, vec4, If, int, Fn } from '../tsl/TSLBase.js';\nimport { reference } from '../accessors/ReferenceNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { positionWorld } from '../accessors/Position.js';\nimport { normalWorld } from '../accessors/Normal.js';\nimport { mix, fract, step, max, clamp, sqrt } from '../math/MathNode.js';\nimport { add, sub } from '../math/OperatorNode.js';\nimport { Color } from '../../math/Color.js';\nimport { DepthTexture } from '../../textures/DepthTexture.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { screenCoordinate } from '../display/ScreenNode.js';\nimport { HalfFloatType, LessCompare, RGFormat, VSMShadowMap, WebGPUCoordinateSystem } from '../../constants.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { hash } from '../core/NodeUtils.js';\n\nconst BasicShadowMap = Fn( ( { depthTexture, shadowCoord } ) => {\n\n\treturn texture( depthTexture, shadowCoord.xy ).compare( shadowCoord.z );\n\n} );\n\nconst PCFShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {\n\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\n\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\n\n\tconst texelSize = vec2( 1 ).div( mapSize );\n\tconst dx0 = texelSize.x.negate().mul( radius );\n\tconst dy0 = texelSize.y.negate().mul( radius );\n\tconst dx1 = texelSize.x.mul( radius );\n\tconst dy1 = texelSize.y.mul( radius );\n\tconst dx2 = dx0.div( 2 );\n\tconst dy2 = dy0.div( 2 );\n\tconst dx3 = dx1.div( 2 );\n\tconst dy3 = dy1.div( 2 );\n\n\treturn add(\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy, shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )\n\t).mul( 1 / 17 );\n\n} );\n\nconst PCFSoftShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {\n\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\n\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\n\tconst texelSize = vec2( 1 ).div( mapSize );\n\tconst dx = texelSize.x;\n\tconst dy = texelSize.y;\n\n\tconst uv = shadowCoord.xy;\n\tconst f = fract( uv.mul( mapSize ).add( 0.5 ) );\n\tuv.subAssign( f.mul( texelSize ) );\n\n\treturn add(\n\t\tdepthCompare( uv, shadowCoord.z ),\n\t\tdepthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),\n\t\tdepthCompare( uv.add( texelSize ), shadowCoord.z ),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),\n\t\t\tf.x\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),\n\t\t\tf.x\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\tf.y\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\tf.y\n\t\t),\n\t\tmix(\n\t\t\tmix(\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),\n\t\t\t\tf.x\n\t\t\t),\n\t\t\tmix(\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\t\tf.x\n\t\t\t),\n\t\t\tf.y\n\t\t)\n\t).mul( 1 / 9 );\n\n} );\n\n// VSM\n\nconst VSMShadowMapNode = Fn( ( { depthTexture, shadowCoord } ) => {\n\n\tconst occlusion = float( 1 ).toVar();\n\n\tconst distribution = texture( depthTexture ).uv( shadowCoord.xy ).rg;\n\n\tconst hardShadow = step( shadowCoord.z, distribution.x );\n\n\tIf( hardShadow.notEqual( float( 1.0 ) ), () => {\n\n\t\tconst distance = shadowCoord.z.sub( distribution.x );\n\t\tconst variance = max( 0, distribution.y.mul( distribution.y ) );\n\t\tlet softnessProbability = variance.div( variance.add( distance.mul( distance ) ) ); // Chebeyshevs inequality\n\t\tsoftnessProbability = clamp( sub( softnessProbability, 0.3 ).div( 0.95 - 0.3 ) );\n\t\tocclusion.assign( clamp( max( hardShadow, softnessProbability ) ) );\n\n\t} );\n\n\treturn occlusion;\n\n} );\n\nconst VSMPassVertical = Fn( ( { samples, radius, size, shadowPass } ) => {\n\n\tconst mean = float( 0 ).toVar();\n\tconst squaredMean = float( 0 ).toVar();\n\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\n\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\n\n\t\tconst depth = shadowPass.uv( add( screenCoordinate.xy, vec2( 0, uvOffset ).mul( radius ) ).div( size ) ).x;\n\t\tmean.addAssign( depth );\n\t\tsquaredMean.addAssign( depth.mul( depth ) );\n\n\t} );\n\n\tmean.divAssign( samples );\n\tsquaredMean.divAssign( samples );\n\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\n\treturn vec2( mean, std_dev );\n\n} );\n\nconst VSMPassHorizontal = Fn( ( { samples, radius, size, shadowPass } ) => {\n\n\tconst mean = float( 0 ).toVar();\n\tconst squaredMean = float( 0 ).toVar();\n\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\n\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\n\n\t\tconst distribution = shadowPass.uv( add( screenCoordinate.xy, vec2( uvOffset, 0 ).mul( radius ) ).div( size ) );\n\t\tmean.addAssign( distribution.x );\n\t\tsquaredMean.addAssign( add( distribution.y.mul( distribution.y ), distribution.x.mul( distribution.x ) ) );\n\n\t} );\n\n\tmean.divAssign( samples );\n\tsquaredMean.divAssign( samples );\n\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\n\treturn vec2( mean, std_dev );\n\n} );\n\nconst _shadowFilterLib = [ BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, VSMShadowMapNode ];\n\n//\n\nlet _overrideMaterial = null;\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nclass AnalyticLightNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'AnalyticLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper();\n\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t\tthis.light = light;\n\n\t\tthis.color = new Color();\n\t\tthis.colorNode = uniform( this.color ).setGroup( renderGroup );\n\n\t\tthis.baseColorNode = null;\n\n\t\tthis.shadowMap = null;\n\t\tthis.shadowNode = null;\n\t\tthis.shadowColorNode = null;\n\n\t\tthis.vsmShadowMapVertical = null;\n\t\tthis.vsmShadowMapHorizontal = null;\n\n\t\tthis.vsmMaterialVertical = null;\n\t\tthis.vsmMaterialHorizontal = null;\n\n\t\tthis.isAnalyticLightNode = true;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn hash( super.getCacheKey(), this.light.id, this.light.castShadow ? 1 : 0 );\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.light.uuid;\n\n\t}\n\n\tsetupShadow( builder ) {\n\n\t\tconst { object, renderer } = builder;\n\n\t\tif ( renderer.shadowMap.enabled === false ) return;\n\n\t\tlet shadowColorNode = this.shadowColorNode;\n\n\t\tif ( shadowColorNode === null ) {\n\n\t\t\tif ( _overrideMaterial === null ) {\n\n\t\t\t\t_overrideMaterial = new NodeMaterial();\n\t\t\t\t_overrideMaterial.fragmentNode = vec4( 0, 0, 0, 1 );\n\t\t\t\t_overrideMaterial.isShadowNodeMaterial = true; // Use to avoid other overrideMaterial override material.fragmentNode unintentionally when using material.shadowNode\n\t\t\t\t_overrideMaterial.name = 'ShadowMaterial';\n\n\t\t\t}\n\n\t\t\tconst shadowMapType = renderer.shadowMap.type;\n\t\t\tconst shadow = this.light.shadow;\n\n\t\t\tconst depthTexture = new DepthTexture();\n\t\t\tdepthTexture.compareFunction = LessCompare;\n\n\t\t\tconst shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );\n\t\t\tshadowMap.depthTexture = depthTexture;\n\n\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t// VSM\n\n\t\t\tif ( shadowMapType === VSMShadowMap ) {\n\n\t\t\t\tdepthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()\n\n\t\t\t\tthis.vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );\n\t\t\t\tthis.vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );\n\n\t\t\t\tconst shadowPassVertical = texture( depthTexture );\n\t\t\t\tconst shadowPassHorizontal = texture( this.vsmShadowMapVertical.texture );\n\n\t\t\t\tconst samples = reference( 'blurSamples', 'float', shadow ).setGroup( renderGroup );\n\t\t\t\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\n\t\t\t\tconst size = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\n\t\t\t\tlet material = this.vsmMaterialVertical || ( this.vsmMaterialVertical = new NodeMaterial() );\n\t\t\t\tmaterial.fragmentNode = VSMPassVertical( { samples, radius, size, shadowPass: shadowPassVertical } ).context( builder.getSharedContext() );\n\t\t\t\tmaterial.name = 'VSMVertical';\n\n\t\t\t\tmaterial = this.vsmMaterialHorizontal || ( this.vsmMaterialHorizontal = new NodeMaterial() );\n\t\t\t\tmaterial.fragmentNode = VSMPassHorizontal( { samples, radius, size, shadowPass: shadowPassHorizontal } ).context( builder.getSharedContext() );\n\t\t\t\tmaterial.name = 'VSMHorizontal';\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst shadowIntensity = reference( 'intensity', 'float', shadow ).setGroup( renderGroup );\n\t\t\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\n\t\t\tconst normalBias = reference( 'normalBias', 'float', shadow ).setGroup( renderGroup );\n\n\t\t\tconst position = object.material.shadowPositionNode || positionWorld;\n\n\t\t\tlet shadowCoord = uniform( shadow.matrix ).setGroup( renderGroup ).mul( position.add( normalWorld.mul( normalBias ) ) );\n\t\t\tshadowCoord = shadowCoord.xyz.div( shadowCoord.w );\n\n\t\t\tlet coordZ = shadowCoord.z.add( bias );\n\n\t\t\tif ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\t\tcoordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Convertion [ 0, 1 ] to [ - 1, 1 ]\n\n\t\t\t}\n\n\t\t\tshadowCoord = vec3(\n\t\t\t\tshadowCoord.x,\n\t\t\t\tshadowCoord.y.oneMinus(), // follow webgpu standards\n\t\t\t\tcoordZ\n\t\t\t);\n\n\t\t\tconst frustumTest = shadowCoord.x.greaterThanEqual( 0 )\n\t\t\t\t.and( shadowCoord.x.lessThanEqual( 1 ) )\n\t\t\t\t.and( shadowCoord.y.greaterThanEqual( 0 ) )\n\t\t\t\t.and( shadowCoord.y.lessThanEqual( 1 ) )\n\t\t\t\t.and( shadowCoord.z.lessThanEqual( 1 ) );\n\n\t\t\t//\n\n\t\t\tconst filterFn = shadow.filterNode || _shadowFilterLib[ renderer.shadowMap.type ] || null;\n\n\t\t\tif ( filterFn === null ) {\n\n\t\t\t\tthrow new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );\n\n\t\t\t}\n\n\t\t\tconst shadowColor = texture( shadowMap.texture, shadowCoord );\n\t\t\tconst shadowNode = frustumTest.select( filterFn( { depthTexture: ( shadowMapType === VSMShadowMap ) ? this.vsmShadowMapHorizontal.texture : depthTexture, shadowCoord, shadow } ), float( 1 ) );\n\n\t\t\tthis.shadowMap = shadowMap;\n\t\t\tthis.light.shadow.map = shadowMap;\n\n\t\t\tthis.shadowNode = shadowNode;\n\t\t\tthis.shadowColorNode = shadowColorNode = this.colorNode.mul( mix( 1, shadowNode.rgb.mix( shadowColor, 1 ), shadowIntensity.mul( shadowColor.a ) ) );\n\n\t\t\tthis.baseColorNode = this.colorNode;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.colorNode = shadowColorNode;\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.colorNode = this.baseColorNode || this.colorNode;\n\n\t\tif ( this.light.castShadow ) {\n\n\t\t\tif ( builder.object.receiveShadow ) {\n\n\t\t\t\tthis.setupShadow( builder );\n\n\t\t\t}\n\n\t\t} else if ( this.shadowNode !== null ) {\n\n\t\t\tthis.disposeShadow();\n\n\t\t}\n\n\t}\n\n\tupdateShadow( frame ) {\n\n\t\tconst { shadowMap, light } = this;\n\t\tconst { renderer, scene, camera } = frame;\n\n\t\tconst shadowType = renderer.shadowMap.type;\n\n\t\tconst depthVersion = shadowMap.depthTexture.version;\n\t\tthis._depthVersionCached = depthVersion;\n\n\t\tconst currentOverrideMaterial = scene.overrideMaterial;\n\n\t\tscene.overrideMaterial = _overrideMaterial;\n\n\t\tshadowMap.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\n\n\t\tlight.shadow.updateMatrices( light );\n\t\tlight.shadow.camera.layers.mask = camera.layers.mask;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\n\n\t\trenderer.setRenderObjectFunction( ( object, ...params ) => {\n\n\t\t\tif ( object.castShadow === true || ( object.receiveShadow && shadowType === VSMShadowMap ) ) {\n\n\t\t\t\trenderer.renderObject( object, ...params );\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderer.setRenderTarget( shadowMap );\n\t\trenderer.render( scene, light.shadow.camera );\n\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\n\n\t\t// vsm blur pass\n\n\t\tif ( light.isPointLight !== true && shadowType === VSMShadowMap ) {\n\n\t\t\tthis.vsmPass( frame, light );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\tscene.overrideMaterial = currentOverrideMaterial;\n\n\t}\n\n\tvsmPass( frame, light ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tthis.vsmShadowMapVertical.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\n\t\tthis.vsmShadowMapHorizontal.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\n\n\t\trenderer.setRenderTarget( this.vsmShadowMapVertical );\n\t\t_quadMesh.material = this.vsmMaterialVertical;\n\t\t_quadMesh.render( renderer );\n\n\t\trenderer.setRenderTarget( this.vsmShadowMapHorizontal );\n\t\t_quadMesh.material = this.vsmMaterialHorizontal;\n\t\t_quadMesh.render( renderer );\n\n\t}\n\n\tdisposeShadow() {\n\n\t\tthis.shadowMap.dispose();\n\t\tthis.shadowMap = null;\n\n\t\tif ( this.vsmShadowMapVertical !== null ) {\n\n\t\t\tthis.vsmShadowMapVertical.dispose();\n\t\t\tthis.vsmShadowMapVertical = null;\n\n\t\t\tthis.vsmMaterialVertical.dispose();\n\t\t\tthis.vsmMaterialVertical = null;\n\n\t\t}\n\n\t\tif ( this.vsmShadowMapHorizontal !== null ) {\n\n\t\t\tthis.vsmShadowMapHorizontal.dispose();\n\t\t\tthis.vsmShadowMapHorizontal = null;\n\n\t\t\tthis.vsmMaterialHorizontal.dispose();\n\t\t\tthis.vsmMaterialHorizontal = null;\n\n\t\t}\n\n\t\tthis.shadowNode = null;\n\t\tthis.shadowColorNode = null;\n\n\t\tthis.baseColorNode = null;\n\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst shadow = this.light.shadow;\n\n\t\tconst needsUpdate = shadow.needsUpdate || shadow.autoUpdate;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tthis.updateShadow( frame );\n\n\t\t\tif ( this.shadowMap.depthTexture.version === this._depthVersionCached ) {\n\n\t\t\t\tshadow.needsUpdate = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tconst { light } = this;\n\n\t\tthis.color.copy( light.color ).multiplyScalar( light.intensity );\n\n\t}\n\n}\n\nexport default AnalyticLightNode;\n", "import { Fn } from '../tsl/TSLBase.js';\n\nexport const getDistanceAttenuation = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { lightDistance, cutoffDistance, decayExponent } = inputs;\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\tconst distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();\n\n\treturn cutoffDistance.greaterThan( 0 ).select(\n\t\tdistanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),\n\t\tdistanceFalloff\n\t);\n\n} ); // validated\n", "import { uniform } from '../core/UniformNode.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { cameraViewMatrix } from './Camera.js';\n\nlet uniformsLib;\n\nfunction getLightData( light ) {\n\n\tuniformsLib = uniformsLib || new WeakMap();\n\n\tlet uniforms = uniformsLib.get( light );\n\n\tif ( uniforms === undefined ) uniformsLib.set( light, uniforms = {} );\n\n\treturn uniforms;\n\n}\n\nexport function lightPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.position || ( data.position = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.matrixWorld ) ) );\n\n}\n\nexport function lightTargetPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.targetPosition || ( data.targetPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.target.matrixWorld ) ) );\n\n}\n\nexport function lightViewPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.viewPosition || ( data.viewPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => {\n\n\t\tself.value = self.value || new Vector3();\n\t\tself.value.setFromMatrixPosition( light.matrixWorld );\n\n\t\tself.value.applyMatrix4( camera.matrixWorldInverse );\n\n\t} ) );\n\n}\n\nexport const lightTargetDirection = ( light ) => cameraViewMatrix.transformDirection( lightPosition( light ).sub( lightTargetPosition( light ) ) );\n", "import { Fn } from '../tsl/TSLBase.js';\n\nexport const hash = /*@__PURE__*/ Fn( ( [ seed ] ) => {\n\n\t// Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\n\n\tconst state = seed.toUint().mul( 747796405 ).add( 2891336453 );\n\tconst word = state.shiftRight( state.shiftRight( 28 ).add( 4 ) ).bitXor( state ).mul( 277803737 );\n\tconst result = word.shiftRight( 22 ).bitXor( word );\n\n\treturn result.toFloat().mul( 1 / 2 ** 32 ); // Convert to range [0, 1)\n\n} );\n", "// https://github.com/cabbibo/glsl-tri-noise-3d\n\nimport { Loop } from '../utils/LoopNode.js';\nimport { float, vec3, Fn } from '../tsl/TSLBase.js';\n\nexport const tri = /*@__PURE__*/ Fn( ( [ x ] ) => {\n\n\treturn x.fract().sub( .5 ).abs();\n\n} ).setLayout( {\n\tname: 'tri',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nexport const tri3 = /*@__PURE__*/ Fn( ( [ p ] ) => {\n\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'tri3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const triNoise3D = /*@__PURE__*/ Fn( ( [ p_immutable, spd, time ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst z = float( 1.4 ).toVar();\n\tconst rz = float( 0.0 ).toVar();\n\tconst bp = vec3( p ).toVar();\n\n\tLoop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\n\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( spd ) ) ) );\n\t\tbp.mulAssign( 1.8 );\n\t\tz.mulAssign( 1.5 );\n\t\tp.mulAssign( 1.2 );\n\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\n\t\trz.addAssign( t.div( z ) );\n\t\tbp.addAssign( 0.14 );\n\n\t} );\n\n\treturn rz;\n\n} ).setLayout( {\n\tname: 'triNoise3D',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'spd', type: 'float' },\n\t\t{ name: 'time', type: 'float' }\n\t]\n} );\n", "import { nodeObject } from '../tsl/TSLBase.js';\n\nexport const directionToColor = ( node ) => nodeObject( node ).mul( 0.5 ).add( 0.5 );\nexport const colorToDirection = ( node ) => nodeObject( node ).mul( 2.0 ).sub( 1 );\n", "import { Fn, vec2 } from '../tsl/TSLBase.js';\nimport { rotate } from './RotateNode.js';\n\nexport const rotateUV = /*@__PURE__*/ Fn( ( [ uv, rotation, center = vec2( 0.5 ) ] ) => {\n\n\treturn rotate( uv.sub( center ), rotation ).add( center );\n\n} );\n\nexport const spherizeUV = /*@__PURE__*/ Fn( ( [ uv, strength, center = vec2( 0.5 ) ] ) => {\n\n\tconst delta = uv.sub( center );\n\tconst delta2 = delta.dot( delta );\n\tconst delta4 = delta2.mul( delta2 );\n\tconst deltaOffset = delta4.mul( strength );\n\n\treturn uv.add( delta.mul( deltaOffset ) );\n\n} );\n", "import { modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { cameraViewMatrix, cameraProjectionMatrix } from '../accessors/Camera.js';\nimport { positionLocal } from '../accessors/Position.js';\nimport { Fn, defined } from '../tsl/TSLBase.js';\n\nexport const billboarding = /*@__PURE__*/ Fn( ( { position = null, horizontal = true, vertical = false } ) => {\n\n\tlet worldMatrix;\n\n\tif ( position !== null ) {\n\n\t\tworldMatrix = modelWorldMatrix.toVar();\n\t\tworldMatrix[ 3 ][ 0 ] = position.x;\n\t\tworldMatrix[ 3 ][ 1 ] = position.y;\n\t\tworldMatrix[ 3 ][ 2 ] = position.z;\n\n\t} else {\n\n\t\tworldMatrix = modelWorldMatrix;\n\n\t}\n\n\tconst modelViewMatrix = cameraViewMatrix.mul( worldMatrix );\n\n\tif ( defined( horizontal ) ) {\n\n\t\tmodelViewMatrix[ 0 ][ 0 ] = modelWorldMatrix[ 0 ].length();\n\t\tmodelViewMatrix[ 0 ][ 1 ] = 0;\n\t\tmodelViewMatrix[ 0 ][ 2 ] = 0;\n\n\t}\n\n\tif ( defined( vertical ) ) {\n\n\t\tmodelViewMatrix[ 1 ][ 0 ] = 0;\n\t\tmodelViewMatrix[ 1 ][ 1 ] = modelWorldMatrix[ 1 ].length();\n\t\tmodelViewMatrix[ 1 ][ 2 ] = 0;\n\n\t}\n\n\tmodelViewMatrix[ 2 ][ 0 ] = 0;\n\tmodelViewMatrix[ 2 ][ 1 ] = 0;\n\tmodelViewMatrix[ 2 ][ 2 ] = 1;\n\n\treturn cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\n\n} );\n", "import { Fn } from '../tsl/TSLBase.js';\nimport { screenUV } from '../display/ScreenNode.js';\nimport { viewportDepthTexture } from '../display/ViewportDepthTextureNode.js';\nimport { linearDepth } from '../display/ViewportDepthNode.js';\n\nexport const viewportSafeUV = /*@__PURE__*/ Fn( ( [ uv = null ] ) => {\n\n\tconst depth = linearDepth();\n\tconst depthDiff = linearDepth( viewportDepthTexture( uv ) ).sub( depth );\n\tconst finalUV = depthDiff.lessThan( 0 ).select( screenUV, uv );\n\n\treturn finalUV;\n\n} );\n", "import { add, mul, div } from '../math/OperatorNode.js';\nimport { floor, ceil, fract, pow } from '../math/MathNode.js';\nimport { Fn, float, vec2, vec4, int } from '../tsl/TSLBase.js';\n\n// Mipped Bicubic Texture Filtering by N8\n// https://www.shadertoy.com/view/Dl2SDW\n\nconst bC = 1.0 / 6.0;\n\nconst w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );\n\nconst w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );\n\nconst w2 = ( a ) => mul( bC, mul( a, mul( a, mul( - 3.0, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );\n\nconst w3 = ( a ) => mul( bC, pow( a, 3 ) );\n\nconst g0 = ( a ) => w0( a ).add( w1( a ) );\n\nconst g1 = ( a ) => w2( a ).add( w3( a ) );\n\n// h0 and h1 are the two offset functions\nconst h0 = ( a ) => add( - 1.0, w1( a ).div( w0( a ).add( w1( a ) ) ) );\n\nconst h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );\n\nconst bicubic = ( textureNode, texelSize, lod ) => {\n\n\tconst uv = textureNode.uvNode;\n\tconst uvScaled = mul( uv, texelSize.zw ).add( 0.5 );\n\n\tconst iuv = floor( uvScaled );\n\tconst fuv = fract( uvScaled );\n\n\tconst g0x = g0( fuv.x );\n\tconst g1x = g1( fuv.x );\n\tconst h0x = h0( fuv.x );\n\tconst h1x = h1( fuv.x );\n\tconst h0y = h0( fuv.y );\n\tconst h1y = h1( fuv.y );\n\n\tconst p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\n\n\tconst a = g0( fuv.y ).mul( add( g0x.mul( textureNode.uv( p0 ).level( lod ) ), g1x.mul( textureNode.uv( p1 ).level( lod ) ) ) );\n\tconst b = g1( fuv.y ).mul( add( g0x.mul( textureNode.uv( p2 ).level( lod ) ), g1x.mul( textureNode.uv( p3 ).level( lod ) ) ) );\n\n\treturn a.add( b );\n\n};\n\nexport const textureBicubic = /*@__PURE__*/ Fn( ( [ textureNode, lodNode = float( 3 ) ] ) => {\n\n\tconst fLodSize = vec2( textureNode.size( int( lodNode ) ) );\n\tconst cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );\n\tconst fLodSizeInv = div( 1.0, fLodSize );\n\tconst cLodSizeInv = div( 1.0, cLodSize );\n\tconst fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );\n\tconst cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );\n\n\treturn fract( lodNode ).mix( fSample, cSample );\n\n} );\n", "import TempNode from '../core/TempNode.js';\nimport { modelViewMatrix } from './ModelNode.js';\nimport { positionLocal, positionPrevious } from './Position.js';\nimport { nodeImmutable } from '../tsl/TSLBase.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { sub } from '../math/OperatorNode.js';\nimport { cameraProjectionMatrix } from './Camera.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\n\nconst _objectData = new WeakMap();\n\nclass VelocityNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'VelocityNode';\n\n\t}\n\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\t\tthis.updateAfterType = NodeUpdateType.OBJECT;\n\n\t\tthis.previousModelWorldMatrix = uniform( new Matrix4() );\n\t\tthis.previousProjectionMatrix = uniform( new Matrix4() ).setGroup( renderGroup );\n\t\tthis.previousCameraViewMatrix = uniform( new Matrix4() );\n\n\t}\n\n\tupdate( { frameId, camera, object } ) {\n\n\t\tconst previousModelMatrix = getPreviousMatrix( object );\n\n\t\tthis.previousModelWorldMatrix.value.copy( previousModelMatrix );\n\n\t\t//\n\n\t\tconst cameraData = getData( camera );\n\n\t\tif ( cameraData.frameId !== frameId ) {\n\n\t\t\tcameraData.frameId = frameId;\n\n\t\t\tif ( cameraData.previousProjectionMatrix === undefined ) {\n\n\t\t\t\tcameraData.previousProjectionMatrix = new Matrix4();\n\t\t\t\tcameraData.previousCameraViewMatrix = new Matrix4();\n\n\t\t\t\tcameraData.currentProjectionMatrix = new Matrix4();\n\t\t\t\tcameraData.currentCameraViewMatrix = new Matrix4();\n\n\t\t\t\tcameraData.previousProjectionMatrix.copy( camera.projectionMatrix );\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( camera.matrixWorldInverse );\n\n\t\t\t} else {\n\n\t\t\t\tcameraData.previousProjectionMatrix.copy( cameraData.currentProjectionMatrix );\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( cameraData.currentCameraViewMatrix );\n\n\t\t\t}\n\n\t\t\tcameraData.currentProjectionMatrix.copy( camera.projectionMatrix );\n\t\t\tcameraData.currentCameraViewMatrix.copy( camera.matrixWorldInverse );\n\n\t\t\tthis.previousProjectionMatrix.value.copy( cameraData.previousProjectionMatrix );\n\t\t\tthis.previousCameraViewMatrix.value.copy( cameraData.previousCameraViewMatrix );\n\n\t\t}\n\n\t}\n\n\tupdateAfter( { object } ) {\n\n\t\tgetPreviousMatrix( object ).copy( object.matrixWorld );\n\n\t}\n\n\tsetup( /*builder*/ ) {\n\n\t\tconst previousModelViewMatrix = this.previousCameraViewMatrix.mul( this.previousModelWorldMatrix );\n\n\t\tconst clipPositionCurrent = cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\n\t\tconst clipPositionPrevious = this.previousProjectionMatrix.mul( previousModelViewMatrix ).mul( positionPrevious );\n\n\t\tconst ndcPositionCurrent = clipPositionCurrent.xy.div( clipPositionCurrent.w );\n\t\tconst ndcPositionPrevious = clipPositionPrevious.xy.div( clipPositionPrevious.w );\n\n\t\tconst velocity = sub( ndcPositionCurrent, ndcPositionPrevious );\n\n\t\treturn velocity;\n\n\t}\n\n}\n\nfunction getData( object ) {\n\n\tlet objectData = _objectData.get( object );\n\n\tif ( objectData === undefined ) {\n\n\t\tobjectData = {};\n\t\t_objectData.set( object, objectData );\n\n\t}\n\n\treturn objectData;\n\n}\n\nfunction getPreviousMatrix( object, index = 0 ) {\n\n\tconst objectData = getData( object );\n\n\tlet matrix = objectData[ index ];\n\n\tif ( matrix === undefined ) {\n\n\t\tobjectData[ index ] = matrix = new Matrix4();\n\n\t}\n\n\treturn matrix;\n\n}\n\nexport default VelocityNode;\n\nexport const velocity = /*@__PURE__*/ nodeImmutable( VelocityNode );\n", "import { Fn } from '../tsl/TSLBase.js';\nimport { mix, min, step } from '../math/MathNode.js';\n\nexport const burn = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min( 1.0, base.oneMinus().div( blend ) ).oneMinus();\n\n} ).setLayout( {\n\tname: 'burnBlend',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const dodge = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min( base.div( blend.oneMinus() ), 1.0 );\n\n} ).setLayout( {\n\tname: 'dodgeBlend',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const screen = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn base.oneMinus().mul( blend.oneMinus() ).oneMinus();\n\n} ).setLayout( {\n\tname: 'screenBlend',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const overlay = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn mix( base.mul( 2.0 ).mul( blend ), base.oneMinus().mul( 2.0 ).mul( blend.oneMinus() ).oneMinus(), step( 0.5, base ) );\n\n} ).setLayout( {\n\tname: 'overlayBlend',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n", "import { float, int, Fn } from '../tsl/TSLBase.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { uv } from '../accessors/UV.js';\n\nexport const motionBlur = /*@__PURE__*/ Fn( ( [ inputNode, velocity, numSamples = int( 16 ) ] ) => {\n\n\tconst sampleColor = ( uv ) => inputNode.uv( uv );\n\n\tconst uvs = uv();\n\n\tconst colorResult = sampleColor( uvs ).toVar();\n\tconst fSamples = float( numSamples );\n\n\tLoop( { start: int( 1 ), end: numSamples, type: 'int', condition: '<=' }, ( { i } ) => {\n\n\t\tconst offset = velocity.mul( float( i ).div( fSamples.sub( 1 ) ).sub( 0.5 ) );\n\t\tcolorResult.addAssign( sampleColor( uvs.add( offset ) ) );\n\n\t} );\n\n\tcolorResult.divAssign( fSamples );\n\n\treturn colorResult;\n\n} );\n", "import { float, Fn, vec3, vec4 } from '../tsl/TSLBase.js';\nimport { min, max, mix } from '../math/MathNode.js';\nimport { luminance } from './ColorAdjustment.js';\n\nexport const bleach = /*@__PURE__*/ Fn( ( [ color, opacity = 1 ] ) => {\n\n\tconst base = color;\n\tconst lum = luminance( base.rgb );\n\tconst blend = vec3( lum );\n\n\tconst L = min( 1.0, max( 0.0, float( 10.0 ).mul( lum.sub( 0.45 ) ) ) );\n\n\tconst result1 = blend.mul( base.rgb ).mul( 2.0 );\n\tconst result2 = float( 2.0 ).mul( blend.oneMinus() ).mul( base.rgb.oneMinus() ).oneMinus();\n\n\tconst newColor = mix( result1, result2, L );\n\n\tconst A2 = base.a.mul( opacity );\n\n\tconst mixRGB = A2.mul( newColor.rgb );\n\n\tmixRGB.addAssign( base.rgb.mul( A2.oneMinus() ) );\n\n\treturn vec4( mixRGB, base.a );\n\n} );\n", "import { Fn, vec3, vec4 } from '../tsl/TSLBase.js';\nimport { dot } from '../math/MathNode.js';\n\nexport const sepia = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst c = vec3( color );\n\n\t// https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/sepia.js\n\n\treturn vec4(\n\t\tdot( c, vec3( 0.393, 0.769, 0.189 ) ),\n\t\tdot( c, vec3( 0.349, 0.686, 0.168 ) ),\n\t\tdot( c, vec3( 0.272, 0.534, 0.131 ) ),\n\t\tcolor.a\n\t);\n\n} );\n", "import { mix } from '../math/MathNode.js';\nimport { Fn } from '../tsl/TSLBase.js';\n\nexport const sRGBToLinearSRGB = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );\n\tconst b = color.mul( 0.0773993808 );\n\tconst factor = color.lessThanEqual( 0.04045 );\n\n\tconst rgbResult = mix( a, b, factor );\n\n\treturn rgbResult;\n\n} ).setLayout( {\n\tname: 'sRGBToLinearSRGB',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n\nexport const linearSRGBTosRGB = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );\n\tconst b = color.mul( 12.92 );\n\tconst factor = color.lessThanEqual( 0.0031308 );\n\n\tconst rgbResult = mix( a, b, factor );\n\n\treturn rgbResult;\n\n} ).setLayout( {\n\tname: 'linearSRGBTosRGB',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n", "import { Fn, float, mat3, vec3, If } from '../tsl/TSLBase.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { clamp, log2, max, min, pow, mix } from '../math/MathNode.js';\nimport { mul, sub, div } from '../math/OperatorNode.js';\n\n// exposure only\n\nexport const linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\treturn color.mul( exposure ).clamp();\n\n} ).setLayout( {\n\tname: 'linearToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\n\nexport const reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tcolor = color.mul( exposure );\n\n\treturn color.div( color.add( 1.0 ) ).clamp();\n\n} ).setLayout( {\n\tname: 'reinhardToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\n\nexport const cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor = color.mul( exposure );\n\tcolor = color.sub( 0.004 ).max( 0.0 );\n\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\n\n\treturn a.div( b ).pow( 2.2 );\n\n} ).setLayout( {\n\tname: 'cineonToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n\nconst RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\n\n\treturn a.div( b );\n\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n\nexport const acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst ACESInputMat = mat3(\n\t\t0.59719, 0.35458, 0.04823,\n\t\t0.07600, 0.90834, 0.01566,\n\t\t0.02840, 0.13383, 0.83777\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst ACESOutputMat = mat3(\n\t\t1.60475, - 0.53108, - 0.07367,\n\t\t- 0.10208, 1.10813, - 0.00605,\n\t\t- 0.00327, - 0.07276, 1.07602\n\t);\n\n\tcolor = color.mul( exposure ).div( 0.6 );\n\n\tcolor = ACESInputMat.mul( color );\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat.mul( color );\n\n\t// Clamp to [0, 1]\n\treturn color.clamp();\n\n} ).setLayout( {\n\tname: 'acesFilmicToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\nconst LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\n\nconst agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = vec3( x_immutable ).toVar();\n\tconst x2 = vec3( x.mul( x ) ).toVar();\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\n\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\n\n} );\n\nexport const agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst colortone = vec3( color ).toVar();\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\n\tconst AgxMinEv = float( - 12.47393 );\n\tconst AgxMaxEv = float( 4.026069 );\n\tcolortone.mulAssign( exposure );\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\n\tcolortone.assign( max( colortone, 1e-10 ) );\n\tcolortone.assign( log2( colortone ) );\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\n\treturn colortone;\n\n} ).setLayout( {\n\tname: 'agxToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// https://modelviewer.dev/examples/tone-mapping\n\nexport const neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst StartCompression = float( 0.8 - 0.04 );\n\tconst Desaturation = float( 0.15 );\n\n\tcolor = color.mul( exposure );\n\n\tconst x = min( color.r, min( color.g, color.b ) );\n\tconst offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\n\n\tcolor.subAssign( offset );\n\n\tconst peak = max( color.r, max( color.g, color.b ) );\n\n\tIf( peak.lessThan( StartCompression ), () => {\n\n\t\treturn color;\n\n\t} );\n\n\tconst d = sub( 1, StartCompression );\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\n\tcolor.mulAssign( newPeak.div( peak ) );\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\n\n\treturn mix( color, vec3( newPeak ), g );\n\n} ).setLayout( {\n\tname: 'neutralToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n", "import Node from '../core/Node.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\nclass ComputeBuiltinNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ComputeBuiltinNode';\n\n\t}\n\n\tconstructor( builtinName, nodeType ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis._builtinName = builtinName;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.getBuiltinName( builder );\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.nodeType;\n\n\t}\n\n\tsetBuiltinName( builtinName ) {\n\n\t\tthis._builtinName = builtinName;\n\n\t\treturn this;\n\n\t}\n\n\tgetBuiltinName( /*builder*/ ) {\n\n\t\treturn this._builtinName;\n\n\t}\n\n\thasBuiltin( builder ) {\n\n\t\tbuilder.hasBuiltin( this._builtinName );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst builtinName = this.getBuiltinName( builder );\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( builder.shaderStage === 'compute' ) {\n\n\t\t\treturn builder.format( builtinName, nodeType, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( `ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage` );\n\t\t\treturn builder.generateConst( nodeType );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.global = this.global;\n\t\tdata._builtinName = this._builtinName;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.global = data.global;\n\t\tthis._builtinName = data._builtinName;\n\n\t}\n\n}\n\nexport default ComputeBuiltinNode;\n\nconst computeBuiltin = ( name, nodeType ) => nodeObject( new ComputeBuiltinNode( name, nodeType ) );\n\nexport const numWorkgroups = /*@__PURE__*/ computeBuiltin( 'numWorkgroups', 'uvec3' );\nexport const workgroupId = /*@__PURE__*/ computeBuiltin( 'workgroupId', 'uvec3' );\nexport const localId = /*@__PURE__*/ computeBuiltin( 'localId', 'uvec3' );\nexport const subgroupSize = /*@__PURE__*/ computeBuiltin( 'subgroupSize', 'uint' );\n\n", "import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLCore.js';\n\nclass BarrierNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { scope } = this;\n\t\tconst { renderer } = builder;\n\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\n\n\t\t\tbuilder.addFlowCode( `\\t// ${scope}Barrier \\n` );\n\n\t\t} else {\n\n\t\t\tbuilder.addLineFlowCode( `${scope}Barrier()`, this );\n\n\t\t}\n\n\t}\n\n}\n\nexport default BarrierNode;\n\nconst barrier = nodeProxy( BarrierNode );\n\nexport const workgroupBarrier = () => barrier( 'workgroup' ).append();\nexport const storageBarrier = () => barrier( 'storage' ).append();\nexport const textureBarrier = () => barrier( 'texture' ).append();\n\n", "import TempNode from '../core/TempNode.js';\nimport { nodeProxy } from '../tsl/TSLCore.js';\n\nclass AtomicFunctionNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'AtomicFunctionNode';\n\n\t}\n\n\tconstructor( method, pointerNode, valueNode, storeNode = null ) {\n\n\t\tsuper( 'uint' );\n\n\t\tthis.method = method;\n\n\t\tthis.pointerNode = pointerNode;\n\t\tthis.valueNode = valueNode;\n\t\tthis.storeNode = storeNode;\n\n\t}\n\n\tgetInputType( builder ) {\n\n\t\treturn this.pointerNode.getNodeType( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getInputType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst method = this.method;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst inputType = this.getInputType( builder );\n\n\t\tconst a = this.pointerNode;\n\t\tconst b = this.valueNode;\n\n\t\tconst params = [];\n\n\t\tparams.push( `&${ a.build( builder, inputType ) }` );\n\t\tparams.push( b.build( builder, inputType ) );\n\n\t\tconst methodSnippet = `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`;\n\n\t\tif ( this.storeNode !== null ) {\n\n\t\t\tconst varSnippet = this.storeNode.build( builder, inputType );\n\n\t\t\tbuilder.addLineFlowCode( `${varSnippet} = ${methodSnippet}`, this );\n\n\t\t} else {\n\n\t\t\tbuilder.addLineFlowCode( methodSnippet, this );\n\n\t\t}\n\n\t}\n\n}\n\nAtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';\nAtomicFunctionNode.ATOMIC_STORE = 'atomicStore';\nAtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';\nAtomicFunctionNode.ATOMIC_SUB = 'atomicSub';\nAtomicFunctionNode.ATOMIC_MAX = 'atomicMax';\nAtomicFunctionNode.ATOMIC_MIN = 'atomicMin';\nAtomicFunctionNode.ATOMIC_AND = 'atomicAnd';\nAtomicFunctionNode.ATOMIC_OR = 'atomicOr';\nAtomicFunctionNode.ATOMIC_XOR = 'atomicXor';\n\nexport default AtomicFunctionNode;\n\nconst atomicNode = nodeProxy( AtomicFunctionNode );\n\nexport const atomicFunc = ( method, pointerNode, valueNode, storeNode ) => {\n\n\tconst node = atomicNode( method, pointerNode, valueNode, storeNode );\n\tnode.append();\n\n\treturn node;\n\n};\n\nexport const atomicStore = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode, storeNode );\nexport const atomicAdd = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode, storeNode );\nexport const atomicSub = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode, storeNode );\nexport const atomicMax = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode, storeNode );\nexport const atomicMin = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode, storeNode );\nexport const atomicAnd = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode, storeNode );\nexport const atomicOr = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode, storeNode );\nexport const atomicXor = ( pointerNode, valueNode, storeNode = null ) => atomicFunc( AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode, storeNode );\n", "import TempNode from '../core/TempNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { textureCubeUV } from './PMREMUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy, vec3 } from '../tsl/TSLBase.js';\n\nimport { WebGLCoordinateSystem } from '../../constants.js';\nimport { Texture } from '../../textures/Texture.js';\n\nlet _generator = null;\n\nconst _cache = new WeakMap();\n\nfunction _generateCubeUVSize( imageHeight ) {\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction _getPMREMFromTexture( texture ) {\n\n\tlet cacheTexture = _cache.get( texture );\n\n\tconst pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : - 1;\n\n\tif ( pmremVersion !== texture.pmremVersion ) {\n\n\t\tconst image = texture.image;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( isCubeMapReady( image ) ) {\n\n\t\t\t\tcacheTexture = _generator.fromCubemap( texture, cacheTexture );\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\n\t\t} else {\n\n\t\t\tif ( isEquirectangularMapReady( image ) ) {\n\n\t\t\t\tcacheTexture = _generator.fromEquirectangular( texture, cacheTexture );\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcacheTexture.pmremVersion = texture.pmremVersion;\n\n\t\t_cache.set( texture, cacheTexture );\n\n\t}\n\n\treturn cacheTexture.texture;\n\n}\n\nclass PMREMNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PMREMNode';\n\n\t}\n\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis._value = value;\n\t\tthis._pmrem = null;\n\n\t\tthis.uvNode = uvNode;\n\t\tthis.levelNode = levelNode;\n\n\t\tthis._generator = null;\n\n\t\tconst defaultTexture = new Texture();\n\t\tdefaultTexture.isRenderTargetTexture = true;\n\n\t\tthis._texture = texture( defaultTexture );\n\n\t\tthis._width = uniform( 0 );\n\t\tthis._height = uniform( 0 );\n\t\tthis._maxMip = uniform( 0 );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tset value( value ) {\n\n\t\tthis._value = value;\n\t\tthis._pmrem = null;\n\n\t}\n\n\tget value() {\n\n\t\treturn this._value;\n\n\t}\n\n\tupdateFromTexture( texture ) {\n\n\t\tconst cubeUVSize = _generateCubeUVSize( texture.image.height );\n\n\t\tthis._texture.value = texture;\n\t\tthis._width.value = cubeUVSize.texelWidth;\n\t\tthis._height.value = cubeUVSize.texelHeight;\n\t\tthis._maxMip.value = cubeUVSize.maxMip;\n\n\t}\n\n\tupdateBefore() {\n\n\t\tlet pmrem = this._pmrem;\n\n\t\tconst pmremVersion = pmrem ? pmrem.pmremVersion : - 1;\n\t\tconst texture = this._value;\n\n\t\tif ( pmremVersion !== texture.pmremVersion ) {\n\n\t\t\tif ( texture.isPMREMTexture === true ) {\n\n\t\t\t\tpmrem = texture;\n\n\t\t\t} else {\n\n\t\t\t\tpmrem = _getPMREMFromTexture( texture );\n\n\t\t\t}\n\n\t\t\tif ( pmrem !== null ) {\n\n\t\t\t\tthis._pmrem = pmrem;\n\n\t\t\t\tthis.updateFromTexture( pmrem );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( _generator === null ) {\n\n\t\t\t_generator = builder.createPMREMGenerator();\n\n\t\t}\n\n\t\t//\n\n\t\tthis.updateBefore( builder );\n\n\t\t//\n\n\t\tlet uvNode = this.uvNode;\n\n\t\tif ( uvNode === null && builder.context.getUV ) {\n\n\t\t\tuvNode = builder.context.getUV( this );\n\n\t\t}\n\n\t\t//\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.renderer.coordinateSystem === WebGLCoordinateSystem && texture.isPMREMTexture !== true && texture.isRenderTargetTexture === true ) {\n\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\n\n\t\t}\n\n\t\t//\n\n\t\tlet levelNode = this.levelNode;\n\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\n\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\n\n\t\t}\n\n\t\t//\n\n\t\treturn textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );\n\n\t}\n\n}\n\nexport default PMREMNode;\n\nfunction isCubeMapReady( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\tlet count = 0;\n\tconst length = 6;\n\n\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t}\n\n\treturn count === length;\n\n\n}\n\nfunction isEquirectangularMapReady( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\treturn image.height > 0;\n\n}\n\nexport const pmremTexture = /*@__PURE__*/ nodeProxy( PMREMNode );\n", "import { uv } from '../accessors/UV.js';\nimport { Fn } from '../tsl/TSLBase.js';\n\nexport const checker = /*@__PURE__*/ Fn( ( [ coord = uv() ] ) => {\n\n\tconst uv = coord.mul( 2.0 );\n\n\tconst cx = uv.x.floor();\n\tconst cy = uv.y.floor();\n\tconst result = cx.add( cy ).mod( 2.0 );\n\n\treturn result.sign();\n\n} );\n", "// Three.js Transpiler\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\n\nimport { int, uint, float, vec3, bool, uvec3, vec2, vec4, If, Fn } from '../../tsl/TSLBase.js';\nimport { select } from '../../math/ConditionalNode.js';\nimport { sub, mul } from '../../math/OperatorNode.js';\nimport { floor, abs, max, dot, min, sqrt } from '../../math/MathNode.js';\nimport { overloadingFn } from '../../utils/FunctionOverloadingNode.js';\nimport { Loop } from '../../utils/LoopNode.js';\n\n\nexport const mx_select = /*@__PURE__*/ Fn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\n\n\tconst f = float( f_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst b = bool( b_immutable ).toVar();\n\n\treturn select( b, t, f );\n\n} ).setLayout( {\n\tname: 'mx_select',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'b', type: 'bool' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'f', type: 'float' }\n\t]\n} );\n\nexport const mx_negate_if = /*@__PURE__*/ Fn( ( [ val_immutable, b_immutable ] ) => {\n\n\tconst b = bool( b_immutable ).toVar();\n\tconst val = float( val_immutable ).toVar();\n\n\treturn select( b, val.negate(), val );\n\n} ).setLayout( {\n\tname: 'mx_negate_if',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'val', type: 'float' },\n\t\t{ name: 'b', type: 'bool' }\n\t]\n} );\n\nexport const mx_floor = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\n\treturn int( floor( x ) );\n\n} ).setLayout( {\n\tname: 'mx_floor',\n\ttype: 'int',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nexport const mx_floorfrac = /*@__PURE__*/ Fn( ( [ x_immutable, i ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\ti.assign( mx_floor( x ) );\n\n\treturn x.sub( float( i ) );\n\n} );\n\nexport const mx_bilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_bilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_bilerp = /*@__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\n\nexport const mx_trilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = float( v7_immutable ).toVar();\n\tconst v6 = float( v6_immutable ).toVar();\n\tconst v5 = float( v5_immutable ).toVar();\n\tconst v4 = float( v4_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 'v4', type: 'float' },\n\t\t{ name: 'v5', type: 'float' },\n\t\t{ name: 'v6', type: 'float' },\n\t\t{ name: 'v7', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nexport const mx_trilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = vec3( v7_immutable ).toVar();\n\tconst v6 = vec3( v6_immutable ).toVar();\n\tconst v5 = vec3( v5_immutable ).toVar();\n\tconst v4 = vec3( v4_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 'v4', type: 'vec3' },\n\t\t{ name: 'v5', type: 'vec3' },\n\t\t{ name: 'v6', type: 'vec3' },\n\t\t{ name: 'v7', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nexport const mx_trilerp = /*@__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\n\nexport const mx_gradient_float_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_float_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_float = /*@__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\n\nexport const mx_gradient_vec3_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_vec3_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_vec3 = /*@__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\n\nexport const mx_gradient_scale2d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_scale3d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_scale2d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nexport const mx_gradient_scale2d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\n\nexport const mx_gradient_scale3d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nexport const mx_gradient_scale3d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\n\nexport const mx_rotl32 = /*@__PURE__*/ Fn( ( [ x_immutable, k_immutable ] ) => {\n\n\tconst k = int( k_immutable ).toVar();\n\tconst x = uint( x_immutable ).toVar();\n\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\n\n} ).setLayout( {\n\tname: 'mx_rotl32',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'uint' },\n\t\t{ name: 'k', type: 'int' }\n\t]\n} );\n\nexport const mx_bjmix = /*@__PURE__*/ Fn( ( [ a, b, c ] ) => {\n\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\n\tb.addAssign( a );\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\n\tb.addAssign( a );\n\n} );\n\nexport const mx_bjfinal = /*@__PURE__*/ Fn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\n\n\tconst c = uint( c_immutable ).toVar();\n\tconst b = uint( b_immutable ).toVar();\n\tconst a = uint( a_immutable ).toVar();\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\n\n\treturn c;\n\n} ).setLayout( {\n\tname: 'mx_bjfinal',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'a', type: 'uint' },\n\t\t{ name: 'b', type: 'uint' },\n\t\t{ name: 'c', type: 'uint' }\n\t]\n} );\n\nexport const mx_bits_to_01 = /*@__PURE__*/ Fn( ( [ bits_immutable ] ) => {\n\n\tconst bits = uint( bits_immutable ).toVar();\n\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bits_to_01',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'bits', type: 'uint' }\n\t]\n} );\n\nexport const mx_fade = /*@__PURE__*/ Fn( ( [ t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\n\n} ).setLayout( {\n\tname: 'mx_fade',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_hash_int_0 = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 1 ) ).toVar();\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\n\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_0',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 2 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_1',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_2 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 3 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_2',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_3 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\n\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 4 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_3',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_4 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\n\n\tconst yy = int( yy_immutable ).toVar();\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 5 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\tb.addAssign( uint( yy ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_4',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' },\n\t\t{ name: 'yy', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int = /*@__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\n\nexport const mx_hash_vec3_0 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_0',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_vec3_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_1',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_vec3 = /*@__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\n\nexport const mx_perlin_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_perlin_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_perlin_noise_float = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\n\nexport const mx_perlin_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_perlin_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_perlin_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\n\nexport const mx_cell_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nexport const mx_cell_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_cell_noise_float_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_2',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_cell_noise_float_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_3',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nexport const mx_cell_noise_float = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\n\nexport const mx_cell_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_2',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\n\nexport const mx_fractal_noise_float = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = float( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_float',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec3 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = vec3( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec2 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\n\treturn vec2( mx_fractal_noise_float( p, octaves, lacunarity, diminish ), mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec2',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec4 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst c = vec3( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) ).toVar();\n\tconst f = float( mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\n\n\treturn vec4( c, f );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec4',\n\ttype: 'vec4',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_worley_distance_0 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max( abs( diff.x ), abs( diff.y ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_distance_1 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst zoff = int( zoff_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max( max( abs( diff.x ), abs( diff.y ) ), abs( diff.z ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'zoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_distance = /*@__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\n\nexport const mx_worley_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\t\t\tsqdist.assign( min( sqdist, dist ) );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec2_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_0',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\t\t\t\tsqdist.assign( min( sqdist, dist ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_float = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\n\nexport const mx_worley_noise_vec2_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_1',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec2 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\n\nexport const mx_worley_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\n", "// Three.js Transpiler\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\n\nimport { int, float, vec3, If, Fn } from '../../tsl/TSLBase.js';\nimport { add } from '../../math/OperatorNode.js';\nimport { floor, trunc, max, min } from '../../math/MathNode.js';\n\nexport const mx_hsvtorgb = /*@__PURE__*/ Fn( ( [ hsv ] ) => {\n\n\tconst s = hsv.y;\n\tconst v = hsv.z;\n\n\tconst result = vec3().toVar();\n\n\tIf( s.lessThan( 0.0001 ), () => {\n\n\t\tresult.assign( vec3( v, v, v ) );\n\n\t} ).Else( () => {\n\n\t\tlet h = hsv.x;\n\t\th = h.sub( floor( h ) ).mul( 6.0 ).toVar(); // TODO: check what .toVar() is needed in node system cache\n\t\tconst hi = int( trunc( h ) );\n\t\tconst f = h.sub( float( hi ) );\n\t\tconst p = v.mul( s.oneMinus() );\n\t\tconst q = v.mul( s.mul( f ).oneMinus() );\n\t\tconst t = v.mul( s.mul( f.oneMinus() ).oneMinus() );\n\n\t\tIf( hi.equal( int( 0 ) ), () => {\n\n\t\t\tresult.assign( vec3( v, t, p ) );\n\n\t\t} ).ElseIf( hi.equal( int( 1 ) ), () => {\n\n\t\t\tresult.assign( vec3( q, v, p ) );\n\n\t\t} ).ElseIf( hi.equal( int( 2 ) ), () => {\n\n\t\t\tresult.assign( vec3( p, v, t ) );\n\n\t\t} ).ElseIf( hi.equal( int( 3 ) ), () => {\n\n\t\t\tresult.assign( vec3( p, q, v ) );\n\n\t\t} ).ElseIf( hi.equal( int( 4 ) ), () => {\n\n\t\t\tresult.assign( vec3( t, p, v ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tresult.assign( vec3( v, p, q ) );\n\n\t\t} );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hsvtorgb',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hsv', type: 'vec3' }\n\t]\n} );\n\nexport const mx_rgbtohsv = /*@__PURE__*/ Fn( ( [ c_immutable ] ) => {\n\n\tconst c = vec3( c_immutable ).toVar();\n\tconst r = float( c.x ).toVar();\n\tconst g = float( c.y ).toVar();\n\tconst b = float( c.z ).toVar();\n\tconst mincomp = float( min( r, min( g, b ) ) ).toVar();\n\tconst maxcomp = float( max( r, max( g, b ) ) ).toVar();\n\tconst delta = float( maxcomp.sub( mincomp ) ).toVar();\n\tconst h = float().toVar(), s = float().toVar(), v = float().toVar();\n\tv.assign( maxcomp );\n\n\tIf( maxcomp.greaterThan( 0.0 ), () => {\n\n\t\ts.assign( delta.div( maxcomp ) );\n\n\t} ).Else( () => {\n\n\t\ts.assign( 0.0 );\n\n\t} );\n\n\tIf( s.lessThanEqual( 0.0 ), () => {\n\n\t\th.assign( 0.0 );\n\n\t} ).Else( () => {\n\n\t\tIf( r.greaterThanEqual( maxcomp ), () => {\n\n\t\t\th.assign( g.sub( b ).div( delta ) );\n\n\t\t} ).ElseIf( g.greaterThanEqual( maxcomp ), () => {\n\n\t\t\th.assign( add( 2.0, b.sub( r ).div( delta ) ) );\n\n\t\t} ).Else( () => {\n\n\t\t\th.assign( add( 4.0, r.sub( g ).div( delta ) ) );\n\n\t\t} );\n\n\t\th.mulAssign( 1.0 / 6.0 );\n\n\t\tIf( h.lessThan( 0.0 ), () => {\n\n\t\t\th.addAssign( 1.0 );\n\n\t\t} );\n\n\t} );\n\n\treturn vec3( h, s, v );\n\n} ).setLayout( {\n\tname: 'mx_rgbtohsv',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'c', type: 'vec3' }\n\t]\n} );\n", "// Three.js Transpiler\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\n\nimport { bvec3, vec3, Fn } from '../../tsl/TSLBase.js';\nimport { greaterThan } from '../../math/OperatorNode.js';\nimport { max, pow, mix } from '../../math/MathNode.js';\n\nexport const mx_srgb_texture_to_lin_rec709 = /*@__PURE__*/ Fn( ( [ color_immutable ] ) => {\n\n\tconst color = vec3( color_immutable ).toVar();\n\tconst isAbove = bvec3( greaterThan( color, vec3( 0.04045 ) ) ).toVar();\n\tconst linSeg = vec3( color.div( 12.92 ) ).toVar();\n\tconst powSeg = vec3( pow( max( color.add( vec3( 0.055 ) ), vec3( 0.0 ) ).div( 1.055 ), vec3( 2.4 ) ) ).toVar();\n\n\treturn mix( linSeg, powSeg, isAbove );\n\n} ).setLayout( {\n\tname: 'mx_srgb_texture_to_lin_rec709',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n", "import { Fn } from '../../tsl/TSLBase.js';\n\nconst F_Schlick = /*@__PURE__*/ Fn( ( { f0, f90, dotVH } ) => {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tconst fresnel = dotVH.mul( - 5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();\n\n\treturn f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );\n\n} ); // validated\n\nexport default F_Schlick;\n", "import { div } from '../../math/OperatorNode.js';\nimport { EPSILON } from '../../math/MathNode.js';\nimport { Fn } from '../../tsl/TSLBase.js';\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nconst V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {\n\n\tconst a2 = alpha.pow2();\n\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\n\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\n\n} ).setLayout( {\n\tname: 'V_GGX_SmithCorrelated',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alpha', type: 'float' },\n\t\t{ name: 'dotNL', type: 'float' },\n\t\t{ name: 'dotNV', type: 'float' }\n\t]\n} ); // validated\n\nexport default V_GGX_SmithCorrelated;\n", "import { div } from '../../math/OperatorNode.js';\nimport { Fn, vec3 } from '../../tsl/TSLBase.js';\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\nconst V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {\n\n\tconst gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );\n\tconst gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );\n\tconst v = div( 0.5, gv.add( gl ) );\n\n\treturn v.saturate();\n\n} ).setLayout( {\n\tname: 'V_GGX_SmithCorrelated_Anisotropic',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTL', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBL', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNL', type: 'float', qualifier: 'in' }\n\t]\n} );\n\nexport default V_GGX_SmithCorrelated_Anisotropic;\n", "import { Fn } from '../../tsl/TSLBase.js';\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney’s reparameterization\nconst D_GGX = /*@__PURE__*/ Fn( ( { alpha, dotNH } ) => {\n\n\tconst a2 = alpha.pow2();\n\n\tconst denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1\n\n\treturn a2.div( denom.pow2() ).mul( 1 / Math.PI );\n\n} ).setLayout( {\n\tname: 'D_GGX',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alpha', type: 'float' },\n\t\t{ name: 'dotNH', type: 'float' }\n\t]\n} ); // validated\n\nexport default D_GGX;\n", "import { Fn, float, vec3 } from '../../tsl/TSLBase.js';\n\nconst RECIPROCAL_PI = /*@__PURE__*/ float( 1 / Math.PI );\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\nconst D_GGX_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {\n\n\tconst a2 = alphaT.mul( alphaB );\n\tconst v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );\n\tconst v2 = v.dot( v );\n\tconst w2 = a2.div( v2 );\n\n\treturn RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );\n\n} ).setLayout( {\n\tname: 'D_GGX_Anisotropic',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNH', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTH', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBH', type: 'float', qualifier: 'in' }\n\t]\n} );\n\nexport default D_GGX_Anisotropic;\n", "import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\nimport D_GGX from './D_GGX.js';\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\nimport { transformedNormalView } from '../../accessors/Normal.js';\nimport { positionViewDirection } from '../../accessors/Position.js';\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\nimport { Fn, defined } from '../../tsl/TSLBase.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;\n\n\tconst normalView = inputs.normalView || transformedNormalView;\n\n\tconst alpha = roughness.pow2(); // UE4's roughness\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\tconst dotNH = normalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tlet F = F_Schlick( { f0, f90, dotVH } );\n\tlet V, D;\n\n\tif ( defined( USE_IRIDESCENCE ) ) {\n\n\t\tF = iridescence.mix( F, f );\n\n\t}\n\n\tif ( defined( USE_ANISOTROPY ) ) {\n\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\n\t\tconst dotTH = anisotropyT.dot( halfDir );\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\n\t\tconst dotBH = anisotropyB.dot( halfDir );\n\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\n\n\t} else {\n\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\n\t\tD = D_GGX( { alpha, dotNH } );\n\n\t}\n\n\treturn F.mul( V ).mul( D );\n\n} ); // validated\n\nexport default BRDF_GGX;\n", "import { Fn } from '../../tsl/TSLBase.js';\n\nconst BRDF_Lambert = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\treturn inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light\n\n} ); // validated\n\nexport default BRDF_Lambert;\n", "import { Fn, vec2, vec4 } from '../../tsl/TSLBase.js';\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nconst DFGApprox = /*@__PURE__*/ Fn( ( { roughness, dotNV } ) => {\n\n\tconst c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tconst r = roughness.mul( c0 ).add( c1 );\n\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );\n\n\tconst fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );\n\n\treturn fab;\n\n} ).setLayout( {\n\tname: 'DFGApprox',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'dotNV', type: 'vec3' }\n\t]\n} );\n\nexport default DFGApprox;\n", "import { Fn, vec3 } from '../../tsl/TSLBase.js';\n\nconst Schlick_to_F0 = /*@__PURE__*/ Fn( ( { f, f90, dotVH } ) => {\n\n\tconst x = dotVH.oneMinus().saturate();\n\tconst x2 = x.mul( x );\n\tconst x5 = x.mul( x2, x2 ).clamp( 0, .9999 );\n\n\treturn f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );\n\n} ).setLayout( {\n\tname: 'Schlick_to_F0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'f', type: 'vec3' },\n\t\t{ name: 'f90', type: 'float' },\n\t\t{ name: 'dotVH', type: 'float' }\n\t]\n} );\n\nexport default Schlick_to_F0;\n", "import { normalView } from '../../accessors/Normal.js';\nimport { Fn } from '../../tsl/TSLBase.js';\n\nconst getGeometryRoughness = /*@__PURE__*/ Fn( () => {\n\n\tconst dxy = normalView.dFdx().abs().max( normalView.dFdy().abs() );\n\tconst geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );\n\n\treturn geometryRoughness;\n\n} );\n\nexport default getGeometryRoughness;\n", "import getGeometryRoughness from './getGeometryRoughness.js';\nimport { Fn } from '../../tsl/TSLBase.js';\n\nconst getRoughness = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { roughness } = inputs;\n\n\tconst geometryRoughness = getGeometryRoughness();\n\n\tlet roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.\n\troughnessFactor = roughnessFactor.add( geometryRoughness );\n\troughnessFactor = roughnessFactor.min( 1.0 );\n\n\treturn roughnessFactor;\n\n} );\n\nexport default getRoughness;\n", "import { Fn, mul } from '../../tsl/TSLBase.js';\n\nconst getShIrradianceAt = /*@__PURE__*/ Fn( ( [ normal, shCoefficients ] ) => {\n\n\t// normal is assumed to have unit length\n\n\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tlet result = shCoefficients.element( 0 ).mul( 0.886227 );\n\n\t// band 1\n\tresult = result.add( shCoefficients.element( 1 ).mul( 2.0 * 0.511664 ).mul( y ) );\n\tresult = result.add( shCoefficients.element( 2 ).mul( 2.0 * 0.511664 ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 3 ).mul( 2.0 * 0.511664 ).mul( x ) );\n\n\t// band 2\n\tresult = result.add( shCoefficients.element( 4 ).mul( 2.0 * 0.429043 ).mul( x ).mul( y ) );\n\tresult = result.add( shCoefficients.element( 5 ).mul( 2.0 * 0.429043 ).mul( y ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 6 ).mul( z.mul( z ).mul( 0.743125 ).sub( 0.247708 ) ) );\n\tresult = result.add( shCoefficients.element( 7 ).mul( 2.0 * 0.429043 ).mul( x ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 8 ).mul( 0.429043 ).mul( mul( x, x ).sub( mul( y, y ) ) ) );\n\n\treturn result;\n\n} );\n\nexport default getShIrradianceAt;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { lightViewPosition } from '../accessors/Lights.js';\nimport { positionView } from '../accessors/Position.js';\nimport { renderGroup } from '../TSL.js';\n\nclass PointLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'PointLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst lVector = lightViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\n\n\t\tconst lightDirection = lVector.normalize();\n\t\tconst lightDistance = lVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tconst lightColor = colorNode.mul( lightAttenuation );\n\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.direct( {\n\t\t\tlightDirection,\n\t\t\tlightColor,\n\t\t\treflectedLight\n\t\t}, builder.stack, builder );\n\n\t}\n\n}\n\nexport default PointLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { lightTargetDirection } from '../accessors/Lights.js';\n\nclass DirectionalLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'DirectionalLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst lightColor = this.colorNode;\n\t\tconst lightDirection = lightTargetDirection( this.light );\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.direct( {\n\t\t\tlightDirection,\n\t\t\tlightColor,\n\t\t\treflectedLight\n\t\t}, builder.stack, builder );\n\n\t}\n\n}\n\nexport default DirectionalLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { lightViewPosition } from '../accessors/Lights.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\n\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nconst _matrix41 = /*@__PURE__*/ new Matrix4();\nconst _matrix42 = /*@__PURE__*/ new Matrix4();\n\nlet ltcLib = null;\n\nclass RectAreaLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'RectAreaLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.halfHeight = uniform( new Vector3() ).setGroup( renderGroup );\n\t\tthis.halfWidth = uniform( new Vector3() ).setGroup( renderGroup );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tconst viewMatrix = frame.camera.matrixWorldInverse;\n\n\t\t_matrix42.identity();\n\t\t_matrix41.copy( light.matrixWorld );\n\t\t_matrix41.premultiply( viewMatrix );\n\t\t_matrix42.extractRotation( _matrix41 );\n\n\t\tthis.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );\n\t\tthis.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\tthis.halfWidth.value.applyMatrix4( _matrix42 );\n\t\tthis.halfHeight.value.applyMatrix4( _matrix42 );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tlet ltc_1, ltc_2;\n\n\t\tif ( builder.isAvailable( 'float32Filterable' ) ) {\n\n\t\t\tltc_1 = texture( ltcLib.LTC_FLOAT_1 );\n\t\t\tltc_2 = texture( ltcLib.LTC_FLOAT_2 );\n\n\t\t} else {\n\n\t\t\tltc_1 = texture( ltcLib.LTC_HALF_1 );\n\t\t\tltc_2 = texture( ltcLib.LTC_HALF_2 );\n\n\t\t}\n\n\t\tconst { colorNode, light } = this;\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst lightPosition = lightViewPosition( light );\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.directRectArea( {\n\t\t\tlightColor: colorNode,\n\t\t\tlightPosition,\n\t\t\thalfWidth: this.halfWidth,\n\t\t\thalfHeight: this.halfHeight,\n\t\t\treflectedLight,\n\t\t\tltc_1,\n\t\t\tltc_2\n\t\t}, builder.stack, builder );\n\n\t}\n\n\tstatic setLTC( ltc ) {\n\n\t\tltcLib = ltc;\n\n\t}\n\n}\n\nexport default RectAreaLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { positionView } from '../accessors/Position.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { lightViewPosition, lightTargetDirection } from '../accessors/Lights.js';\n\nclass SpotLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'SpotLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.coneCosNode = uniform( 0 ).setGroup( renderGroup );\n\t\tthis.penumbraCosNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\tgetSpotAttenuation( angleCosine ) {\n\n\t\tconst { coneCosNode, penumbraCosNode } = this;\n\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lVector = lightViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\n\n\t\tconst lightDirection = lVector.normalize();\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\n\t\tconst spotAttenuation = this.getSpotAttenuation( angleCos );\n\n\t\tconst lightDistance = lVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tconst lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\n\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.direct( {\n\t\t\tlightDirection,\n\t\t\tlightColor,\n\t\t\treflectedLight\n\t\t}, builder.stack, builder );\n\n\t}\n\n}\n\nexport default SpotLightNode;\n", "import SpotLightNode from './SpotLightNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { vec2 } from '../tsl/TSLBase.js';\n\nclass IESSpotLightNode extends SpotLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'IESSpotLightNode';\n\n\t}\n\n\tgetSpotAttenuation( angleCosine ) {\n\n\t\tconst iesMap = this.light.iesMap;\n\n\t\tlet spotAttenuation = null;\n\n\t\tif ( iesMap && iesMap.isTexture === true ) {\n\n\t\t\tconst angle = angleCosine.acos().mul( 1.0 / Math.PI );\n\n\t\t\tspotAttenuation = texture( iesMap, vec2( angle, 0 ), 0 ).r;\n\n\t\t} else {\n\n\t\t\tspotAttenuation = super.getSpotAttenuation( angleCosine );\n\n\t\t}\n\n\t\treturn spotAttenuation;\n\n\t}\n\n}\n\nexport default IESSpotLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\n\nclass AmbientLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'AmbientLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t}\n\n\tsetup( { context } ) {\n\n\t\tcontext.irradiance.addAssign( this.colorNode );\n\n\t}\n\n}\n\nexport default AmbientLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { normalView } from '../accessors/Normal.js';\nimport { lightPosition } from '../accessors/Lights.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\n\nimport { Color } from '../../math/Color.js';\n\nclass HemisphereLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'HemisphereLightNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.lightPositionNode = lightPosition( light );\n\t\tthis.lightDirectionNode = this.lightPositionNode.normalize();\n\n\t\tthis.groundColorNode = uniform( new Color() ).setGroup( renderGroup );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.lightPositionNode.object3d = light;\n\n\t\tthis.groundColorNode.value.copy( light.groundColor ).multiplyScalar( light.intensity );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode, groundColorNode, lightDirectionNode } = this;\n\n\t\tconst dotNL = normalView.dot( lightDirectionNode );\n\t\tconst hemiDiffuseWeight = dotNL.mul( 0.5 ).add( 0.5 );\n\n\t\tconst irradiance = mix( groundColorNode, colorNode, hemiDiffuseWeight );\n\n\t\tbuilder.context.irradiance.addAssign( irradiance );\n\n\t}\n\n}\n\nexport default HemisphereLightNode;\n", "import AnalyticLightNode from './AnalyticLightNode.js';\nimport { normalWorld } from '../accessors/Normal.js';\nimport { uniformArray } from '../accessors/UniformArrayNode.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport getShIrradianceAt from '../functions/material/getShIrradianceAt.js';\n\nclass LightProbeNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'LightProbeNode';\n\n\t}\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tconst array = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) array.push( new Vector3() );\n\n\t\tthis.lightProbe = uniformArray( array );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.lightProbe.array[ i ].copy( light.sh.coefficients[ i ] ).multiplyScalar( light.intensity );\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst irradiance = getShIrradianceAt( normalWorld, this.lightProbe );\n\n\t\tbuilder.context.irradiance.addAssign( irradiance );\n\n\t}\n\n}\n\nexport default LightProbeNode;\n", "import LightingNode from './LightingNode.js';\nimport { cache } from '../core/CacheNode.js';\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\nimport { cameraViewMatrix } from '../accessors/Camera.js';\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/Normal.js';\nimport { positionViewDirection } from '../accessors/Position.js';\nimport { float } from '../tsl/TSLBase.js';\nimport { reference } from '../accessors/ReferenceNode.js';\nimport { transformedBentNormalView } from '../accessors/AccessorsUtils.js';\nimport { pmremTexture } from '../pmrem/PMREMNode.js';\n\nconst _envNodeCache = new WeakMap();\n\nclass EnvironmentNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'EnvironmentNode';\n\n\t}\n\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { material } = builder;\n\n\t\tlet envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\n\n\t\t\tconst value = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\n\n\t\t\tlet cacheEnvNode = _envNodeCache.get( value );\n\n\t\t\tif ( cacheEnvNode === undefined ) {\n\n\t\t\t\tcacheEnvNode = pmremTexture( value );\n\n\t\t\t\t_envNodeCache.set( value, cacheEnvNode );\n\n\t\t\t}\n\n\t\t\tenvNode\t= cacheEnvNode;\n\n\t\t}\n\n\t\t//\n\n\t\tconst envMap = material.envMap;\n\t\tconst intensity = envMap ? reference( 'envMapIntensity', 'float', builder.material ) : reference( 'environmentIntensity', 'float', builder.scene ); // @TODO: Add materialEnvIntensity in MaterialNode\n\n\t\tconst useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\n\t\tconst radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\n\n\t\tconst radiance = envNode.context( createRadianceContext( roughness, radianceNormalView ) ).mul( intensity );\n\t\tconst irradiance = envNode.context( createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );\n\n\t\tconst isolateRadiance = cache( radiance );\n\t\tconst isolateIrradiance = cache( irradiance );\n\n\t\t//\n\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\n\n\t\tbuilder.context.iblIrradiance.addAssign( isolateIrradiance );\n\n\t\t//\n\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n\n\t\tif ( clearcoatRadiance ) {\n\n\t\t\tconst clearcoatRadianceContext = envNode.context( createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\n\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\n\n\t\t}\n\n\t}\n\n}\n\nexport default EnvironmentNode;\n\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\n\n\tlet reflectVec = null;\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\tif ( reflectVec === null ) {\n\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\n\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\n\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\n\n\t\t\t}\n\n\t\t\treturn reflectVec;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn roughnessNode;\n\n\t\t}\n\t};\n\n};\n\nconst createIrradianceContext = ( normalWorldNode ) => {\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\treturn normalWorldNode;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn float( 1.0 );\n\n\t\t}\n\t};\n\n};\n", "import TempNode from '../core/TempNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\nimport { CubeTexture } from '../../textures/CubeTexture.js';\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\nimport CubeRenderTarget from '../../renderers/common/CubeRenderTarget.js';\nimport { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\n\nconst _cache = new WeakMap();\n\nclass CubeMapNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'CubeMapNode';\n\n\t}\n\n\tconstructor( envNode ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.envNode = envNode;\n\n\t\tthis._cubeTexture = null;\n\t\tthis._cubeTextureNode = cubeTexture();\n\n\t\tconst defaultTexture = new CubeTexture();\n\t\tdefaultTexture.isRenderTargetTexture = true;\n\n\t\tthis._defaultTexture = defaultTexture;\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer, material } = frame;\n\n\t\tconst envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\n\n\t\t\tconst texture = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\n\n\t\t\tif ( texture && texture.isTexture ) {\n\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\t// check for converted cubemap map\n\n\t\t\t\t\tif ( _cache.has( texture ) ) {\n\n\t\t\t\t\t\tconst cubeMap = _cache.get( texture );\n\n\t\t\t\t\t\tmapTextureMapping( cubeMap, texture.mapping );\n\t\t\t\t\t\tthis._cubeTexture = cubeMap;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// create cube map from equirectangular map\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( isEquirectangularMapReady( image ) ) {\n\n\t\t\t\t\t\t\tconst renderTarget = new CubeRenderTarget( image.height );\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\n\t\t\t\t\t\t\tmapTextureMapping( renderTarget.texture, texture.mapping );\n\t\t\t\t\t\t\tthis._cubeTexture = renderTarget.texture;\n\n\t\t\t\t\t\t\t_cache.set( texture, renderTarget.texture );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// default cube texture as fallback when equirectangular texture is not yet loaded\n\n\t\t\t\t\t\t\tthis._cubeTexture = this._defaultTexture;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//\n\n\t\t\t\t\tthis._cubeTextureNode.value = this._cubeTexture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// envNode already refers to a cube map\n\n\t\t\t\t\tthis._cubeTextureNode = this.envNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.updateBefore( builder );\n\n\t\treturn this._cubeTextureNode;\n\n\t}\n\n}\n\nexport default CubeMapNode;\n\nfunction isEquirectangularMapReady( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\treturn image.height > 0;\n\n}\n\nfunction onTextureDispose( event ) {\n\n\tconst texture = event.target;\n\n\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\tconst renderTarget = _cache.get( texture );\n\n\tif ( renderTarget !== undefined ) {\n\n\t\t_cache.delete( texture );\n\n\t\trenderTarget.dispose();\n\n\t}\n\n}\n\nfunction mapTextureMapping( texture, mapping ) {\n\n\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\ttexture.mapping = CubeReflectionMapping;\n\n\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\ttexture.mapping = CubeRefractionMapping;\n\n\t}\n\n}\n\nexport const cubeMapNode = /*@__PURE__*/ nodeProxy( CubeMapNode );\n", "import LightingNode from './LightingNode.js';\nimport { cubeMapNode } from '../utils/CubeMapNode.js';\n\nclass BasicEnvironmentNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'BasicEnvironmentNode';\n\n\t}\n\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// environment property is used in the finish() method of BasicLightingModel\n\n\t\tbuilder.context.environment = cubeMapNode( this.envNode );\n\n\t}\n\n}\n\nexport default BasicEnvironmentNode;\n", "class NodeParser {\n\n\tparseFunction( /*source*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\nexport default NodeParser;\n", "class NodeFunction {\n\n\tconstructor( type, inputs, name = '', precision = '' ) {\n\n\t\tthis.type = type;\n\t\tthis.inputs = inputs;\n\t\tthis.name = name;\n\t\tthis.precision = precision;\n\n\t}\n\n\tgetCode( /*name = this.name*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\nNodeFunction.isNodeFunction = true;\n\nexport default NodeFunction;\n", "import NodeFunction from '../core/NodeFunction.js';\nimport NodeFunctionInput from '../core/NodeFunctionInput.js';\n\nconst declarationRegexp = /^\\s*(highp|mediump|lowp)?\\s*([a-z_0-9]+)\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)/i;\nconst propertiesRegexp = /[a-z_0-9]+/ig;\n\nconst pragmaMain = '#pragma main';\n\nconst parse = ( source ) => {\n\n\tsource = source.trim();\n\n\tconst pragmaMainIndex = source.indexOf( pragmaMain );\n\n\tconst mainCode = pragmaMainIndex !== - 1 ? source.slice( pragmaMainIndex + pragmaMain.length ) : source;\n\n\tconst declaration = mainCode.match( declarationRegexp );\n\n\tif ( declaration !== null && declaration.length === 5 ) {\n\n\t\t// tokenizer\n\n\t\tconst inputsCode = declaration[ 4 ];\n\t\tconst propsMatches = [];\n\n\t\tlet nameMatch = null;\n\n\t\twhile ( ( nameMatch = propertiesRegexp.exec( inputsCode ) ) !== null ) {\n\n\t\t\tpropsMatches.push( nameMatch );\n\n\t\t}\n\n\t\t// parser\n\n\t\tconst inputs = [];\n\n\t\tlet i = 0;\n\n\t\twhile ( i < propsMatches.length ) {\n\n\t\t\tconst isConst = propsMatches[ i ][ 0 ] === 'const';\n\n\t\t\tif ( isConst === true ) {\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\tlet qualifier = propsMatches[ i ][ 0 ];\n\n\t\t\tif ( qualifier === 'in' || qualifier === 'out' || qualifier === 'inout' ) {\n\n\t\t\t\ti ++;\n\n\t\t\t} else {\n\n\t\t\t\tqualifier = '';\n\n\t\t\t}\n\n\t\t\tconst type = propsMatches[ i ++ ][ 0 ];\n\n\t\t\tlet count = Number.parseInt( propsMatches[ i ][ 0 ] );\n\n\t\t\tif ( Number.isNaN( count ) === false ) i ++;\n\t\t\telse count = null;\n\n\t\t\tconst name = propsMatches[ i ++ ][ 0 ];\n\n\t\t\tinputs.push( new NodeFunctionInput( type, name, count, qualifier, isConst ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst blockCode = mainCode.substring( declaration[ 0 ].length );\n\n\t\tconst name = declaration[ 3 ] !== undefined ? declaration[ 3 ] : '';\n\t\tconst type = declaration[ 2 ];\n\n\t\tconst precision = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\n\n\t\tconst headerCode = pragmaMainIndex !== - 1 ? source.slice( 0, pragmaMainIndex ) : '';\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tinputs,\n\t\t\tname,\n\t\t\tprecision,\n\t\t\tinputsCode,\n\t\t\tblockCode,\n\t\t\theaderCode\n\t\t};\n\n\t} else {\n\n\t\tthrow new Error( 'FunctionNode: Function is not a GLSL code.' );\n\n\t}\n\n};\n\nclass GLSLNodeFunction extends NodeFunction {\n\n\tconstructor( source ) {\n\n\t\tconst { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse( source );\n\n\t\tsuper( type, inputs, name, precision );\n\n\t\tthis.inputsCode = inputsCode;\n\t\tthis.blockCode = blockCode;\n\t\tthis.headerCode = headerCode;\n\n\t}\n\n\tgetCode( name = this.name ) {\n\n\t\tlet code;\n\n\t\tconst blockCode = this.blockCode;\n\n\t\tif ( blockCode !== '' ) {\n\n\t\t\tconst { type, inputsCode, headerCode, precision } = this;\n\n\t\t\tlet declarationCode = `${ type } ${ name } ( ${ inputsCode.trim() } )`;\n\n\t\t\tif ( precision !== '' ) {\n\n\t\t\t\tdeclarationCode = `${ precision } ${ declarationCode }`;\n\n\t\t\t}\n\n\t\t\tcode = headerCode + declarationCode + blockCode;\n\n\t\t} else {\n\n\t\t\t// interface function\n\n\t\t\tcode = '';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n}\n\nexport default GLSLNodeFunction;\n", "import NodeParser from '../core/NodeParser.js';\nimport GLSLNodeFunction from './GLSLNodeFunction.js';\n\nclass GLSLNodeParser extends NodeParser {\n\n\tparseFunction( source ) {\n\n\t\treturn new GLSLNodeFunction( source );\n\n\t}\n\n}\n\nexport default GLSLNodeParser;\n", "import LightingModel from '../core/LightingModel.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { MultiplyOperation, MixOperation, AddOperation } from '../../constants.js';\nimport { materialSpecularStrength, materialReflectivity } from '../accessors/MaterialNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { vec4 } from '../tsl/TSLBase.js';\n\nclass BasicLightingModel extends LightingModel {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\tindirect( context, stack, builder ) {\n\n\t\tconst ambientOcclusion = context.ambientOcclusion;\n\t\tconst reflectedLight = context.reflectedLight;\n\t\tconst irradianceLightMap = builder.context.irradianceLightMap;\n\n\t\treflectedLight.indirectDiffuse.assign( vec4( 0.0 ) );\n\n\t\t// accumulation (baked indirect lighting only)\n\n\t\tif ( irradianceLightMap ) {\n\n\t\t\treflectedLight.indirectDiffuse.addAssign( irradianceLightMap );\n\n\t\t} else {\n\n\t\t\treflectedLight.indirectDiffuse.addAssign( vec4( 1.0, 1.0, 1.0, 0.0 ) );\n\n\t\t}\n\n\t\t// modulation\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( diffuseColor.rgb );\n\n\t}\n\n\tfinish( context, stack, builder ) {\n\n\t\tconst material = builder.material;\n\t\tconst outgoingLight = context.outgoingLight;\n\t\tconst envNode = builder.context.environment;\n\n\t\tif ( envNode ) {\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, outgoingLight.rgb.mul( envNode.rgb ), materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\toutgoingLight.rgb.addAssign( envNode.rgb.mul( materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.BasicLightingModel: Unsupported .combine value:', material.combine );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default BasicLightingModel;\n", "import BasicLightingModel from './BasicLightingModel.js';\nimport F_Schlick from './BSDF/F_Schlick.js';\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { transformedNormalView } from '../accessors/Normal.js';\nimport { materialSpecularStrength } from '../accessors/MaterialNode.js';\nimport { shininess, specularColor } from '../core/PropertyNode.js';\nimport { positionViewDirection } from '../accessors/Position.js';\nimport { Fn, float } from '../tsl/TSLBase.js';\n\nconst G_BlinnPhong_Implicit = () => float( 0.25 );\n\nconst D_BlinnPhong = /*@__PURE__*/ Fn( ( { dotNH } ) => {\n\n\treturn shininess.mul( float( 0.5 ) ).add( 1.0 ).mul( float( 1 / Math.PI ) ).mul( dotNH.pow( shininess ) );\n\n} );\n\nconst BRDF_BlinnPhong = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tconst F = F_Schlick( { f0: specularColor, f90: 1.0, dotVH } );\n\tconst G = G_BlinnPhong_Implicit();\n\tconst D = D_BlinnPhong( { dotNH } );\n\n\treturn F.mul( G ).mul( D );\n\n} );\n\nclass PhongLightingModel extends BasicLightingModel {\n\n\tconstructor( specular = true ) {\n\n\t\tsuper();\n\n\t\tthis.specular = specular;\n\n\t}\n\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\n\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\tif ( this.specular === true ) {\n\n\t\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_BlinnPhong( { lightDirection } ) ).mul( materialSpecularStrength ) );\n\n\t\t}\n\n\t}\n\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t}\n\n}\n\nexport default PhongLightingModel;\n", "import DFGApprox from './DFGApprox.js';\nimport { Fn } from '../../tsl/TSLBase.js';\n\nconst EnvironmentBRDF = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { dotNV, specularColor, specularF90, roughness } = inputs;\n\n\tconst fab = DFGApprox( { dotNV, roughness } );\n\treturn specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n} );\n\nexport default EnvironmentBRDF;\n", "import { transformedNormalView } from '../../accessors/Normal.js';\nimport { positionViewDirection } from '../../accessors/Position.js';\nimport { sheen, sheenRoughness } from '../../core/PropertyNode.js';\nimport { Fn, float } from '../../tsl/TSLBase.js';\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst D_Charlie = /*@__PURE__*/ Fn( ( { roughness, dotNH } ) => {\n\n\tconst alpha = roughness.pow2();\n\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n\tconst invAlpha = float( 1.0 ).div( alpha );\n\tconst cos2h = dotNH.pow2();\n\tconst sin2h = cos2h.oneMinus().max( 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n\treturn float( 2.0 ).add( invAlpha ).mul( sin2h.pow( invAlpha.mul( 0.5 ) ) ).div( 2.0 * Math.PI );\n\n} ).setLayout( {\n\tname: 'D_Charlie',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'dotNH', type: 'float' }\n\t]\n} );\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst V_Neubelt = /*@__PURE__*/ Fn( ( { dotNV, dotNL } ) => {\n\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\treturn float( 1.0 ).div( float( 4.0 ).mul( dotNL.add( dotNV ).sub( dotNL.mul( dotNV ) ) ) );\n\n} ).setLayout( {\n\tname: 'V_Neubelt',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'dotNV', type: 'float' },\n\t\t{ name: 'dotNL', type: 'float' }\n\t]\n} );\n\nconst BRDF_Sheen = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp();\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\n\n\tconst D = D_Charlie( { roughness: sheenRoughness, dotNH } );\n\tconst V = V_Neubelt( { dotNV, dotNL } );\n\n\treturn sheen.mul( D ).mul( V );\n\n} );\n\nexport default BRDF_Sheen;\n", "import { Fn, If, mat3, vec2, vec3 } from '../../tsl/TSLBase.js';\nimport { max } from '../../math/MathNode.js';\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nconst LTC_Uv = /*@__PURE__*/ Fn( ( { N, V, roughness } ) => {\n\n\tconst LUT_SIZE = 64.0;\n\tconst LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tconst dotNV = N.dot( V ).saturate();\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tconst uv = vec2( roughness, dotNV.oneMinus().sqrt() );\n\n\tuv.assign( uv.mul( LUT_SCALE ).add( LUT_BIAS ) );\n\n\treturn uv;\n\n} ).setLayout( {\n\tname: 'LTC_Uv',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'N', type: 'vec3' },\n\t\t{ name: 'V', type: 'vec3' },\n\t\t{ name: 'roughness', type: 'float' }\n\t]\n} );\n\nconst LTC_ClippedSphereFormFactor = /*@__PURE__*/ Fn( ( { f } ) => {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tconst l = f.length();\n\n\treturn max( l.mul( l ).add( f.z ).div( l.add( 1.0 ) ), 0 );\n\n} ).setLayout( {\n\tname: 'LTC_ClippedSphereFormFactor',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'f', type: 'vec3' }\n\t]\n} );\n\nconst LTC_EdgeVectorFormFactor = /*@__PURE__*/ Fn( ( { v1, v2 } ) => {\n\n\tconst x = v1.dot( v2 );\n\tconst y = x.abs().toVar();\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tconst a = y.mul( 0.0145206 ).add( 0.4965155 ).mul( y ).add( 0.8543985 ).toVar();\n\tconst b = y.add( 4.1616724 ).mul( y ).add( 3.4175940 ).toVar();\n\tconst v = a.div( b );\n\n\tconst theta_sintheta = x.greaterThan( 0.0 ).select( v, max( x.mul( x ).oneMinus(), 1e-7 ).inverseSqrt().mul( 0.5 ).sub( v ) );\n\n\treturn v1.cross( v2 ).mul( theta_sintheta );\n\n} ).setLayout( {\n\tname: 'LTC_EdgeVectorFormFactor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' }\n\t]\n} );\n\nconst LTC_Evaluate = /*@__PURE__*/ Fn( ( { N, V, P, mInv, p0, p1, p2, p3 } ) => {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tconst v1 = p1.sub( p0 ).toVar();\n\tconst v2 = p3.sub( p0 ).toVar();\n\n\tconst lightNormal = v1.cross( v2 );\n\tconst result = vec3().toVar();\n\n\tIf( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {\n\n\t\t// construct orthonormal basis around N\n\t\tconst T1 = V.sub( N.mul( V.dot( N ) ) ).normalize();\n\t\tconst T2 = N.cross( T1 ).negate(); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t\t// compute transform\n\t\tconst mat = mInv.mul( mat3( T1, T2, N ).transpose() ).toVar();\n\n\t\t// transform rect\n\t\t// & project rect onto sphere\n\t\tconst coords0 = mat.mul( p0.sub( P ) ).normalize().toVar();\n\t\tconst coords1 = mat.mul( p1.sub( P ) ).normalize().toVar();\n\t\tconst coords2 = mat.mul( p2.sub( P ) ).normalize().toVar();\n\t\tconst coords3 = mat.mul( p3.sub( P ) ).normalize().toVar();\n\n\t\t// calculate vector form factor\n\t\tconst vectorFormFactor = vec3( 0 ).toVar();\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );\n\n\t\t// adjust for horizon clipping\n\t\tresult.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor } ) ) );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'LTC_Evaluate',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'N', type: 'vec3' },\n\t\t{ name: 'V', type: 'vec3' },\n\t\t{ name: 'P', type: 'vec3' },\n\t\t{ name: 'mInv', type: 'mat3' },\n\t\t{ name: 'p0', type: 'vec3' },\n\t\t{ name: 'p1', type: 'vec3' },\n\t\t{ name: 'p2', type: 'vec3' },\n\t\t{ name: 'p3', type: 'vec3' }\n\t]\n} );\n\n\nexport { LTC_Evaluate, LTC_Uv };\n", "import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\nimport F_Schlick from './BSDF/F_Schlick.js';\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\nimport { LTC_Evaluate, LTC_Uv } from './BSDF/LTC.js';\nimport LightingModel from '../core/LightingModel.js';\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { transformedNormalView, transformedClearcoatNormalView, transformedNormalWorld } from '../accessors/Normal.js';\nimport { positionViewDirection, positionView, positionWorld } from '../accessors/Position.js';\nimport { Fn, float, vec2, vec3, vec4, mat3, If } from '../tsl/TSLBase.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\nimport { div } from '../math/OperatorNode.js';\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/Camera.js';\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { screenSize } from '../display/ScreenNode.js';\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\nimport { textureBicubic } from '../accessors/TextureBicubic.js';\nimport { Loop } from '../utils/LoopNode.js';\n\n//\n// Transmission\n//\n\nconst getVolumeTransmissionRay = /*@__PURE__*/ Fn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\n\n\t// Direction of refracted light.\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\n\n\t// Compute rotation-independant scaling of the model matrix.\n\tconst modelScale = vec3(\n\t\tlength( modelMatrix[ 0 ].xyz ),\n\t\tlength( modelMatrix[ 1 ].xyz ),\n\t\tlength( modelMatrix[ 2 ].xyz )\n\t);\n\n\t// The thickness is specified in local space.\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\n\n} ).setLayout( {\n\tname: 'getVolumeTransmissionRay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'n', type: 'vec3' },\n\t\t{ name: 'v', type: 'vec3' },\n\t\t{ name: 'thickness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' },\n\t\t{ name: 'modelMatrix', type: 'mat4' }\n\t]\n} );\n\nconst applyIorToRoughness = /*@__PURE__*/ Fn( ( [ roughness, ior ] ) => {\n\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\n\n} ).setLayout( {\n\tname: 'applyIorToRoughness',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' }\n\t]\n} );\n\nconst singleViewportMipTexture = /*@__PURE__*/ viewportMipTexture();\n\nconst getTransmissionSample = /*@__PURE__*/ Fn( ( [ fragCoord, roughness, ior ] ) => {\n\n\tconst transmissionSample = singleViewportMipTexture.uv( fragCoord );\n\t//const transmissionSample = viewportMipTexture( fragCoord );\n\n\tconst lod = log2( float( screenSize.x ) ).mul( applyIorToRoughness( roughness, ior ) );\n\n\treturn textureBicubic( transmissionSample, lod );\n\n} );\n\nconst volumeAttenuation = /*@__PURE__*/ Fn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\n\n\tIf( attenuationDistance.notEqual( 0 ), () => {\n\n\t\t// Compute light attenuation using Beer's law.\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\n\n\t\treturn transmittance;\n\n\t} );\n\n\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n\treturn vec3( 1.0 );\n\n} ).setLayout( {\n\tname: 'volumeAttenuation',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'transmissionDistance', type: 'float' },\n\t\t{ name: 'attenuationColor', type: 'vec3' },\n\t\t{ name: 'attenuationDistance', type: 'float' }\n\t]\n} );\n\nconst getIBLVolumeRefraction = /*@__PURE__*/ Fn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\n\n\tlet transmittedLight, transmittance;\n\n\tif ( dispersion ) {\n\n\t\ttransmittedLight = vec4().toVar();\n\t\ttransmittance = vec3().toVar();\n\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\n\n\t\tLoop( { start: 0, end: 3 }, ( { i } ) => {\n\n\t\t\tconst ior = iors.element( i );\n\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\t\trefractionCoords.addAssign( 1.0 );\n\t\t\trefractionCoords.divAssign( 2.0 );\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\n\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\n\n\t\t} );\n\n\t\ttransmittedLight.a.divAssign( 3.0 );\n\n\t} else {\n\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\trefractionCoords.addAssign( 1.0 );\n\t\trefractionCoords.divAssign( 2.0 );\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\n\n\t}\n\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\n\tconst dotNV = n.dot( v ).clamp();\n\n\t// Get the specular component.\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\n\t\tdotNV,\n\t\tspecularColor,\n\t\tspecularF90,\n\t\troughness\n\t} ) );\n\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\n\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\n\n} );\n\n//\n// Iridescence\n//\n\n// XYZ to linear-sRGB color space\nconst XYZ_TO_REC709 = /*@__PURE__*/ mat3(\n\t3.2404542, - 0.9692660, 0.0556434,\n\t- 1.5371385, 1.8760108, - 0.2040259,\n\t- 0.4985314, 0.0415560, 1.0572252\n);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nconst Fresnel0ToIor = ( fresnel0 ) => {\n\n\tconst sqrtF0 = fresnel0.sqrt();\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\n\n};\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\n\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\n\n};\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nconst evalSensitivity = ( OPD, shift ) => {\n\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );\n\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\n\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\n\n\treturn rgb;\n\n};\n\nconst evalIridescence = /*@__PURE__*/ Fn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\n\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( float( 1 ).sub( cosTheta1.pow2() ) );\n\n\t// Handle TIR:\n\tconst cosTheta2Sq = float( 1 ).sub( sinTheta2Sq );\n\t/*if ( cosTheta2Sq < 0.0 ) {\n\n\t\t\treturn vec3( 1.0 );\n\n\t}*/\n\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\n\n\t// First interface\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\n\t//const R21 = R12;\n\tconst T121 = R12.oneMinus();\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).select( Math.PI, 0.0 );\n\tconst phi21 = float( Math.PI ).sub( phi12 );\n\n\t// Second interface\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\n\tconst phi23 = vec3(\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).select( Math.PI, 0.0 )\n\t);\n\n\t// Phase shift\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\n\tconst phi = vec3( phi21 ).add( phi23 );\n\n\t// Compound terms\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\n\tconst r123 = R123.sqrt();\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tconst C0 = R12.add( Rs );\n\tlet I = C0;\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tlet Cm = Rs.sub( T121 );\n\tfor ( let m = 1; m <= 2; ++ m ) {\n\n\t\tCm = Cm.mul( r123 );\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\n\t\tI = I.add( Cm.mul( Sm ) );\n\n\t}\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn I.max( vec3( 0.0 ) );\n\n} ).setLayout( {\n\tname: 'evalIridescence',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'outsideIOR', type: 'float' },\n\t\t{ name: 'eta2', type: 'float' },\n\t\t{ name: 'cosTheta1', type: 'float' },\n\t\t{ name: 'thinFilmThickness', type: 'float' },\n\t\t{ name: 'baseF0', type: 'vec3' }\n\t]\n} );\n\n//\n//\tSheen\n//\n\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nconst IBLSheenBRDF = /*@__PURE__*/ Fn( ( { normal, viewDir, roughness } ) => {\n\n\tconst dotNV = normal.dot( viewDir ).saturate();\n\n\tconst r2 = roughness.pow2();\n\n\tconst a = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\n\t\tfloat( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\n\t);\n\n\tconst b = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\n\t);\n\n\tconst DG = select( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\n\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\n\n} );\n\nconst clearcoatF0 = vec3( 0.04 );\nconst clearcoatF90 = float( 1 );\n\n//\n\nclass PhysicalLightingModel extends LightingModel {\n\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\n\n\t\tsuper();\n\n\t\tthis.clearcoat = clearcoat;\n\t\tthis.sheen = sheen;\n\t\tthis.iridescence = iridescence;\n\t\tthis.anisotropy = anisotropy;\n\t\tthis.transmission = transmission;\n\t\tthis.dispersion = dispersion;\n\n\t\tthis.clearcoatRadiance = null;\n\t\tthis.clearcoatSpecularDirect = null;\n\t\tthis.clearcoatSpecularIndirect = null;\n\t\tthis.sheenSpecularDirect = null;\n\t\tthis.sheenSpecularIndirect = null;\n\t\tthis.iridescenceFresnel = null;\n\t\tthis.iridescenceF0 = null;\n\n\t}\n\n\tstart( context ) {\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatRadiance = vec3().toVar( 'clearcoatRadiance' );\n\t\t\tthis.clearcoatSpecularDirect = vec3().toVar( 'clearcoatSpecularDirect' );\n\t\t\tthis.clearcoatSpecularIndirect = vec3().toVar( 'clearcoatSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect = vec3().toVar( 'sheenSpecularDirect' );\n\t\t\tthis.sheenSpecularIndirect = vec3().toVar( 'sheenSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.iridescence === true ) {\n\n\t\t\tconst dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\n\t\t\t\toutsideIOR: float( 1.0 ),\n\t\t\t\teta2: iridescenceIOR,\n\t\t\t\tcosTheta1: dotNVi,\n\t\t\t\tthinFilmThickness: iridescenceThickness,\n\t\t\t\tbaseF0: specularColor\n\t\t\t} );\n\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\n\n\t\t}\n\n\t\tif ( this.transmission === true ) {\n\n\t\t\tconst position = positionWorld;\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\n\t\t\tconst n = transformedNormalWorld;\n\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\n\t\t\t\tn,\n\t\t\t\tv,\n\t\t\t\troughness,\n\t\t\t\tdiffuseColor,\n\t\t\t\tspecularColor,\n\t\t\t\tspecularF90, // specularF90\n\t\t\t\tposition, // positionWorld\n\t\t\t\tmodelWorldMatrix, // modelMatrix\n\t\t\t\tcameraViewMatrix, // viewMatrix\n\t\t\t\tcameraProjectionMatrix, // projMatrix\n\t\t\t\tior,\n\t\t\t\tthickness,\n\t\t\t\tattenuationColor,\n\t\t\t\tattenuationDistance,\n\t\t\t\tthis.dispersion ? dispersion : null\n\t\t\t);\n\n\t\t\tcontext.backdropAlpha = transmission;\n\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\n\n\t\t}\n\n\t}\n\n\t// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n\t// Approximates multiscattering in order to preserve energy.\n\t// http://www.jcgt.org/published/0008/01/03/\n\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\n\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\n\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n\t\tconst Ess = fab.x.add( fab.y );\n\t\tconst Ems = Ess.oneMinus();\n\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\n\n\t\tsingleScatter.addAssign( FssEss );\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\n\n\t}\n\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\n\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\n\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );\n\n\t\t}\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\n\n\t}\n\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 } ) {\n\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\n\n\t\tconst N = transformedNormalView;\n\t\tconst V = positionViewDirection;\n\t\tconst P = positionView.toVar();\n\n\t\tconst uv = LTC_Uv( { N, V, roughness } );\n\n\t\tconst t1 = ltc_1.uv( uv ).toVar();\n\t\tconst t2 = ltc_2.uv( uv ).toVar();\n\n\t\tconst mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3( 0, 1, 0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t).toVar();\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tconst fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();\n\n\t\treflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );\n\n\t\treflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );\n\n\t}\n\n\tindirect( context, stack, builder ) {\n\n\t\tthis.indirectDiffuse( context, stack, builder );\n\t\tthis.indirectSpecular( context, stack, builder );\n\t\tthis.ambientOcclusion( context, stack, builder );\n\n\t}\n\n\tindirectDiffuse( { irradiance, reflectedLight } ) {\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t}\n\n\tindirectSpecular( { radiance, iblIrradiance, reflectedLight } ) {\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\n\t\t\t\tsheen,\n\t\t\t\tIBLSheenBRDF( {\n\t\t\t\t\tnormal: transformedNormalView,\n\t\t\t\t\tviewDir: positionViewDirection,\n\t\t\t\t\troughness: sheenRoughness\n\t\t\t\t} )\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\n\t\t\t\tdotNV: dotNVcc,\n\t\t\t\tspecularColor: clearcoatF0,\n\t\t\t\tspecularF90: clearcoatF90,\n\t\t\t\troughness: clearcoatRoughness\n\t\t\t} );\n\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\n\n\t\t}\n\n\t\t// Both indirect specular and indirect diffuse light accumulate here\n\n\t\tconst singleScattering = vec3().toVar( 'singleScattering' );\n\t\tconst multiScattering = vec3().toVar( 'multiScattering' );\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\n\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\n\n\t\tconst totalScattering = singleScattering.add( multiScattering );\n\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\n\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\n\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\n\n\t}\n\n\tambientOcclusion( { ambientOcclusion, reflectedLight } ) {\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\n\t\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\n\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\n\n\t}\n\n\tfinish( context ) {\n\n\t\tconst { outgoingLight } = context;\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst Fcc = F_Schlick( {\n\t\t\t\tdotVH: dotNVcc,\n\t\t\t\tf0: clearcoatF0,\n\t\t\t\tf90: clearcoatF90\n\t\t\t} );\n\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\n\n\t\t\toutgoingLight.assign( clearcoatLight );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\n\n\t\t\toutgoingLight.assign( sheenLight );\n\n\t\t}\n\n\t}\n\n}\n\nexport default PhysicalLightingModel;\n", "import { LightsNode } from '../../nodes/Nodes.js';\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nclass RenderList {\n\n\tconstructor() {\n\n\t\tthis.renderItems = [];\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque = [];\n\t\tthis.transparent = [];\n\t\tthis.bundles = [];\n\n\t\tthis.lightsNode = new LightsNode( [] );\n\t\tthis.lightsArray = [];\n\n\t\tthis.occlusionQueryCount = 0;\n\n\t}\n\n\tbegin() {\n\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque.length = 0;\n\t\tthis.transparent.length = 0;\n\t\tthis.bundles.length = 0;\n\n\t\tthis.lightsArray.length = 0;\n\n\t\tthis.occlusionQueryCount = 0;\n\n\t\treturn this;\n\n\t}\n\n\tgetNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = this.renderItems[ this.renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\tthis.renderItems[ this.renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\tthis.renderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tpush( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( object.occlusionTest === true ) this.occlusionQueryCount ++;\n\n\t\t( material.transparent === true || material.transmission > 0 ? this.transparent : this.opaque ).push( renderItem );\n\n\t}\n\n\tunshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? this.transparent : this.opaque ).unshift( renderItem );\n\n\t}\n\n\tpushBundle( group ) {\n\n\t\tthis.bundles.push( group );\n\n\t}\n\n\tpushLight( light ) {\n\n\t\tthis.lightsArray.push( light );\n\n\t}\n\n\tgetLightsNode() {\n\n\t\treturn this.lightsNode.fromLights( this.lightsArray );\n\n\t}\n\n\tsort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( this.opaque.length > 1 ) this.opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( this.transparent.length > 1 ) this.transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfinish() {\n\n\t\t// update lights\n\n\t\tthis.lightsNode.setLights( this.lightsArray );\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = this.renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.groupOrder = null;\n\t\t\trenderItem.renderOrder = null;\n\t\t\trenderItem.z = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n}\n\nexport default RenderList;\n", "import ChainMap from './ChainMap.js';\nimport RenderList from './RenderList.js';\n\nclass RenderLists {\n\n\tconstructor() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n\tget( scene, camera ) {\n\n\t\tconst lists = this.lists;\n\t\tconst keys = [ scene, camera ];\n\n\t\tlet list = lists.get( keys );\n\n\t\tif ( list === undefined ) {\n\n\t\t\tlist = new RenderList();\n\t\t\tlists.set( keys, list );\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n}\n\nexport default RenderLists;\n", "import { Vector4 } from '../../math/Vector4.js';\nimport { hashArray } from '../../nodes/core/NodeUtils.js';\n\nlet id = 0;\n\nclass RenderContext {\n\n\tconstructor() {\n\n\t\tthis.id = id ++;\n\n\t\tthis.color = true;\n\t\tthis.clearColor = true;\n\t\tthis.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };\n\n\t\tthis.depth = true;\n\t\tthis.clearDepth = true;\n\t\tthis.clearDepthValue = 1;\n\n\t\tthis.stencil = false;\n\t\tthis.clearStencil = true;\n\t\tthis.clearStencilValue = 1;\n\n\t\tthis.viewport = false;\n\t\tthis.viewportValue = new Vector4();\n\n\t\tthis.scissor = false;\n\t\tthis.scissorValue = new Vector4();\n\n\t\tthis.textures = null;\n\t\tthis.depthTexture = null;\n\t\tthis.activeCubeFace = 0;\n\t\tthis.sampleCount = 1;\n\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\n\t\tthis.isRenderContext = true;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn getCacheKey( this );\n\n\t}\n\n}\n\nexport function getCacheKey( renderContext ) {\n\n\tconst { textures, activeCubeFace } = renderContext;\n\n\tconst values = [ activeCubeFace ];\n\n\tfor ( const texture of textures ) {\n\n\t\tvalues.push( texture.id );\n\n\t}\n\n\treturn hashArray( values );\n\n}\n\nexport default RenderContext;\n", "import ChainMap from './ChainMap.js';\nimport RenderContext from './RenderContext.js';\n\nclass RenderContexts {\n\n\tconstructor() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tget( scene, camera, renderTarget = null ) {\n\n\t\tconst chainKey = [ scene, camera ];\n\n\t\tlet attachmentState;\n\n\t\tif ( renderTarget === null ) {\n\n\t\t\tattachmentState = 'default';\n\n\t\t} else {\n\n\t\t\tconst format = renderTarget.texture.format;\n\t\t\tconst count = renderTarget.textures.length;\n\n\t\t\tattachmentState = `${ count }:${ format }:${ renderTarget.samples }:${ renderTarget.depthBuffer }:${ renderTarget.stencilBuffer }`;\n\n\t\t}\n\n\t\tconst chainMap = this.getChainMap( attachmentState );\n\n\t\tlet renderState = chainMap.get( chainKey );\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new RenderContext();\n\n\t\t\tchainMap.set( chainKey, renderState );\n\n\t\t}\n\n\t\tif ( renderTarget !== null ) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\n\t\treturn renderState;\n\n\t}\n\n\tgetChainMap( attachmentState ) {\n\n\t\treturn this.chainMaps[ attachmentState ] || ( this.chainMaps[ attachmentState ] = new ChainMap() );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n}\n\nexport default RenderContexts;\n", "import DataMap from './DataMap.js';\n\nimport { Vector3 } from '../../math/Vector3.js';\nimport { DepthTexture } from '../../textures/DepthTexture.js';\nimport { DepthStencilFormat, DepthFormat, UnsignedIntType, UnsignedInt248Type, LinearFilter, NearestFilter, EquirectangularReflectionMapping, EquirectangularRefractionMapping, CubeReflectionMapping, CubeRefractionMapping, UnsignedByteType } from '../../constants.js';\n\nconst _size = /*@__PURE__*/ new Vector3();\n\nclass Textures extends DataMap {\n\n\tconstructor( renderer, backend, info ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.backend = backend;\n\t\tthis.info = info;\n\n\t}\n\n\tupdateRenderTarget( renderTarget, activeMipmapLevel = 0 ) {\n\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tconst sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\t\tconst depthTextureMips = renderTargetData.depthTextureMips || ( renderTargetData.depthTextureMips = {} );\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tconst size = this.getSize( textures[ 0 ] );\n\n\t\tconst mipWidth = size.width >> activeMipmapLevel;\n\t\tconst mipHeight = size.height >> activeMipmapLevel;\n\n\t\tlet depthTexture = renderTarget.depthTexture || depthTextureMips[ activeMipmapLevel ];\n\t\tlet textureNeedsUpdate = false;\n\n\t\tif ( depthTexture === undefined ) {\n\n\t\t\tdepthTexture = new DepthTexture();\n\t\t\tdepthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat : DepthFormat;\n\t\t\tdepthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type : UnsignedIntType; // FloatType\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t\tdepthTextureMips[ activeMipmapLevel ] = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t}\n\n\t\trenderTargetData.width = size.width;\n\t\trenderTargetData.height = size.height;\n\t\trenderTargetData.textures = textures;\n\t\trenderTargetData.depthTexture = depthTexture;\n\t\trenderTargetData.depth = renderTarget.depthBuffer;\n\t\trenderTargetData.stencil = renderTarget.stencilBuffer;\n\t\trenderTargetData.renderTarget = renderTarget;\n\n\t\tif ( renderTargetData.sampleCount !== sampleCount ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\trenderTargetData.sampleCount = sampleCount;\n\n\t\t}\n\n\t\t//\n\n\t\tconst options = { sampleCount };\n\n\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsUpdate ) texture.needsUpdate = true;\n\n\t\t\tthis.updateTexture( texture, options );\n\n\t\t}\n\n\t\tthis.updateTexture( depthTexture, options );\n\n\t\t// dispose handler\n\n\t\tif ( renderTargetData.initialized !== true ) {\n\n\t\t\trenderTargetData.initialized = true;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tthis._destroyTexture( textures[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis._destroyTexture( depthTexture );\n\n\t\t\t\tthis.delete( renderTarget );\n\n\t\t\t};\n\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t}\n\n\tupdateTexture( texture, options = {} ) {\n\n\t\tconst textureData = this.get( texture );\n\t\tif ( textureData.initialized === true && textureData.version === texture.version ) return;\n\n\t\tconst isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n\t\tconst backend = this.backend;\n\n\t\tif ( isRenderTarget && textureData.initialized === true ) {\n\n\t\t\t// it's an update\n\n\t\t\tbackend.destroySampler( texture );\n\t\t\tbackend.destroyTexture( texture );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tconst renderer = this.renderer;\n\t\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttexture.type = renderTarget.texture.type;\n\n\t\t\t} else {\n\n\t\t\t\ttexture.type = UnsignedByteType;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst { width, height, depth } = this.getSize( texture );\n\n\t\toptions.width = width;\n\t\toptions.height = height;\n\t\toptions.depth = depth;\n\t\toptions.needsMipmaps = this.needsMipmaps( texture );\n\t\toptions.levels = options.needsMipmaps ? this.getMipLevels( texture, width, height ) : 1;\n\n\t\t//\n\n\t\tif ( isRenderTarget || texture.isStorageTexture === true ) {\n\n\t\t\tbackend.createSampler( texture );\n\t\t\tbackend.createTexture( texture, options );\n\n\t\t\ttextureData.generation = texture.version;\n\n\t\t} else {\n\n\t\t\tconst needsCreate = textureData.initialized !== true;\n\n\t\t\tif ( needsCreate ) backend.createSampler( texture );\n\n\t\t\tif ( texture.version > 0 ) {\n\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.images ) {\n\n\t\t\t\t\t\tconst images = [];\n\n\t\t\t\t\t\tfor ( const image of texture.images ) {\n\n\t\t\t\t\t\t\timages.push( image );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toptions.images = images;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toptions.image = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {\n\n\t\t\t\t\t\tbackend.createTexture( texture, options );\n\n\t\t\t\t\t\ttextureData.isDefaultTexture = false;\n\t\t\t\t\t\ttextureData.generation = texture.version;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texture.source.dataReady === true ) backend.updateTexture( texture, options );\n\n\t\t\t\t\tif ( options.needsMipmaps && texture.mipmaps.length === 0 ) backend.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// async update\n\n\t\t\t\tbackend.createDefaultTexture( texture );\n\n\t\t\t\ttextureData.isDefaultTexture = true;\n\t\t\t\ttextureData.generation = texture.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// dispose handler\n\n\t\tif ( textureData.initialized !== true ) {\n\n\t\t\ttextureData.initialized = true;\n\t\t\ttextureData.generation = texture.version;\n\n\t\t\t//\n\n\t\t\tthis.info.memory.textures ++;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\ttexture.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t\tthis.info.memory.textures --;\n\n\t\t\t};\n\n\t\t\ttexture.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t}\n\n\tgetSize( texture, target = _size ) {\n\n\t\tlet image = texture.images ? texture.images[ 0 ] : texture.image;\n\n\t\tif ( image ) {\n\n\t\t\tif ( image.image !== undefined ) image = image.image;\n\n\t\t\ttarget.width = image.width;\n\t\t\ttarget.height = image.height;\n\t\t\ttarget.depth = texture.isCubeTexture ? 6 : ( image.depth || 1 );\n\n\t\t} else {\n\n\t\t\ttarget.width = target.height = target.depth = 1;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetMipLevels( texture, width, height ) {\n\n\t\tlet mipLevelCount;\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tmipLevelCount = texture.mipmaps.length;\n\n\t\t} else {\n\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\n\n\t\t}\n\n\t\treturn mipLevelCount;\n\n\t}\n\n\tneedsMipmaps( texture ) {\n\n\t\tif ( this.isEnvironmentTexture( texture ) ) return true;\n\n\t\treturn ( texture.isCompressedTexture === true ) || ( ( texture.minFilter !== NearestFilter ) && ( texture.minFilter !== LinearFilter ) );\n\n\t}\n\n\tisEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t_destroyTexture( texture ) {\n\n\t\tthis.backend.destroySampler( texture );\n\t\tthis.backend.destroyTexture( texture );\n\n\t\tthis.delete( texture );\n\n\t}\n\n}\n\nexport default Textures;\n", "import { Color } from '../../math/Color.js';\n\nclass Color4 extends Color {\n\n\tconstructor( r, g, b, a = 1 ) {\n\n\t\tsuper( r, g, b );\n\n\t\tthis.a = a;\n\n\t}\n\n\tset( r, g, b, a = 1 ) {\n\n\t\tthis.a = a;\n\n\t\treturn super.set( r, g, b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tif ( color.a !== undefined ) this.a = color.a;\n\n\t\treturn super.copy( color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\n\n\t}\n\n}\n\nexport default Color4;\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nexport { SphereGeometry };\n", "import DataMap from './DataMap.js';\nimport Color4 from './Color4.js';\nimport { vec4, context, normalWorld, backgroundBlurriness, backgroundIntensity, modelViewProjection } from '../../nodes/TSL.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { Mesh } from '../../objects/Mesh.js';\nimport { SphereGeometry } from '../../geometries/SphereGeometry.js';\nimport { BackSide, LinearSRGBColorSpace } from '../../constants.js';\n\nconst _clearColor = /*@__PURE__*/ new Color4();\n\nclass Background extends DataMap {\n\n\tconstructor( renderer, nodes ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\n\t}\n\n\tupdate( scene, renderList, renderContext ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\n\n\t\tlet forceClear = false;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\trenderer._clearColor.getRGB( _clearColor, LinearSRGBColorSpace );\n\t\t\t_clearColor.a = renderer._clearColor.a;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\tbackground.getRGB( _clearColor, LinearSRGBColorSpace );\n\t\t\t_clearColor.a = 1;\n\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneData = this.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\n\n\t\t\tif ( backgroundMesh === undefined ) {\n\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUV: () => normalWorld,\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\n\t\t\t\t} );\n\n\t\t\t\tlet viewProj = modelViewProjection();\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\n\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\n\t\t\t\tnodeMaterial.name = 'Background.material';\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.fog = false;\n\t\t\t\tnodeMaterial.lights = false;\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\n\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\n\t\t\t\tbackgroundMesh.frustumCulled = false;\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\n\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\n\t\t\t\tsceneData.backgroundMeshNode.needsUpdate = true;\n\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\t_clearColor.multiplyScalar( _clearColor.a );\n\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\n\n\t\t\tclearColorValue.r = _clearColor.r;\n\t\t\tclearColorValue.g = _clearColor.g;\n\t\t\tclearColorValue.b = _clearColor.b;\n\t\t\tclearColorValue.a = _clearColor.a;\n\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\n\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\n\n\t\t} else {\n\n\t\t\trenderContext.clearColor = false;\n\t\t\trenderContext.clearDepth = false;\n\t\t\trenderContext.clearStencil = false;\n\n\t\t}\n\n\t}\n\n}\n\nexport default Background;\n", "import BindGroup from '../BindGroup.js';\n\nclass NodeBuilderState {\n\n\tconstructor( vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, monitor, transforms = [] ) {\n\n\t\tthis.vertexShader = vertexShader;\n\t\tthis.fragmentShader = fragmentShader;\n\t\tthis.computeShader = computeShader;\n\t\tthis.transforms = transforms;\n\n\t\tthis.nodeAttributes = nodeAttributes;\n\t\tthis.bindings = bindings;\n\n\t\tthis.updateNodes = updateNodes;\n\t\tthis.updateBeforeNodes = updateBeforeNodes;\n\t\tthis.updateAfterNodes = updateAfterNodes;\n\n\t\tthis.monitor = monitor;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n\tcreateBindings() {\n\n\t\tconst bindings = [];\n\n\t\tfor ( const instanceGroup of this.bindings ) {\n\n\t\t\tconst shared = instanceGroup.bindings[ 0 ].groupNode.shared;\n\n\t\t\tif ( shared !== true ) {\n\n\t\t\t\tconst bindingsGroup = new BindGroup( instanceGroup.name, [], instanceGroup.index, instanceGroup );\n\t\t\t\tbindings.push( bindingsGroup );\n\n\t\t\t\tfor ( const instanceBinding of instanceGroup.bindings ) {\n\n\t\t\t\t\tbindingsGroup.bindings.push( instanceBinding.clone() );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbindings.push( instanceGroup );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n}\n\nexport default NodeBuilderState;\n", "import DataMap from '../DataMap.js';\nimport ChainMap from '../ChainMap.js';\nimport NodeBuilderState from './NodeBuilderState.js';\nimport { cubeMapNode } from '../../../nodes/utils/CubeMapNode.js';\nimport { NodeFrame } from '../../../nodes/Nodes.js';\nimport { objectGroup, renderGroup, frameGroup, cubeTexture, texture, rangeFog, densityFog, reference, normalWorld, pmremTexture, screenUV } from '../../../nodes/TSL.js';\n\nimport { CubeUVReflectionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../../constants.js';\nimport { hashArray } from '../../../nodes/core/NodeUtils.js';\n\nconst outputNodeMap = new WeakMap();\n\nclass Nodes extends DataMap {\n\n\tconstructor( renderer, backend ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.backend = backend;\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\t\tthis.callHashCache = new ChainMap();\n\t\tthis.groupsData = new ChainMap();\n\n\t}\n\n\tupdateGroup( nodeUniformsGroup ) {\n\n\t\tconst groupNode = nodeUniformsGroup.groupNode;\n\t\tconst name = groupNode.name;\n\n\t\t// objectGroup is every updated\n\n\t\tif ( name === objectGroup.name ) return true;\n\n\t\t// renderGroup is updated once per render/compute call\n\n\t\tif ( name === renderGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst renderId = this.nodeFrame.renderId;\n\n\t\t\tif ( uniformsGroupData.renderId !== renderId ) {\n\n\t\t\t\tuniformsGroupData.renderId = renderId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// frameGroup is updated once per frame\n\n\t\tif ( name === frameGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst frameId = this.nodeFrame.frameId;\n\n\t\t\tif ( uniformsGroupData.frameId !== frameId ) {\n\n\t\t\t\tuniformsGroupData.frameId = frameId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// other groups are updated just when groupNode.needsUpdate is true\n\n\t\tconst groupChain = [ groupNode, nodeUniformsGroup ];\n\n\t\tlet groupData = this.groupsData.get( groupChain );\n\t\tif ( groupData === undefined ) this.groupsData.set( groupChain, groupData = {} );\n\n\t\tif ( groupData.version !== groupNode.version ) {\n\n\t\t\tgroupData.version = groupNode.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgetForRenderCacheKey( renderObject ) {\n\n\t\treturn renderObject.initialCacheKey;\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst renderObjectData = this.get( renderObject );\n\n\t\tlet nodeBuilderState = renderObjectData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst { nodeBuilderCache } = this;\n\n\t\t\tconst cacheKey = this.getForRenderCacheKey( renderObject );\n\n\t\t\tnodeBuilderState = nodeBuilderCache.get( cacheKey );\n\n\t\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer );\n\t\t\t\tnodeBuilder.scene = renderObject.scene;\n\t\t\t\tnodeBuilder.material = renderObject.material;\n\t\t\t\tnodeBuilder.camera = renderObject.camera;\n\t\t\t\tnodeBuilder.context.material = renderObject.material;\n\t\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\n\t\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\n\t\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\n\t\t\t\tnodeBuilder.clippingContext = renderObject.clippingContext;\n\t\t\t\tnodeBuilder.build();\n\n\t\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\t\tnodeBuilderCache.set( cacheKey, nodeBuilderState );\n\n\t\t\t}\n\n\t\t\tnodeBuilderState.usedTimes ++;\n\n\t\t\trenderObjectData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tif ( object.isRenderObject ) {\n\n\t\t\tconst nodeBuilderState = this.get( object ).nodeBuilderState;\n\t\t\tnodeBuilderState.usedTimes --;\n\n\t\t\tif ( nodeBuilderState.usedTimes === 0 ) {\n\n\t\t\t\tthis.nodeBuilderCache.delete( this.getForRenderCacheKey( object ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst computeData = this.get( computeNode );\n\n\t\tlet nodeBuilderState = computeData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );\n\t\t\tnodeBuilder.build();\n\n\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\tcomputeData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\t_createNodeBuilderState( nodeBuilder ) {\n\n\t\treturn new NodeBuilderState(\n\t\t\tnodeBuilder.vertexShader,\n\t\t\tnodeBuilder.fragmentShader,\n\t\t\tnodeBuilder.computeShader,\n\t\t\tnodeBuilder.getAttributesArray(),\n\t\t\tnodeBuilder.getBindings(),\n\t\t\tnodeBuilder.updateNodes,\n\t\t\tnodeBuilder.updateBeforeNodes,\n\t\t\tnodeBuilder.updateAfterNodes,\n\t\t\tnodeBuilder.monitor,\n\t\t\tnodeBuilder.transforms\n\t\t);\n\n\t}\n\n\tgetEnvironmentNode( scene ) {\n\n\t\treturn scene.environmentNode || this.get( scene ).environmentNode || null;\n\n\t}\n\n\tgetBackgroundNode( scene ) {\n\n\t\treturn scene.backgroundNode || this.get( scene ).backgroundNode || null;\n\n\t}\n\n\tgetFogNode( scene ) {\n\n\t\treturn scene.fogNode || this.get( scene ).fogNode || null;\n\n\t}\n\n\tgetCacheKey( scene, lightsNode ) {\n\n\t\tconst chain = [ scene, lightsNode ];\n\t\tconst callId = this.renderer.info.calls;\n\n\t\tlet cacheKeyData = this.callHashCache.get( chain );\n\n\t\tif ( cacheKeyData === undefined || cacheKeyData.callId !== callId ) {\n\n\t\t\tconst environmentNode = this.getEnvironmentNode( scene );\n\t\t\tconst fogNode = this.getFogNode( scene );\n\n\t\t\tconst values = [];\n\n\t\t\tif ( lightsNode ) values.push( lightsNode.getCacheKey( true ) );\n\t\t\tif ( environmentNode ) values.push( environmentNode.getCacheKey() );\n\t\t\tif ( fogNode ) values.push( fogNode.getCacheKey() );\n\n\t\t\tvalues.push( this.renderer.shadowMap.enabled ? 1 : 0 );\n\n\t\t\tcacheKeyData = {\n\t\t\t\tcallId,\n\t\t\t\tcacheKey: hashArray( values )\n\t\t\t};\n\n\t\t\tthis.callHashCache.set( chain, cacheKeyData );\n\n\t\t}\n\n\t\treturn cacheKeyData.cacheKey;\n\n\t}\n\n\tupdateScene( scene ) {\n\n\t\tthis.updateEnvironment( scene );\n\t\tthis.updateFog( scene );\n\t\tthis.updateBackground( scene );\n\n\t}\n\n\tget isToneMappingState() {\n\n\t\treturn this.renderer.getRenderTarget() ? false : true;\n\n\t}\n\n\tupdateBackground( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tconst forceUpdate = ( scene.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 ) || ( scene.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0 );\n\n\t\t\tif ( sceneData.background !== background || forceUpdate ) {\n\n\t\t\t\tlet backgroundNode = null;\n\n\t\t\t\tif ( background.isCubeTexture === true || ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\t\tif ( scene.backgroundBlurriness > 0 || background.mapping === CubeUVReflectionMapping ) {\n\n\t\t\t\t\t\tbackgroundNode = pmremTexture( background, normalWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet envMap;\n\n\t\t\t\t\t\tif ( background.isCubeTexture === true ) {\n\n\t\t\t\t\t\t\tenvMap = cubeTexture( background );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tenvMap = texture( background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbackgroundNode = cubeMapNode( envMap );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( background.isTexture === true ) {\n\n\t\t\t\t\tbackgroundNode = texture( background, screenUV.flipY() ).setUpdateMatrix( true );\n\n\t\t\t\t} else if ( background.isColor !== true ) {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.backgroundNode = backgroundNode;\n\t\t\t\tsceneData.background = background;\n\t\t\t\tsceneData.backgroundBlurriness = scene.backgroundBlurriness;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.backgroundNode ) {\n\n\t\t\tdelete sceneData.backgroundNode;\n\t\t\tdelete sceneData.background;\n\n\t\t}\n\n\t}\n\n\tupdateFog( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tif ( sceneData.fog !== fog ) {\n\n\t\t\t\tlet fogNode = null;\n\n\t\t\t\tif ( fog.isFogExp2 ) {\n\n\t\t\t\t\tconst color = reference( 'color', 'color', fog ).setGroup( renderGroup );\n\t\t\t\t\tconst density = reference( 'density', 'float', fog ).setGroup( renderGroup );\n\n\t\t\t\t\tfogNode = densityFog( color, density );\n\n\t\t\t\t} else if ( fog.isFog ) {\n\n\t\t\t\t\tconst color = reference( 'color', 'color', fog ).setGroup( renderGroup );\n\t\t\t\t\tconst near = reference( 'near', 'float', fog ).setGroup( renderGroup );\n\t\t\t\t\tconst far = reference( 'far', 'float', fog ).setGroup( renderGroup );\n\n\t\t\t\t\tfogNode = rangeFog( color, near, far );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported fog configuration.', fog );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.fogNode = fogNode;\n\t\t\t\tsceneData.fog = fog;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete sceneData.fogNode;\n\t\t\tdelete sceneData.fog;\n\n\t\t}\n\n\t}\n\n\tupdateEnvironment( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst environment = scene.environment;\n\n\t\tif ( environment ) {\n\n\t\t\tif ( sceneData.environment !== environment ) {\n\n\t\t\t\tlet environmentNode = null;\n\n\t\t\t\tif ( environment.isCubeTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = cubeTexture( environment );\n\n\t\t\t\t} else if ( environment.isTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = texture( environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'Nodes: Unsupported environment configuration.', environment );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.environmentNode = environmentNode;\n\t\t\t\tsceneData.environment = environment;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.environmentNode ) {\n\n\t\t\tdelete sceneData.environmentNode;\n\t\t\tdelete sceneData.environment;\n\n\t\t}\n\n\t}\n\n\tgetNodeFrame( renderer = this.renderer, scene = null, object = null, camera = null, material = null ) {\n\n\t\tconst nodeFrame = this.nodeFrame;\n\t\tnodeFrame.renderer = renderer;\n\t\tnodeFrame.scene = scene;\n\t\tnodeFrame.object = object;\n\t\tnodeFrame.camera = camera;\n\t\tnodeFrame.material = material;\n\n\t\treturn nodeFrame;\n\n\t}\n\n\tgetNodeFrameForRender( renderObject ) {\n\n\t\treturn this.getNodeFrame( renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material );\n\n\t}\n\n\tgetOutputCacheKey() {\n\n\t\tconst renderer = this.renderer;\n\n\t\treturn renderer.toneMapping + ',' + renderer.currentColorSpace;\n\n\t}\n\n\thasOutputChange( outputTarget ) {\n\n\t\tconst cacheKey = outputNodeMap.get( outputTarget );\n\n\t\treturn cacheKey !== this.getOutputCacheKey();\n\n\t}\n\n\tgetOutputNode( outputTexture ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst cacheKey = this.getOutputCacheKey();\n\n\t\tconst output = texture( outputTexture, screenUV ).renderOutput( renderer.toneMapping, renderer.currentColorSpace );\n\n\t\toutputNodeMap.set( outputTexture, cacheKey );\n\n\t\treturn output;\n\n\t}\n\n\tupdateBefore( renderObject ) {\n\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\n\n\t\t\t// update frame state for each node\n\n\t\t\tthis.getNodeFrameForRender( renderObject ).updateBeforeNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateAfter( renderObject ) {\n\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateAfterNodes ) {\n\n\t\t\t// update frame state for each node\n\n\t\t\tthis.getNodeFrameForRender( renderObject ).updateAfterNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateForCompute( computeNode ) {\n\n\t\tconst nodeFrame = this.getNodeFrame();\n\t\tconst nodeBuilder = this.getForCompute( computeNode );\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tneedsRefresh( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst monitor = renderObject.getMonitor();\n\n\t\treturn monitor.needsRefresh( renderObject, nodeFrame );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\n\t}\n\n}\n\nexport default Nodes;\n", "class RenderBundle {\n\n\tconstructor( scene, camera ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t}\n\n\tclone() {\n\n\t\treturn Object.assign( new this.constructor(), this );\n\n\t}\n\n}\n\nexport default RenderBundle;\n", "import ChainMap from './ChainMap.js';\nimport RenderBundle from './RenderBundle.js';\n\nclass RenderBundles {\n\n\tconstructor() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n\tget( scene, camera ) {\n\n\t\tconst lists = this.lists;\n\t\tconst keys = [ scene, camera ];\n\n\t\tlet list = lists.get( keys );\n\n\t\tif ( list === undefined ) {\n\n\t\t\tlist = new RenderBundle( scene, camera );\n\t\t\tlists.set( keys, list );\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n}\n\nexport default RenderBundles;\n", "class NodeLibrary {\n\n\tconstructor() {\n\n\t\tthis.lightNodes = new WeakMap();\n\t\tthis.materialNodes = new Map();\n\t\tthis.toneMappingNodes = new Map();\n\t\tthis.colorSpaceNodes = new Map();\n\n\t}\n\n\tfromMaterial( material ) {\n\n\t\tif ( material.isNodeMaterial ) return material;\n\n\t\tlet nodeMaterial = null;\n\n\t\tconst nodeMaterialClass = this.getMaterialNodeClass( material.type );\n\n\t\tif ( nodeMaterialClass !== null ) {\n\n\t\t\tnodeMaterial = new nodeMaterialClass();\n\n\t\t\tfor ( const key in material ) {\n\n\t\t\t\tnodeMaterial[ key ] = material[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeMaterial;\n\n\t}\n\n\taddColorSpace( colorSpaceNode, colorSpace ) {\n\n\t\tthis.addType( colorSpaceNode, colorSpace, this.colorSpaceNodes );\n\n\t}\n\n\tgetColorSpaceFunction( colorSpace ) {\n\n\t\treturn this.colorSpaceNodes.get( colorSpace ) || null;\n\n\t}\n\n\taddToneMapping( toneMappingNode, toneMapping ) {\n\n\t\tthis.addType( toneMappingNode, toneMapping, this.toneMappingNodes );\n\n\t}\n\n\tgetToneMappingFunction( toneMapping ) {\n\n\t\treturn this.toneMappingNodes.get( toneMapping ) || null;\n\n\t}\n\n\tgetMaterialNodeClass( materialType ) {\n\n\t\treturn this.materialNodes.get( materialType ) || null;\n\n\t}\n\n\taddMaterial( materialNodeClass, materialClass ) {\n\n\t\tthis.addType( materialNodeClass, materialClass.name, this.materialNodes );\n\n\t}\n\n\tgetLightNodeClass( light ) {\n\n\t\treturn this.lightNodes.get( light ) || null;\n\n\t}\n\n\taddLight( lightNodeClass, lightClass ) {\n\n\t\tthis.addClass( lightNodeClass, lightClass, this.lightNodes );\n\n\t}\n\n\taddType( nodeClass, type, library ) {\n\n\t\tif ( library.has( type ) ) {\n\n\t\t\tconsole.warn( `Redefinition of node ${ type }` );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\n\t\tif ( typeof type === 'function' || typeof type === 'object' ) throw new Error( `Base class ${ type } is not a class.` );\n\n\t\tlibrary.set( type, nodeClass );\n\n\t}\n\n\taddClass( nodeClass, baseClass, library ) {\n\n\t\tif ( library.has( baseClass ) ) {\n\n\t\t\tconsole.warn( `Redefinition of node ${ baseClass.name }` );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\n\t\tif ( typeof baseClass !== 'function' ) throw new Error( `Base class ${ baseClass.name } is not a class.` );\n\n\t\tlibrary.set( baseClass, nodeClass );\n\n\t}\n\n}\n\nexport default NodeLibrary;\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\nimport { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n\nexport { Frustum };\n", "import Animation from './Animation.js';\nimport RenderObjects from './RenderObjects.js';\nimport Attributes from './Attributes.js';\nimport Geometries from './Geometries.js';\nimport Info from './Info.js';\nimport Pipelines from './Pipelines.js';\nimport Bindings from './Bindings.js';\nimport RenderLists from './RenderLists.js';\nimport RenderContexts from './RenderContexts.js';\nimport Textures from './Textures.js';\nimport Background from './Background.js';\nimport Nodes from './nodes/Nodes.js';\nimport Color4 from './Color4.js';\nimport ClippingContext from './ClippingContext.js';\nimport QuadMesh from './QuadMesh.js';\nimport RenderBundles from './RenderBundles.js';\nimport NodeLibrary from './nodes/NodeLibrary.js';\n\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { Scene } from '../../scenes/Scene.js';\nimport { Frustum } from '../../math/Frustum.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { RenderTarget } from '../../core/RenderTarget.js';\nimport { DoubleSide, BackSide, FrontSide, SRGBColorSpace, NoToneMapping, LinearFilter, LinearSRGBColorSpace, HalfFloatType, RGBAFormat, PCFShadowMap } from '../../constants.js';\n\nconst _scene = /*@__PURE__*/ new Scene();\nconst _drawingBufferSize = /*@__PURE__*/ new Vector2();\nconst _screen = /*@__PURE__*/ new Vector4();\nconst _frustum = /*@__PURE__*/ new Frustum();\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _vector4 = /*@__PURE__*/ new Vector4();\n\nclass Renderer {\n\n\tconstructor( backend, parameters = {} ) {\n\n\t\tthis.isRenderer = true;\n\n\t\t//\n\n\t\tconst {\n\t\t\tlogarithmicDepthBuffer = false,\n\t\t\talpha = true,\n\t\t\tdepth = true,\n\t\t\tstencil = false,\n\t\t\tantialias = false,\n\t\t\tsamples = 0,\n\t\t\tgetFallback = null\n\t\t} = parameters;\n\n\t\t// public\n\t\tthis.domElement = backend.getDomElement();\n\n\t\tthis.backend = backend;\n\n\t\tthis.samples = samples || ( antialias === true ) ? 4 : 0;\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\tthis.alpha = alpha;\n\n\t\tthis.logarithmicDepthBuffer = logarithmicDepthBuffer;\n\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\tthis.sortObjects = true;\n\n\t\tthis.depth = depth;\n\t\tthis.stencil = stencil;\n\n\t\tthis.clippingPlanes = [];\n\n\t\tthis.info = new Info();\n\n\t\tthis.nodes = {\n\t\t\tlibrary: new NodeLibrary(),\n\t\t\tmodelViewMatrix: null,\n\t\t\tmodelNormalViewMatrix: null\n\t\t};\n\n\t\t// internals\n\n\t\tthis._getFallback = getFallback;\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = this.domElement.width;\n\t\tthis._height = this.domElement.height;\n\n\t\tthis._viewport = new Vector4( 0, 0, this._width, this._height );\n\t\tthis._scissor = new Vector4( 0, 0, this._width, this._height );\n\t\tthis._scissorTest = false;\n\n\t\tthis._attributes = null;\n\t\tthis._geometries = null;\n\t\tthis._nodes = null;\n\t\tthis._animation = null;\n\t\tthis._bindings = null;\n\t\tthis._objects = null;\n\t\tthis._pipelines = null;\n\t\tthis._bundles = null;\n\t\tthis._renderLists = null;\n\t\tthis._renderContexts = null;\n\t\tthis._textures = null;\n\t\tthis._background = null;\n\n\t\tthis._quad = new QuadMesh( new NodeMaterial() );\n\t\tthis._quad.material.type = 'Renderer_output';\n\n\t\tthis._currentRenderContext = null;\n\n\t\tthis._opaqueSort = null;\n\t\tthis._transparentSort = null;\n\n\t\tthis._frameBufferTarget = null;\n\n\t\tconst alphaClear = this.alpha === true ? 0 : 1;\n\n\t\tthis._clearColor = new Color4( 0, 0, 0, alphaClear );\n\t\tthis._clearDepth = 1;\n\t\tthis._clearStencil = 0;\n\n\t\tthis._renderTarget = null;\n\t\tthis._activeCubeFace = 0;\n\t\tthis._activeMipmapLevel = 0;\n\n\t\tthis._mrt = null;\n\n\t\tthis._renderObjectFunction = null;\n\t\tthis._currentRenderObjectFunction = null;\n\t\tthis._currentRenderBundle = null;\n\n\t\tthis._handleObjectFunction = this._renderObjectDirect;\n\n\t\tthis._initialized = false;\n\t\tthis._initPromise = null;\n\n\t\tthis._compilationPromises = null;\n\n\t\tthis.transparent = true;\n\t\tthis.opaque = true;\n\n\t\tthis.shadowMap = {\n\t\t\tenabled: false,\n\t\t\ttype: PCFShadowMap\n\t\t};\n\n\t\tthis.xr = {\n\t\t\tenabled: false\n\t\t};\n\n\t\tthis.debug = {\n\t\t\tcheckShaderErrors: true,\n\t\t\tonShaderError: null,\n\t\t\tgetShaderAsync: async ( scene, camera, object ) => {\n\n\t\t\t\tawait this.compileAsync( scene, camera );\n\n\t\t\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\t\t\tconst renderContext = this._renderContexts.get( scene, camera, this._renderTarget );\n\n\t\t\t\tconst material = scene.overrideMaterial || object.material;\n\n\t\t\t\tconst renderObject = this._objects.get( object, material, scene, camera, renderList.lightsNode, renderContext );\n\n\t\t\t\tconst { fragmentShader, vertexShader } = renderObject.getNodeBuilderState();\n\n\t\t\t\treturn { fragmentShader, vertexShader };\n\n\t\t\t}\n\t\t};\n\n\t}\n\n\tasync init() {\n\n\t\tif ( this._initialized ) {\n\n\t\t\tthrow new Error( 'Renderer: Backend has already been initialized.' );\n\n\t\t}\n\n\t\tif ( this._initPromise !== null ) {\n\n\t\t\treturn this._initPromise;\n\n\t\t}\n\n\t\tthis._initPromise = new Promise( async ( resolve, reject ) => {\n\n\t\t\tlet backend = this.backend;\n\n\t\t\ttry {\n\n\t\t\t\tawait backend.init( this );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( this._getFallback !== null ) {\n\n\t\t\t\t\t// try the fallback\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tthis.backend = backend = this._getFallback( error );\n\t\t\t\t\t\tawait backend.init( this );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\treject( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\treject( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._nodes = new Nodes( this, backend );\n\t\t\tthis._animation = new Animation( this._nodes, this.info );\n\t\t\tthis._attributes = new Attributes( backend );\n\t\t\tthis._background = new Background( this, this._nodes );\n\t\t\tthis._geometries = new Geometries( this._attributes, this.info );\n\t\t\tthis._textures = new Textures( this, backend, this.info );\n\t\t\tthis._pipelines = new Pipelines( backend, this._nodes );\n\t\t\tthis._bindings = new Bindings( backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info );\n\t\t\tthis._objects = new RenderObjects( this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info );\n\t\t\tthis._renderLists = new RenderLists();\n\t\t\tthis._bundles = new RenderBundles();\n\t\t\tthis._renderContexts = new RenderContexts();\n\n\t\t\t//\n\n\t\t\tthis._initialized = true;\n\n\t\t\tresolve();\n\n\t\t} );\n\n\t\treturn this._initPromise;\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn this.backend.coordinateSystem;\n\n\t}\n\n\tasync compileAsync( scene, camera, targetScene = null ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderContext = this._currentRenderContext;\n\t\tconst previousRenderObjectFunction = this._currentRenderObjectFunction;\n\t\tconst previousCompilationPromises = this._compilationPromises;\n\n\t\t//\n\n\t\tconst sceneRef = ( scene.isScene === true ) ? scene : _scene;\n\n\t\tif ( targetScene === null ) targetScene = scene;\n\n\t\tconst renderTarget = this._renderTarget;\n\t\tconst renderContext = this._renderContexts.get( targetScene, camera, renderTarget );\n\t\tconst activeMipmapLevel = this._activeMipmapLevel;\n\n\t\tconst compilationPromises = [];\n\n\t\tthis._currentRenderContext = renderContext;\n\t\tthis._currentRenderObjectFunction = this.renderObject;\n\n\t\tthis._handleObjectFunction = this._createObjectPipeline;\n\n\t\tthis._compilationPromises = compilationPromises;\n\n\t\tnodeFrame.renderId ++;\n\n\t\t//\n\n\t\tnodeFrame.update();\n\n\t\t//\n\n\t\trenderContext.depth = this.depth;\n\t\trenderContext.stencil = this.stencil;\n\n\t\tif ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();\n\t\trenderContext.clippingContext.updateGlobal( this, camera );\n\n\t\t//\n\n\t\tsceneRef.onBeforeRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.begin();\n\n\t\tthis._projectObject( scene, camera, 0, renderList );\n\n\t\t// include lights from target scene\n\t\tif ( targetScene !== scene ) {\n\n\t\t\ttargetScene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\trenderList.pushLight( object );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\trenderList.finish();\n\n\t\t//\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget, activeMipmapLevel );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\n\t\t} else {\n\n\t\t\trenderContext.textures = null;\n\t\t\trenderContext.depthTexture = null;\n\n\t\t}\n\n\t\t//\n\n\t\tthis._nodes.updateScene( sceneRef );\n\n\t\t//\n\n\t\tthis._background.update( sceneRef, renderList, renderContext );\n\n\t\t// process render lists\n\n\t\tconst opaqueObjects = renderList.opaque;\n\t\tconst transparentObjects = renderList.transparent;\n\t\tconst lightsNode = renderList.lightsNode;\n\n\t\tif ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\tif ( this.transparent === true && transparentObjects.length > 0 ) this._renderObjects( transparentObjects, camera, sceneRef, lightsNode );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t\tthis._currentRenderContext = previousRenderContext;\n\t\tthis._currentRenderObjectFunction = previousRenderObjectFunction;\n\t\tthis._compilationPromises = previousCompilationPromises;\n\n\t\tthis._handleObjectFunction = this._renderObjectDirect;\n\n\t\t// wait for all promises setup by backends awaiting compilation/linking/pipeline creation to complete\n\n\t\tawait Promise.all( compilationPromises );\n\n\t}\n\n\tasync renderAsync( scene, camera ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tconst renderContext = this._renderScene( scene, camera );\n\n\t\tawait this.backend.resolveTimestampAsync( renderContext, 'render' );\n\n\t}\n\n\tsetMRT( mrt ) {\n\n\t\tthis._mrt = mrt;\n\n\t\treturn this;\n\n\t}\n\n\tgetMRT() {\n\n\t\treturn this._mrt;\n\n\t}\n\n\t_renderBundle( bundle, sceneRef, lightsNode ) {\n\n\t\tconst { bundleGroup, camera, renderList } = bundle;\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\t//\n\n\t\tconst renderBundle = this._bundles.get( bundleGroup, camera );\n\t\tconst renderBundleData = this.backend.get( renderBundle );\n\n\t\tif ( renderBundleData.renderContexts === undefined ) renderBundleData.renderContexts = new Set();\n\n\t\t//\n\n\t\tconst needsUpdate = bundleGroup.version !== renderBundleData.version;\n\t\tconst renderBundleNeedsUpdate = renderBundleData.renderContexts.has( renderContext ) === false || needsUpdate;\n\n\t\trenderBundleData.renderContexts.add( renderContext );\n\n\t\tif ( renderBundleNeedsUpdate ) {\n\n\t\t\tthis.backend.beginBundle( renderContext );\n\n\t\t\tif ( renderBundleData.renderObjects === undefined || needsUpdate ) {\n\n\t\t\t\trenderBundleData.renderObjects = [];\n\n\t\t\t}\n\n\t\t\tthis._currentRenderBundle = renderBundle;\n\n\t\t\tconst opaqueObjects = renderList.opaque;\n\n\t\t\tif ( opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\n\t\t\tthis._currentRenderBundle = null;\n\n\t\t\t//\n\n\t\t\tthis.backend.finishBundle( renderContext, renderBundle );\n\n\t\t\trenderBundleData.version = bundleGroup.version;\n\n\t\t} else {\n\n\t\t\tconst { renderObjects } = renderBundleData;\n\n\t\t\tfor ( let i = 0, l = renderObjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderObject = renderObjects[ i ];\n\n\t\t\t\tif ( this._nodes.needsRefresh( renderObject ) ) {\n\n\t\t\t\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t\t\t\tthis._nodes.updateForRender( renderObject );\n\t\t\t\t\tthis._bindings.updateForRender( renderObject );\n\n\t\t\t\t\tthis._nodes.updateAfter( renderObject );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.backend.addBundle( renderContext, renderBundle );\n\n\t}\n\n\trender( scene, camera ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.' );\n\n\t\t\treturn this.renderAsync( scene, camera );\n\n\t\t}\n\n\t\tthis._renderScene( scene, camera );\n\n\t}\n\n\t_getFrameBufferTarget() {\n\n\t\tconst { currentToneMapping, currentColorSpace } = this;\n\n\t\tconst useToneMapping = currentToneMapping !== NoToneMapping;\n\t\tconst useColorSpace = currentColorSpace !== LinearSRGBColorSpace;\n\n\t\tif ( useToneMapping === false && useColorSpace === false ) return null;\n\n\t\tconst { width, height } = this.getDrawingBufferSize( _drawingBufferSize );\n\t\tconst { depth, stencil } = this;\n\n\t\tlet frameBufferTarget = this._frameBufferTarget;\n\n\t\tif ( frameBufferTarget === null ) {\n\n\t\t\tframeBufferTarget = new RenderTarget( width, height, {\n\t\t\t\tdepthBuffer: depth,\n\t\t\t\tstencilBuffer: stencil,\n\t\t\t\ttype: HalfFloatType, // FloatType\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tsamples: this.samples\n\t\t\t} );\n\n\t\t\tframeBufferTarget.isPostProcessingRenderTarget = true;\n\n\t\t\tthis._frameBufferTarget = frameBufferTarget;\n\n\t\t}\n\n\t\tframeBufferTarget.depthBuffer = depth;\n\t\tframeBufferTarget.stencilBuffer = stencil;\n\t\tframeBufferTarget.setSize( width, height );\n\t\tframeBufferTarget.viewport.copy( this._viewport );\n\t\tframeBufferTarget.scissor.copy( this._scissor );\n\t\tframeBufferTarget.viewport.multiplyScalar( this._pixelRatio );\n\t\tframeBufferTarget.scissor.multiplyScalar( this._pixelRatio );\n\t\tframeBufferTarget.scissorTest = this._scissorTest;\n\n\t\treturn frameBufferTarget;\n\n\t}\n\n\t_renderScene( scene, camera, useFrameBufferTarget = true ) {\n\n\t\tconst frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderContext = this._currentRenderContext;\n\t\tconst previousRenderObjectFunction = this._currentRenderObjectFunction;\n\n\t\t//\n\n\t\tconst sceneRef = ( scene.isScene === true ) ? scene : _scene;\n\n\t\tconst outputRenderTarget = this._renderTarget;\n\n\t\tconst activeCubeFace = this._activeCubeFace;\n\t\tconst activeMipmapLevel = this._activeMipmapLevel;\n\n\t\t//\n\n\t\tlet renderTarget;\n\n\t\tif ( frameBufferTarget !== null ) {\n\n\t\t\trenderTarget = frameBufferTarget;\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t} else {\n\n\t\t\trenderTarget = outputRenderTarget;\n\n\t\t}\n\n\t\t//\n\n\t\tconst renderContext = this._renderContexts.get( scene, camera, renderTarget );\n\n\t\tthis._currentRenderContext = renderContext;\n\t\tthis._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.render.calls ++;\n\t\tthis.info.render.frameCalls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tif ( camera.coordinateSystem !== coordinateSystem ) {\n\n\t\t\tcamera.coordinateSystem = coordinateSystem;\n\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t//\n\n\t\tlet viewport = this._viewport;\n\t\tlet scissor = this._scissor;\n\t\tlet pixelRatio = this._pixelRatio;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tviewport = renderTarget.viewport;\n\t\t\tscissor = renderTarget.scissor;\n\t\t\tpixelRatio = 1;\n\n\t\t}\n\n\t\tthis.getDrawingBufferSize( _drawingBufferSize );\n\n\t\t_screen.set( 0, 0, _drawingBufferSize.width, _drawingBufferSize.height );\n\n\t\tconst minDepth = ( viewport.minDepth === undefined ) ? 0 : viewport.minDepth;\n\t\tconst maxDepth = ( viewport.maxDepth === undefined ) ? 1 : viewport.maxDepth;\n\n\t\trenderContext.viewportValue.copy( viewport ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.viewportValue.width >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.height >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.minDepth = minDepth;\n\t\trenderContext.viewportValue.maxDepth = maxDepth;\n\t\trenderContext.viewport = renderContext.viewportValue.equals( _screen ) === false;\n\n\t\trenderContext.scissorValue.copy( scissor ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.scissor = this._scissorTest && renderContext.scissorValue.equals( _screen ) === false;\n\t\trenderContext.scissorValue.width >>= activeMipmapLevel;\n\t\trenderContext.scissorValue.height >>= activeMipmapLevel;\n\n\t\tif ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();\n\t\trenderContext.clippingContext.updateGlobal( this, camera );\n\n\t\t//\n\n\t\tsceneRef.onBeforeRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix, coordinateSystem );\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.begin();\n\n\t\tthis._projectObject( scene, camera, 0, renderList );\n\n\t\trenderList.finish();\n\n\t\tif ( this.sortObjects === true ) {\n\n\t\t\trenderList.sort( this._opaqueSort, this._transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget, activeMipmapLevel );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\t\t\trenderContext.width = renderTargetData.width;\n\t\t\trenderContext.height = renderTargetData.height;\n\t\t\trenderContext.renderTarget = renderTarget;\n\t\t\trenderContext.depth = renderTarget.depthBuffer;\n\t\t\trenderContext.stencil = renderTarget.stencilBuffer;\n\n\t\t} else {\n\n\t\t\trenderContext.textures = null;\n\t\t\trenderContext.depthTexture = null;\n\t\t\trenderContext.width = this.domElement.width;\n\t\t\trenderContext.height = this.domElement.height;\n\t\t\trenderContext.depth = this.depth;\n\t\t\trenderContext.stencil = this.stencil;\n\n\t\t}\n\n\t\trenderContext.width >>= activeMipmapLevel;\n\t\trenderContext.height >>= activeMipmapLevel;\n\t\trenderContext.activeCubeFace = activeCubeFace;\n\t\trenderContext.activeMipmapLevel = activeMipmapLevel;\n\t\trenderContext.occlusionQueryCount = renderList.occlusionQueryCount;\n\n\t\t//\n\n\t\tthis._nodes.updateScene( sceneRef );\n\n\t\t//\n\n\t\tthis._background.update( sceneRef, renderList, renderContext );\n\n\t\t//\n\n\t\tthis.backend.beginRender( renderContext );\n\n\t\t// process render lists\n\n\t\tconst {\n\t\t\tbundles,\n\t\t\tlightsNode,\n\t\t\ttransparent: transparentObjects,\n\t\t\topaque: opaqueObjects\n\t\t} = renderList;\n\n\t\tif ( bundles.length > 0 ) this._renderBundles( bundles, sceneRef, lightsNode );\n\t\tif ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\tif ( this.transparent === true && transparentObjects.length > 0 ) this._renderObjects( transparentObjects, camera, sceneRef, lightsNode );\n\n\t\t// finish render pass\n\n\t\tthis.backend.finishRender( renderContext );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t\tthis._currentRenderContext = previousRenderContext;\n\t\tthis._currentRenderObjectFunction = previousRenderObjectFunction;\n\n\t\t//\n\n\t\tif ( frameBufferTarget !== null ) {\n\n\t\t\tthis.setRenderTarget( outputRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t\tconst quad = this._quad;\n\n\t\t\tif ( this._nodes.hasOutputChange( renderTarget.texture ) ) {\n\n\t\t\t\tquad.material.fragmentNode = this._nodes.getOutputNode( renderTarget.texture );\n\t\t\t\tquad.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tthis._renderScene( quad, quad.camera, false );\n\n\t\t}\n\n\t\t//\n\n\t\tsceneRef.onAfterRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\treturn renderContext;\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\treturn this.backend.getMaxAnisotropy();\n\n\t}\n\n\tgetActiveCubeFace() {\n\n\t\treturn this._activeCubeFace;\n\n\t}\n\n\tgetActiveMipmapLevel() {\n\n\t\treturn this._activeMipmapLevel;\n\n\t}\n\n\tasync setAnimationLoop( callback ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis._animation.setAnimationLoop( callback );\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.backend.getArrayBufferAsync( attribute );\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this.backend.getContext();\n\n\t}\n\n\tgetPixelRatio() {\n\n\t\treturn this._pixelRatio;\n\n\t}\n\n\tgetDrawingBufferSize( target ) {\n\n\t\treturn target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn target.set( this._width, this._height );\n\n\t}\n\n\tsetPixelRatio( value = 1 ) {\n\n\t\tthis._pixelRatio = value;\n\n\t\tthis.setSize( this._width, this._height, false );\n\n\t}\n\n\tsetDrawingBufferSize( width, height, pixelRatio ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.domElement.width = Math.floor( width * pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\tsetSize( width, height, updateStyle = true ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis.domElement.width = Math.floor( width * this._pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * this._pixelRatio );\n\n\t\tif ( updateStyle === true ) {\n\n\t\t\tthis.domElement.style.width = width + 'px';\n\t\t\tthis.domElement.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\tsetOpaqueSort( method ) {\n\n\t\tthis._opaqueSort = method;\n\n\t}\n\n\tsetTransparentSort( method ) {\n\n\t\tthis._transparentSort = method;\n\n\t}\n\n\tgetScissor( target ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\ttarget.x = scissor.x;\n\t\ttarget.y = scissor.y;\n\t\ttarget.width = scissor.width;\n\t\ttarget.height = scissor.height;\n\n\t\treturn target;\n\n\t}\n\n\tsetScissor( x, y, width, height ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tscissor.copy( x );\n\n\t\t} else {\n\n\t\t\tscissor.set( x, y, width, height );\n\n\t\t}\n\n\t}\n\n\tgetScissorTest() {\n\n\t\treturn this._scissorTest;\n\n\t}\n\n\tsetScissorTest( boolean ) {\n\n\t\tthis._scissorTest = boolean;\n\n\t\tthis.backend.setScissorTest( boolean );\n\n\t}\n\n\tgetViewport( target ) {\n\n\t\treturn target.copy( this._viewport );\n\n\t}\n\n\tsetViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {\n\n\t\tconst viewport = this._viewport;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tviewport.copy( x );\n\n\t\t} else {\n\n\t\t\tviewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tviewport.minDepth = minDepth;\n\t\tviewport.maxDepth = maxDepth;\n\n\t}\n\n\tgetClearColor( target ) {\n\n\t\treturn target.copy( this._clearColor );\n\n\t}\n\n\tsetClearColor( color, alpha = 1 ) {\n\n\t\tthis._clearColor.set( color );\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\tgetClearAlpha() {\n\n\t\treturn this._clearColor.a;\n\n\t}\n\n\tsetClearAlpha( alpha ) {\n\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\tgetClearDepth() {\n\n\t\treturn this._clearDepth;\n\n\t}\n\n\tsetClearDepth( depth ) {\n\n\t\tthis._clearDepth = depth;\n\n\t}\n\n\tgetClearStencil() {\n\n\t\treturn this._clearStencil;\n\n\t}\n\n\tsetClearStencil( stencil ) {\n\n\t\tthis._clearStencil = stencil;\n\n\t}\n\n\tisOccluded( object ) {\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\treturn renderContext && this.backend.isOccluded( renderContext, object );\n\n\t}\n\n\tclear( color = true, depth = true, stencil = true ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.' );\n\n\t\t\treturn this.clearAsync( color, depth, stencil );\n\n\t\t}\n\n\t\tconst renderTarget = this._renderTarget || this._getFrameBufferTarget();\n\n\t\tlet renderTargetData = null;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget );\n\n\t\t\trenderTargetData = this._textures.get( renderTarget );\n\n\t\t}\n\n\t\tthis.backend.clear( color, depth, stencil, renderTargetData );\n\n\t\tif ( renderTarget !== null && this._renderTarget === null ) {\n\n\t\t\t// If a color space transform or tone mapping is required,\n\t\t\t// the clear operation clears the intermediate renderTarget texture, but does not update the screen canvas.\n\n\t\t\tconst quad = this._quad;\n\n\t\t\tif ( this._nodes.hasOutputChange( renderTarget.texture ) ) {\n\n\t\t\t\tquad.material.fragmentNode = this._nodes.getOutputNode( renderTarget.texture );\n\t\t\t\tquad.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tthis._renderScene( quad, quad.camera, false );\n\n\t\t}\n\n\t}\n\n\tclearColor() {\n\n\t\treturn this.clear( true, false, false );\n\n\t}\n\n\tclearDepth() {\n\n\t\treturn this.clear( false, true, false );\n\n\t}\n\n\tclearStencil() {\n\n\t\treturn this.clear( false, false, true );\n\n\t}\n\n\tasync clearAsync( color = true, depth = true, stencil = true ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis.clear( color, depth, stencil );\n\n\t}\n\n\tclearColorAsync() {\n\n\t\treturn this.clearAsync( true, false, false );\n\n\t}\n\n\tclearDepthAsync() {\n\n\t\treturn this.clearAsync( false, true, false );\n\n\t}\n\n\tclearStencilAsync() {\n\n\t\treturn this.clearAsync( false, false, true );\n\n\t}\n\n\tget currentToneMapping() {\n\n\t\treturn this._renderTarget !== null ? NoToneMapping : this.toneMapping;\n\n\t}\n\n\tget currentColorSpace() {\n\n\t\treturn this._renderTarget !== null ? LinearSRGBColorSpace : this.outputColorSpace;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.info.dispose();\n\n\t\tthis._animation.dispose();\n\t\tthis._objects.dispose();\n\t\tthis._pipelines.dispose();\n\t\tthis._nodes.dispose();\n\t\tthis._bindings.dispose();\n\t\tthis._renderLists.dispose();\n\t\tthis._renderContexts.dispose();\n\t\tthis._textures.dispose();\n\n\t\tthis.setRenderTarget( null );\n\t\tthis.setAnimationLoop( null );\n\n\t}\n\n\tsetRenderTarget( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\tthis._renderTarget = renderTarget;\n\t\tthis._activeCubeFace = activeCubeFace;\n\t\tthis._activeMipmapLevel = activeMipmapLevel;\n\n\t}\n\n\tgetRenderTarget() {\n\n\t\treturn this._renderTarget;\n\n\t}\n\n\tsetRenderObjectFunction( renderObjectFunction ) {\n\n\t\tthis._renderObjectFunction = renderObjectFunction;\n\n\t}\n\n\tgetRenderObjectFunction() {\n\n\t\treturn this._renderObjectFunction;\n\n\t}\n\n\tasync computeAsync( computeNodes ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.compute.calls ++;\n\t\tthis.info.compute.frameCalls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst backend = this.backend;\n\t\tconst pipelines = this._pipelines;\n\t\tconst bindings = this._bindings;\n\t\tconst nodes = this._nodes;\n\n\t\tconst computeList = Array.isArray( computeNodes ) ? computeNodes : [ computeNodes ];\n\n\t\tif ( computeList[ 0 ] === undefined || computeList[ 0 ].isComputeNode !== true ) {\n\n\t\t\tthrow new Error( 'THREE.Renderer: .compute() expects a ComputeNode.' );\n\n\t\t}\n\n\t\tbackend.beginCompute( computeNodes );\n\n\t\tfor ( const computeNode of computeList ) {\n\n\t\t\t// onInit\n\n\t\t\tif ( pipelines.has( computeNode ) === false ) {\n\n\t\t\t\tconst dispose = () => {\n\n\t\t\t\t\tcomputeNode.removeEventListener( 'dispose', dispose );\n\n\t\t\t\t\tpipelines.delete( computeNode );\n\t\t\t\t\tbindings.delete( computeNode );\n\t\t\t\t\tnodes.delete( computeNode );\n\n\t\t\t\t};\n\n\t\t\t\tcomputeNode.addEventListener( 'dispose', dispose );\n\n\t\t\t\t//\n\n\t\t\t\tcomputeNode.onInit( { renderer: this } );\n\n\t\t\t}\n\n\t\t\tnodes.updateForCompute( computeNode );\n\t\t\tbindings.updateForCompute( computeNode );\n\n\t\t\tconst computeBindings = bindings.getForCompute( computeNode );\n\t\t\tconst computePipeline = pipelines.getForCompute( computeNode, computeBindings );\n\n\t\t\tbackend.compute( computeNodes, computeNode, computeBindings, computePipeline );\n\n\t\t}\n\n\t\tbackend.finishCompute( computeNodes );\n\n\t\tawait this.backend.resolveTimestampAsync( computeNodes, 'compute' );\n\n\t\t//\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t}\n\n\tasync hasFeatureAsync( name ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\treturn this.backend.hasFeature( name );\n\n\t}\n\n\thasFeature( name ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.' );\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.backend.hasFeature( name );\n\n\t}\n\n\tcopyFramebufferToTexture( framebufferTexture, rectangle = null ) {\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\tthis._textures.updateTexture( framebufferTexture );\n\n\t\trectangle = rectangle === null ? _vector4.set( 0, 0, framebufferTexture.image.width, framebufferTexture.image.height ) : rectangle;\n\n\t\tthis.backend.copyFramebufferToTexture( framebufferTexture, renderContext, rectangle );\n\n\t}\n\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\n\n\t\tthis._textures.updateTexture( srcTexture );\n\t\tthis._textures.updateTexture( dstTexture );\n\n\t\tthis.backend.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );\n\n\t}\n\n\n\treadRenderTargetPixelsAsync( renderTarget, x, y, width, height, index = 0, faceIndex = 0 ) {\n\n\t\treturn this.backend.copyTextureToBuffer( renderTarget.textures[ index ], x, y, width, height, faceIndex );\n\n\t}\n\n\t_projectObject( object, camera, groupOrder, renderList ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\trenderList.pushLight( object );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector4.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { geometry, material } = object;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\tconsole.error( 'THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tconst { geometry, material } = object;\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\t\t\t_vector4\n\t\t\t\t\t\t\t.copy( geometry.boundingSphere.center )\n\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\trenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isBundleGroup === true && this.backend.beginBundle !== undefined ) {\n\n\t\t\tconst baseRenderList = renderList;\n\n\t\t\t// replace render list\n\t\t\trenderList = this._renderLists.get( object, camera );\n\n\t\t\trenderList.begin();\n\n\t\t\tbaseRenderList.pushBundle( {\n\t\t\t\tbundleGroup: object,\n\t\t\t\tcamera,\n\t\t\t\trenderList,\n\t\t\t} );\n\n\t\t\trenderList.finish();\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis._projectObject( children[ i ], camera, groupOrder, renderList );\n\n\t\t}\n\n\t}\n\n\t_renderBundles( bundles, sceneRef, lightsNode ) {\n\n\t\tfor ( const bundle of bundles ) {\n\n\t\t\tthis._renderBundle( bundle, sceneRef, lightsNode );\n\n\t\t}\n\n\t}\n\n\t_renderObjects( renderList, camera, scene, lightsNode ) {\n\n\t\t// process renderable objects\n\n\t\tfor ( let i = 0, il = renderList.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t// @TODO: Add support for multiple materials per object. This will require to extract\n\t\t\t// the material from the renderItem object and pass it with its group data to renderObject().\n\n\t\t\tconst { object, geometry, material, group } = renderItem;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tconst vp = camera2.viewport;\n\t\t\t\t\t\tconst minDepth = ( vp.minDepth === undefined ) ? 0 : vp.minDepth;\n\t\t\t\t\t\tconst maxDepth = ( vp.maxDepth === undefined ) ? 1 : vp.maxDepth;\n\n\t\t\t\t\t\tconst viewportValue = this._currentRenderContext.viewportValue;\n\t\t\t\t\t\tviewportValue.copy( vp ).multiplyScalar( this._pixelRatio ).floor();\n\t\t\t\t\t\tviewportValue.minDepth = minDepth;\n\t\t\t\t\t\tviewportValue.maxDepth = maxDepth;\n\n\t\t\t\t\t\tthis.backend.updateViewport( this._currentRenderContext );\n\n\t\t\t\t\t\tthis._currentRenderObjectFunction( object, scene, camera2, geometry, material, group, lightsNode );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis._currentRenderObjectFunction( object, scene, camera, geometry, material, group, lightsNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\trenderObject( object, scene, camera, geometry, material, group, lightsNode ) {\n\n\t\tlet overridePositionNode;\n\t\tlet overrideFragmentNode;\n\t\tlet overrideDepthNode;\n\n\t\t//\n\n\t\tobject.onBeforeRender( this, scene, camera, geometry, material, group );\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial !== null ) {\n\n\t\t\tconst overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( material.positionNode && material.positionNode.isNode ) {\n\n\t\t\t\toverridePositionNode = overrideMaterial.positionNode;\n\t\t\t\toverrideMaterial.positionNode = material.positionNode;\n\n\t\t\t}\n\n\t\t\tif ( overrideMaterial.isShadowNodeMaterial ) {\n\n\t\t\t\toverrideMaterial.side = material.shadowSide === null ? material.side : material.shadowSide;\n\n\t\t\t\tif ( material.depthNode && material.depthNode.isNode ) {\n\n\t\t\t\t\toverrideDepthNode = overrideMaterial.depthNode;\n\t\t\t\t\toverrideMaterial.depthNode = material.depthNode;\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( material.shadowNode && material.shadowNode.isNode ) {\n\n\t\t\t\t\toverrideFragmentNode = overrideMaterial.fragmentNode;\n\t\t\t\t\toverrideMaterial.fragmentNode = material.shadowNode;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.localClippingEnabled ) {\n\n\t\t\t\t\tif ( material.clipShadows ) {\n\n\t\t\t\t\t\tif ( overrideMaterial.clippingPlanes !== material.clippingPlanes ) {\n\n\t\t\t\t\t\t\toverrideMaterial.clippingPlanes = material.clippingPlanes;\n\t\t\t\t\t\t\toverrideMaterial.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( overrideMaterial.clipIntersection !== material.clipIntersection ) {\n\n\t\t\t\t\t\t\toverrideMaterial.clipIntersection = material.clipIntersection;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( Array.isArray( overrideMaterial.clippingPlanes ) ) {\n\n\t\t\t\t\t\toverrideMaterial.clippingPlanes = null;\n\t\t\t\t\t\toverrideMaterial.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterial = overrideMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group, 'backSide' ); // create backSide pass id\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group ); // use default pass id\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( overridePositionNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.positionNode = overridePositionNode;\n\n\t\t}\n\n\t\tif ( overrideDepthNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.depthNode = overrideDepthNode;\n\n\t\t}\n\n\t\tif ( overrideFragmentNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.fragmentNode = overrideFragmentNode;\n\n\t\t}\n\n\t\t//\n\n\t\tobject.onAfterRender( this, scene, camera, geometry, material, group );\n\n\t}\n\n\t_renderObjectDirect( object, material, scene, camera, lightsNode, group, passId ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, passId );\n\t\trenderObject.drawRange = object.geometry.drawRange;\n\t\trenderObject.group = group;\n\n\t\t//\n\n\t\tconst needsRefresh = this._nodes.needsRefresh( renderObject );\n\n\t\tif ( needsRefresh ) {\n\n\t\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t\tthis._geometries.updateForRender( renderObject );\n\n\t\t\tthis._nodes.updateForRender( renderObject );\n\t\t\tthis._bindings.updateForRender( renderObject );\n\n\t\t}\n\n\t\tthis._pipelines.updateForRender( renderObject );\n\n\t\t//\n\n\t\tif ( this._currentRenderBundle !== null ) {\n\n\t\t\tconst renderBundleData = this.backend.get( this._currentRenderBundle );\n\n\t\t\trenderBundleData.renderObjects.push( renderObject );\n\n\t\t\trenderObject.bundle = this._currentRenderBundle.scene;\n\n\t\t}\n\n\t\tthis.backend.draw( renderObject, this.info );\n\n\t\tif ( needsRefresh ) this._nodes.updateAfter( renderObject );\n\n\t}\n\n\t_createObjectPipeline( object, material, scene, camera, lightsNode, passId ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, passId );\n\n\t\t//\n\n\t\tthis._nodes.updateBefore( renderObject );\n\n\t\tthis._geometries.updateForRender( renderObject );\n\n\t\tthis._nodes.updateForRender( renderObject );\n\t\tthis._bindings.updateForRender( renderObject );\n\n\t\tthis._pipelines.getForRender( renderObject, this._compilationPromises );\n\n\t\tthis._nodes.updateAfter( renderObject );\n\n\t}\n\n\tget compute() {\n\n\t\treturn this.computeAsync;\n\n\t}\n\n\tget compile() {\n\n\t\treturn this.compileAsync;\n\n\t}\n\n}\n\nexport default Renderer;\n", "class Binding {\n\n\tconstructor( name = '' ) {\n\n\t\tthis.name = name;\n\n\t\tthis.visibility = 0;\n\n\t}\n\n\tsetVisibility( visibility ) {\n\n\t\tthis.visibility |= visibility;\n\n\t}\n\n\tclone() {\n\n\t\treturn Object.assign( new this.constructor(), this );\n\n\t}\n\n}\n\nexport default Binding;\n", "import { GPU_CHUNK_BYTES } from './Constants.js';\n\nfunction getFloatLength( floatLength ) {\n\n\t// ensure chunk size alignment (STD140 layout)\n\n\treturn floatLength + ( ( GPU_CHUNK_BYTES - ( floatLength % GPU_CHUNK_BYTES ) ) % GPU_CHUNK_BYTES );\n\n}\n\nfunction getVectorLength( count, vectorLength = 4 ) {\n\n\tconst strideLength = getStrideLength( vectorLength );\n\n\tconst floatLength = strideLength * count;\n\n\treturn getFloatLength( floatLength );\n\n}\n\nfunction getStrideLength( vectorLength ) {\n\n\tconst strideLength = 4;\n\n\treturn vectorLength + ( ( strideLength - ( vectorLength % strideLength ) ) % strideLength );\n\n}\n\nexport {\n\tgetFloatLength,\n\tgetVectorLength,\n\tgetStrideLength\n};\n", "import Binding from './Binding.js';\nimport { getFloatLength } from './BufferUtils.js';\n\nclass Buffer extends Binding {\n\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name );\n\n\t\tthis.isBuffer = true;\n\n\t\tthis.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;\n\n\t\tthis._buffer = buffer;\n\n\t}\n\n\tget byteLength() {\n\n\t\treturn getFloatLength( this._buffer.byteLength );\n\n\t}\n\n\tget buffer() {\n\n\t\treturn this._buffer;\n\n\t}\n\n\tupdate() {\n\n\t\treturn true;\n\n\t}\n\n}\n\nexport default Buffer;\n", "import Buffer from './Buffer.js';\n\nclass UniformBuffer extends Buffer {\n\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name, buffer );\n\n\t\tthis.isUniformBuffer = true;\n\n\t}\n\n}\n\nexport default UniformBuffer;\n", "import UniformBuffer from '../UniformBuffer.js';\n\nlet _id = 0;\n\nclass NodeUniformBuffer extends UniformBuffer {\n\n\tconstructor( nodeUniform, groupNode ) {\n\n\t\tsuper( 'UniformBuffer_' + _id ++, nodeUniform ? nodeUniform.value : null );\n\n\t\tthis.nodeUniform = nodeUniform;\n\t\tthis.groupNode = groupNode;\n\n\t}\n\n\tget buffer() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nexport default NodeUniformBuffer;\n", "import UniformBuffer from './UniformBuffer.js';\nimport { GPU_CHUNK_BYTES } from './Constants.js';\n\nclass UniformsGroup extends UniformBuffer {\n\n\tconstructor( name ) {\n\n\t\tsuper( name );\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tthis._values = null;\n\n\t\t// the order of uniforms in this array must match the order of uniforms in the shader\n\n\t\tthis.uniforms = [];\n\n\t}\n\n\taddUniform( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremoveUniform( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.uniforms.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tget values() {\n\n\t\tif ( this._values === null ) {\n\n\t\t\tthis._values = Array.from( this.buffer );\n\n\t\t}\n\n\t\treturn this._values;\n\n\t}\n\n\tget buffer() {\n\n\t\tlet buffer = this._buffer;\n\n\t\tif ( buffer === null ) {\n\n\t\t\tconst byteLength = this.byteLength;\n\n\t\t\tbuffer = new Float32Array( new ArrayBuffer( byteLength ) );\n\n\t\t\tthis._buffer = buffer;\n\n\t\t}\n\n\t\treturn buffer;\n\n\t}\n\n\tget byteLength() {\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\n\t\tfor ( let i = 0, l = this.uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = this.uniforms[ i ];\n\n\t\t\tconst { boundary, itemSize } = uniform;\n\n\t\t\t// offset within a single chunk in bytes\n\n\t\t\tconst chunkOffset = offset % GPU_CHUNK_BYTES;\n\t\t\tconst remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;\n\n\t\t\t// conformance tests\n\n\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - boundary ) < 0 ) {\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\toffset += ( GPU_CHUNK_BYTES - chunkOffset );\n\n\t\t\t} else if ( chunkOffset % boundary !== 0 ) {\n\n\t\t\t\t// check for correct alignment\n\n\t\t\t\toffset += ( chunkOffset % boundary );\n\n\t\t\t}\n\n\t\t\tuniform.offset = ( offset / this.bytesPerElement );\n\n\t\t\toffset += ( itemSize * this.bytesPerElement );\n\n\t\t}\n\n\t\treturn Math.ceil( offset / GPU_CHUNK_BYTES ) * GPU_CHUNK_BYTES;\n\n\t}\n\n\tupdate() {\n\n\t\tlet updated = false;\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tif ( this.updateByType( uniform ) === true ) {\n\n\t\t\t\tupdated = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateByType( uniform ) {\n\n\t\tif ( uniform.isNumberUniform ) return this.updateNumber( uniform );\n\t\tif ( uniform.isVector2Uniform ) return this.updateVector2( uniform );\n\t\tif ( uniform.isVector3Uniform ) return this.updateVector3( uniform );\n\t\tif ( uniform.isVector4Uniform ) return this.updateVector4( uniform );\n\t\tif ( uniform.isColorUniform ) return this.updateColor( uniform );\n\t\tif ( uniform.isMatrix3Uniform ) return this.updateMatrix3( uniform );\n\t\tif ( uniform.isMatrix4Uniform ) return this.updateMatrix4( uniform );\n\n\t\tconsole.error( 'THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform );\n\n\t}\n\n\tupdateNumber( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset ] !== v ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset ] = a[ offset ] = v;\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector2( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = v.z;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z || a[ offset + 4 ] !== v.w ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = v.z;\n\t\t\tb[ offset + 3 ] = a[ offset + 3 ] = v.w;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateColor( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst c = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== c.r || a[ offset + 1 ] !== c.g || a[ offset + 2 ] !== c.b ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = c.r;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = c.g;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = c.b;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== e[ 0 ] || a[ offset + 1 ] !== e[ 1 ] || a[ offset + 2 ] !== e[ 2 ] ||\n\t\t\ta[ offset + 4 ] !== e[ 3 ] || a[ offset + 5 ] !== e[ 4 ] || a[ offset + 6 ] !== e[ 5 ] ||\n\t\t\ta[ offset + 8 ] !== e[ 6 ] || a[ offset + 9 ] !== e[ 7 ] || a[ offset + 10 ] !== e[ 8 ] ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = e[ 0 ];\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = e[ 1 ];\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = e[ 2 ];\n\t\t\tb[ offset + 4 ] = a[ offset + 4 ] = e[ 3 ];\n\t\t\tb[ offset + 5 ] = a[ offset + 5 ] = e[ 4 ];\n\t\t\tb[ offset + 6 ] = a[ offset + 6 ] = e[ 5 ];\n\t\t\tb[ offset + 8 ] = a[ offset + 8 ] = e[ 6 ];\n\t\t\tb[ offset + 9 ] = a[ offset + 9 ] = e[ 7 ];\n\t\t\tb[ offset + 10 ] = a[ offset + 10 ] = e[ 8 ];\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( arraysEqual( a, e, offset ) === false ) {\n\n\t\t\tconst b = this.buffer;\n\t\t\tb.set( e, offset );\n\t\t\tsetArray( a, e, offset );\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n}\n\nfunction setArray( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ offset + i ] = b[ i ];\n\n\t}\n\n}\n\nfunction arraysEqual( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\tif ( a[ offset + i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nexport default UniformsGroup;\n", "import UniformsGroup from '../UniformsGroup.js';\n\nlet _id = 0;\n\nclass NodeUniformsGroup extends UniformsGroup {\n\n\tconstructor( name, groupNode ) {\n\n\t\tsuper( name );\n\n\t\tthis.id = _id ++;\n\t\tthis.groupNode = groupNode;\n\n\t\tthis.isNodeUniformsGroup = true;\n\n\t}\n\n\tgetNodes() {\n\n\t\tconst nodes = [];\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tconst node = uniform.nodeUniform.node;\n\n\t\t\tif ( ! node ) throw new Error( 'NodeUniformsGroup: Uniform has no node.' );\n\n\t\t\tnodes.push( node );\n\n\t\t}\n\n\t\treturn nodes;\n\n\t}\n\n}\n\nexport default NodeUniformsGroup;\n", "import Binding from './Binding.js';\n\nlet _id = 0;\n\nclass SampledTexture extends Binding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.id = _id ++;\n\n\t\tthis.texture = texture;\n\t\tthis.version = texture ? texture.version : 0;\n\t\tthis.store = false;\n\t\tthis.generation = null;\n\n\t\tthis.isSampledTexture = true;\n\n\t}\n\n\tneedsBindingsUpdate( generation ) {\n\n\t\tconst { texture } = this;\n\n\t\tif ( generation !== this.generation ) {\n\n\t\t\tthis.generation = generation;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn texture.isVideoTexture;\n\n\t}\n\n\tupdate() {\n\n\t\tconst { texture, version } = this;\n\n\t\tif ( version !== texture.version ) {\n\n\t\t\tthis.version = texture.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n\nclass SampledArrayTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledArrayTexture = true;\n\n\t}\n\n}\n\nclass Sampled3DTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampled3DTexture = true;\n\n\t}\n\n}\n\nclass SampledCubeTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\nexport { SampledTexture, SampledArrayTexture, Sampled3DTexture, SampledCubeTexture };\n", "import { SampledTexture } from '../SampledTexture.js';\n\nclass NodeSampledTexture extends SampledTexture {\n\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.groupNode = groupNode;\n\n\t\tthis.access = access;\n\n\t}\n\n\tneedsBindingsUpdate( generation ) {\n\n\t\treturn this.textureNode.value !== this.texture || super.needsBindingsUpdate( generation );\n\n\t}\n\n\tupdate() {\n\n\t\tconst { textureNode } = this;\n\n\t\tif ( this.texture !== textureNode.value ) {\n\n\t\t\tthis.texture = textureNode.value;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn super.update();\n\n\t}\n\n}\n\nclass NodeSampledCubeTexture extends NodeSampledTexture {\n\n\tconstructor( name, textureNode, groupNode, access ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\nclass NodeSampledTexture3D extends NodeSampledTexture {\n\n\tconstructor( name, textureNode, groupNode, access ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\tthis.isSampledTexture3D = true;\n\n\t}\n\n}\n\nexport { NodeSampledTexture, NodeSampledCubeTexture, NodeSampledTexture3D };\n", "import { GLSLNodeParser, NodeBuilder, TextureNode, vectorComponents } from '../../../nodes/Nodes.js';\n\nimport NodeUniformBuffer from '../../common/nodes/NodeUniformBuffer.js';\nimport NodeUniformsGroup from '../../common/nodes/NodeUniformsGroup.js';\n\nimport { NodeSampledTexture, NodeSampledCubeTexture, NodeSampledTexture3D } from '../../common/nodes/NodeSampledTexture.js';\n\nimport { NoColorSpace, ByteType, ShortType, RGBAIntegerFormat, RGBIntegerFormat, RedIntegerFormat, RGIntegerFormat, UnsignedByteType, UnsignedIntType, UnsignedShortType, RedFormat, RGFormat, IntType, RGBFormat, RGBAFormat, FloatType } from '../../../constants.js';\nimport { DataTexture } from '../../../textures/DataTexture.js';\n\nconst glslMethods = {\n\tatan2: 'atan',\n\ttextureDimensions: 'textureSize',\n\tequals: 'equal'\n};\n\nconst precisionLib = {\n\tlow: 'lowp',\n\tmedium: 'mediump',\n\thigh: 'highp'\n};\n\nconst supports = {\n\tswizzleAssign: true,\n\tstorageBuffer: false\n};\n\nconst defaultPrecisions = `\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n`;\n\nclass GLSLNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer ) {\n\n\t\tsuper( object, renderer, new GLSLNodeParser() );\n\n\t\tthis.uniformGroups = {};\n\t\tthis.transforms = [];\n\t\tthis.extensions = {};\n\n\t\tthis.useComparisonMethod = true;\n\n\t}\n\n\tneedsColorSpaceToLinearSRGB( texture ) {\n\n\t\treturn texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\treturn glslMethods[ method ] || method;\n\n\t}\n\n\tgetOutputStructName() {\n\n\t\treturn '';\n\n\t}\n\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( this.getType( input.type ) + ' ' + input.name );\n\n\t\t}\n\n\t\t//\n\n\t\tconst code = `${ this.getType( layout.type ) } ${ layout.name }( ${ parameters.join( ', ' ) } ) {\n\n\t${ flowData.vars }\n\n${ flowData.code }\n\treturn ${ flowData.result };\n\n}`;\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\tsetupPBO( storageBufferNode ) {\n\n\t\tconst attribute = storageBufferNode.value;\n\n\t\tif ( attribute.pbo === undefined ) {\n\n\t\t\tconst originalArray = attribute.array;\n\t\t\tconst numElements = attribute.count * attribute.itemSize;\n\n\t\t\tconst { itemSize } = attribute;\n\n\t\t\tconst isInteger = attribute.array.constructor.name.toLowerCase().includes( 'int' );\n\n\t\t\tlet format = isInteger ? RedIntegerFormat : RedFormat;\n\n\n\t\t\tif ( itemSize === 2 ) {\n\n\t\t\t\tformat = isInteger ? RGIntegerFormat : RGFormat;\n\n\t\t\t} else if ( itemSize === 3 ) {\n\n\t\t\t\tformat = isInteger ? RGBIntegerFormat : RGBFormat;\n\n\t\t\t} else if ( itemSize === 4 ) {\n\n\t\t\t\tformat = isInteger ? RGBAIntegerFormat : RGBAFormat;\n\n\t\t\t}\n\n\t\t\tconst typeMap = {\n\t\t\t\tFloat32Array: FloatType,\n\t\t\t\tUint8Array: UnsignedByteType,\n\t\t\t\tUint16Array: UnsignedShortType,\n\t\t\t\tUint32Array: UnsignedIntType,\n\t\t\t\tInt8Array: ByteType,\n\t\t\t\tInt16Array: ShortType,\n\t\t\t\tInt32Array: IntType,\n\t\t\t\tUint8ClampedArray: UnsignedByteType,\n\t\t\t};\n\n\t\t\tconst width = Math.pow( 2, Math.ceil( Math.log2( Math.sqrt( numElements / itemSize ) ) ) );\n\t\t\tlet height = Math.ceil( ( numElements / itemSize ) / width );\n\t\t\tif ( width * height * itemSize < numElements ) height ++; // Ensure enough space\n\n\t\t\tconst newSize = width * height * itemSize;\n\n\t\t\tconst newArray = new originalArray.constructor( newSize );\n\n\t\t\tnewArray.set( originalArray, 0 );\n\n\t\t\tattribute.array = newArray;\n\n\t\t\tconst pboTexture = new DataTexture( attribute.array, width, height, format, typeMap[ attribute.array.constructor.name ] || FloatType );\n\t\t\tpboTexture.needsUpdate = true;\n\t\t\tpboTexture.isPBOTexture = true;\n\n\t\t\tconst pbo = new TextureNode( pboTexture, null, null );\n\t\t\tpbo.setPrecision( 'high' );\n\n\t\t\tattribute.pboNode = pbo;\n\t\t\tattribute.pbo = pbo.value;\n\n\t\t\tthis.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );\n\n\t\t}\n\n\t}\n\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true ) {\n\n\t\t\treturn shaderStage.charAt( 0 ) + '_' + node.name;\n\n\t\t}\n\n\t\treturn super.getPropertyName( node, shaderStage );\n\n\t}\n\n\tgeneratePBO( storageArrayElementNode ) {\n\n\t\tconst { node, indexNode } = storageArrayElementNode;\n\t\tconst attribute = node.value;\n\n\t\tif ( this.renderer.backend.has( attribute ) ) {\n\n\t\t\tconst attributeData = this.renderer.backend.get( attribute );\n\t\t\tattributeData.pbo = attribute.pbo;\n\n\t\t}\n\n\n\t\tconst nodeUniform = this.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );\n\t\tconst textureName = this.getPropertyName( nodeUniform );\n\n\t\tthis.increaseUsage( indexNode ); // force cache generate to be used as index in x,y\n\t\tconst indexSnippet = indexNode.build( this, 'uint' );\n\n\t\tconst elementNodeData = this.getDataFromNode( storageArrayElementNode );\n\n\t\tlet propertyName = elementNodeData.propertyName;\n\n\t\tif ( propertyName === undefined ) {\n\n\t\t\t// property element\n\n\t\t\tconst nodeVar = this.getVarFromNode( storageArrayElementNode );\n\n\t\t\tpropertyName = this.getPropertyName( nodeVar );\n\n\t\t\t// property size\n\n\t\t\tconst bufferNodeData = this.getDataFromNode( node );\n\n\t\t\tlet propertySizeName = bufferNodeData.propertySizeName;\n\n\t\t\tif ( propertySizeName === undefined ) {\n\n\t\t\t\tpropertySizeName = propertyName + 'Size';\n\n\t\t\t\tthis.getVarFromNode( node, propertySizeName, 'uint' );\n\n\t\t\t\tthis.addLineFlowCode( `${ propertySizeName } = uint( textureSize( ${ textureName }, 0 ).x )`, storageArrayElementNode );\n\n\t\t\t\tbufferNodeData.propertySizeName = propertySizeName;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst { itemSize } = attribute;\n\n\t\t\tconst channel = '.' + vectorComponents.join( '' ).slice( 0, itemSize );\n\t\t\tconst uvSnippet = `ivec2(${indexSnippet} % ${ propertySizeName }, ${indexSnippet} / ${ propertySizeName })`;\n\n\t\t\tconst snippet = this.generateTextureLoad( null, textureName, uvSnippet, null, '0' );\n\n\t\t\t//\n\n\n\t\t\tlet prefix = 'vec4';\n\n\t\t\tif ( attribute.pbo.type === UnsignedIntType ) {\n\n\t\t\t\tprefix = 'uvec4';\n\n\t\t\t} else if ( attribute.pbo.type === IntType ) {\n\n\t\t\t\tprefix = 'ivec4';\n\n\t\t\t}\n\n\t\t\tthis.addLineFlowCode( `${ propertyName } = ${prefix}(${ snippet })${channel}`, storageArrayElementNode );\n\n\t\t\telementNodeData.propertyName = propertyName;\n\n\t\t}\n\n\t\treturn propertyName;\n\n\t}\n\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0' ) {\n\n\t\tif ( depthSnippet ) {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ivec3( ${ uvIndexSnippet }, ${ depthSnippet } ), ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet ) {\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } ).x`;\n\n\t\t} else {\n\n\t\t\tif ( depthSnippet ) uvSnippet = `vec3( ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet ) {\n\n\t\treturn `textureLod( ${ textureProperty }, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t}\n\n\tgenerateTextureBias( texture, textureProperty, uvSnippet, biasSnippet ) {\n\n\t\treturn `texture( ${ textureProperty }, ${ uvSnippet }, ${ biasSnippet } )`;\n\n\t}\n\n\tgenerateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet ) {\n\n\t\treturn `textureGrad( ${ textureProperty }, ${ uvSnippet }, ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;\n\n\t}\n\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `texture( ${ textureProperty }, vec3( ${ uvSnippet }, ${ compareSnippet } ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippets.push( `${ this.getVar( variable.type, variable.name ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\t' );\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tlet snippet = null;\n\t\t\tlet group = false;\n\n\t\t\tif ( uniform.type === 'texture' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tlet typePrefix = '';\n\n\t\t\t\tif ( texture.isDataTexture === true ) {\n\n\n\t\t\t\t\tif ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\ttypePrefix = 'u';\n\n\t\t\t\t\t} else if ( texture.type === IntType ) {\n\n\t\t\t\t\t\ttypePrefix = 'i';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.compareFunction ) {\n\n\t\t\t\t\tsnippet = `sampler2DShadow ${ uniform.name };`;\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\t\t\t\tsnippet = `${typePrefix}sampler2DArray ${ uniform.name };`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = `${typePrefix}sampler2D ${ uniform.name };`;\n\n\t\t\t\t}\n\n\t\t\t} else if ( uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tsnippet = `samplerCube ${ uniform.name };`;\n\n\t\t\t} else if ( uniform.type === 'texture3D' ) {\n\n\t\t\t\tsnippet = `sampler3D ${ uniform.name };`;\n\n\t\t\t} else if ( uniform.type === 'buffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? bufferCount : '';\n\t\t\t\tsnippet = `${bufferNode.name} {\\n\\t${ bufferType } ${ uniform.name }[${ bufferCountSnippet }];\\n};\\n`;\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getVectorType( uniform.type );\n\n\t\t\t\tsnippet = `${ vectorType } ${ this.getPropertyName( uniform, shaderStage ) };`;\n\n\t\t\t\tgroup = true;\n\n\t\t\t}\n\n\t\t\tconst precision = uniform.node.precision;\n\n\t\t\tif ( precision !== null ) {\n\n\t\t\t\tsnippet = precisionLib[ precision ] + ' ' + snippet;\n\n\t\t\t}\n\n\t\t\tif ( group ) {\n\n\t\t\t\tsnippet = '\\t' + snippet;\n\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\t\t\t\tconst groupSnippets = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = [] );\n\n\t\t\t\tgroupSnippets.push( snippet );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = 'uniform ' + snippet;\n\n\t\t\t\tbindingSnippets.push( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet output = '';\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst groupSnippets = uniformGroups[ name ];\n\n\t\t\toutput += this._getGLSLUniformStruct( shaderStage + '_' + name, groupSnippets.join( '\\n' ) ) + '\\n';\n\n\t\t}\n\n\t\toutput += bindingSnippets.join( '\\n' );\n\n\t\treturn output;\n\n\t}\n\n\tgetTypeFromAttribute( attribute ) {\n\n\t\tlet nodeType = super.getTypeFromAttribute( attribute );\n\n\t\tif ( /^[iu]/.test( nodeType ) && attribute.gpuType !== IntType ) {\n\n\t\t\tlet dataAttribute = attribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\n\n\t\t\tconst array = dataAttribute.array;\n\n\t\t\tif ( ( array instanceof Uint32Array || array instanceof Int32Array ) === false ) {\n\n\t\t\t\tnodeType = nodeType.slice( 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tlet location = 0;\n\n\t\t\tfor ( const attribute of attributes ) {\n\n\t\t\t\tsnippet += `layout( location = ${ location ++ } ) in ${ attribute.type } ${ attribute.name };\\n`;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\t\tconst members = struct.getMemberTypes();\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst member = members[ i ];\n\t\t\tsnippets.push( `layout( location = ${i} ) out ${ member} m${i};` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\tgetStructs( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tif ( structs.length === 0 ) {\n\n\t\t\treturn 'layout( location = 0 ) out vec4 fragColor;\\n';\n\n\t\t}\n\n\t\tfor ( let index = 0, length = structs.length; index < length; index ++ ) {\n\n\t\t\tconst struct = structs[ index ];\n\n\t\t\tlet snippet = '\\n';\n\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\tsnippet += '\\n';\n\n\t\t\tsnippets.push( snippet );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\n' );\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst varyings = this.varyings;\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( shaderStage === 'compute' ) varying.needsInterpolation = true;\n\t\t\t\tconst type = varying.type;\n\t\t\t\tconst flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';\n\n\t\t\t\tsnippet += `${flat}${varying.needsInterpolation ? 'out' : '/*out*/'} ${type} ${varying.name};\\n`;\n\n\t\t\t}\n\n\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tconst type = varying.type;\n\t\t\t\t\tconst flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';\n\n\t\t\t\t\tsnippet += `${flat}in ${type} ${varying.name};\\n`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\treturn 'uint( gl_VertexID )';\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\treturn 'uint( gl_InstanceID )';\n\n\t}\n\n\tgetInvocationLocalIndex() {\n\n\t\tconst workgroupSize = this.object.workgroupSize;\n\n\t\tconst size = workgroupSize.reduce( ( acc, curr ) => acc * curr, 1 );\n\n\t\treturn `uint( gl_InstanceID ) % ${size}u`;\n\n\t}\n\n\tgetDrawIndex() {\n\n\t\tconst extensions = this.renderer.backend.extensions;\n\n\t\tif ( extensions.has( 'WEBGL_multi_draw' ) ) {\n\n\t\t\treturn 'uint( gl_DrawID )';\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn 'gl_FrontFacing';\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn 'gl_FragCoord.xy';\n\n\t}\n\n\tgetFragDepth() {\n\n\t\treturn 'gl_FragDepth';\n\n\t}\n\n\tenableExtension( name, behavior, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.extensions[ shaderStage ] || ( this.extensions[ shaderStage ] = new Map() );\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tbehavior\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tgetExtensions( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tconst ext = this.renderer.backend.extensions;\n\t\t\tconst isBatchedMesh = this.object.isBatchedMesh;\n\n\t\t\tif ( isBatchedMesh && ext.has( 'WEBGL_multi_draw' ) ) {\n\n\t\t\t\tthis.enableExtension( 'GL_ANGLE_multi_draw', 'require', shaderStage );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extensions = this.extensions[ shaderStage ];\n\n\t\tif ( extensions !== undefined ) {\n\n\t\t\tfor ( const { name, behavior } of extensions.values() ) {\n\n\t\t\t\tsnippets.push( `#extension ${name} : ${behavior}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\tisAvailable( name ) {\n\n\t\tlet result = supports[ name ];\n\n\t\tif ( result === undefined ) {\n\n\t\t\tif ( name === 'float32Filterable' ) {\n\n\t\t\t\tconst extensions = this.renderer.backend.extensions;\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) ) {\n\n\t\t\t\t\textensions.get( 'OES_texture_float_linear' );\n\t\t\t\t\tresult = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsupports[ name ] = result;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn true;\n\n\t}\n\n\tregisterTransform( varyingName, attributeNode ) {\n\n\t\tthis.transforms.push( { varyingName, attributeNode } );\n\n\t}\n\n\tgetTransforms( /* shaderStage  */ ) {\n\n\t\tconst transforms = this.transforms;\n\n\t\tlet snippet = '';\n\n\t\tfor ( let i = 0; i < transforms.length; i ++ ) {\n\n\t\t\tconst transform = transforms[ i ];\n\n\t\t\tconst attributeName = this.getPropertyName( transform.attributeNode );\n\n\t\t\tsnippet += `${ transform.varyingName } = ${ attributeName };\\n\\t`;\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t_getGLSLUniformStruct( name, vars ) {\n\n\t\treturn `\nlayout( std140 ) uniform ${name} {\n${vars}\n};`;\n\n\t}\n\n\t_getGLSLVertexCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// extensions \n${shaderData.extensions}\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// attributes\n${shaderData.attributes}\n\n// codes\n${shaderData.codes}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// transforms\n\t${shaderData.transforms}\n\n\t// flow\n\t${shaderData.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`;\n\n\t}\n\n\t_getGLSLFragmentCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// codes\n${shaderData.codes}\n\n${shaderData.structs}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tthis.sortBindingGroups();\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += 'gl_Position = ';\n\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( ! node.outputNode.isOutputStructNode ) {\n\n\t\t\t\t\t\t\tflow += 'fragColor = ';\n\t\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\n\t\t\tstageData.extensions = this.getExtensions( shaderStage );\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.transforms = this.getTransforms( shaderStage );\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getGLSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getGLSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getGLSLVertexCode( shadersData.compute );\n\n\t\t}\n\n\t}\n\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet uniformGPU = nodeData.uniformGPU;\n\n\t\tif ( uniformGPU === undefined ) {\n\n\t\t\tconst group = node.groupNode;\n\t\t\tconst groupName = group.name;\n\n\t\t\tconst bindings = this.getBindGroupArray( groupName, shaderStage );\n\n\t\t\tif ( type === 'texture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledTexture( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'texture3D' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'buffer' ) {\n\n\t\t\t\tnode.name = `NodeBuffer_${ node.id }`;\n\t\t\t\tuniformNode.name = `buffer${ node.id }`;\n\n\t\t\t\tconst buffer = new NodeUniformBuffer( node, group );\n\t\t\t\tbuffer.name = node.name;\n\n\t\t\t\tbindings.push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( shaderStage + '_' + groupName, group );\n\t\t\t\t\t//uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n}\n\nexport default GLSLNodeBuilder;\n", "let vector2 = null;\nlet vector4 = null;\nlet color4 = null;\n\nimport Color4 from './Color4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { createCanvasElement } from '../../utils.js';\nimport { REVISION } from '../../constants.js';\n\nclass Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tthis.parameters = Object.assign( {}, parameters );\n\t\tthis.data = new WeakMap();\n\t\tthis.renderer = null;\n\t\tthis.domElement = null;\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tthis.renderer = renderer;\n\n\t}\n\n\t// render context\n\n\tbegin( /*renderContext*/ ) { }\n\n\tfinish( /*renderContext*/ ) { }\n\n\t// render object\n\n\tdraw( /*renderObject, info*/ ) { }\n\n\t// program\n\n\tcreateProgram( /*program*/ ) { }\n\n\tdestroyProgram( /*program*/ ) { }\n\n\t// bindings\n\n\tcreateBindings( /*bingGroup, bindings*/ ) { }\n\n\tupdateBindings( /*bingGroup, bindings*/ ) { }\n\n\t// pipeline\n\n\tcreateRenderPipeline( /*renderObject*/ ) { }\n\n\tcreateComputePipeline( /*computeNode, pipeline*/ ) { }\n\n\tdestroyPipeline( /*pipeline*/ ) { }\n\n\t// cache key\n\n\tneedsRenderUpdate( /*renderObject*/ ) { } // return Boolean ( fast test )\n\n\tgetRenderCacheKey( /*renderObject*/ ) { } // return String\n\n\t// node builder\n\n\tcreateNodeBuilder( /*renderObject*/ ) { } // return NodeBuilder (ADD IT)\n\n\t// textures\n\n\tcreateSampler( /*texture*/ ) { }\n\n\tcreateDefaultTexture( /*texture*/ ) { }\n\n\tcreateTexture( /*texture*/ ) { }\n\n\tcopyTextureToBuffer( /*texture, x, y, width, height*/ ) {}\n\n\t// attributes\n\n\tcreateAttribute( /*attribute*/ ) { }\n\n\tcreateIndexAttribute( /*attribute*/ ) { }\n\n\tupdateAttribute( /*attribute*/ ) { }\n\n\tdestroyAttribute( /*attribute*/ ) { }\n\n\t// canvas\n\n\tgetContext() { }\n\n\tupdateSize() { }\n\n\t// utils\n\n\tresolveTimestampAsync( /*renderContext, type*/ ) { }\n\n\thasFeatureAsync( /*name*/ ) { } // return Boolean\n\n\thasFeature( /*name*/ ) { } // return Boolean\n\n\tgetInstanceCount( renderObject ) {\n\n\t\tconst { object, geometry } = renderObject;\n\n\t\treturn geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.count > 1 ? object.count : 1 );\n\n\t}\n\n\tgetDrawingBufferSize() {\n\n\t\tvector2 = vector2 || new Vector2();\n\n\t\treturn this.renderer.getDrawingBufferSize( vector2 );\n\n\t}\n\n\tgetScissor() {\n\n\t\tvector4 = vector4 || new Vector4();\n\n\t\treturn this.renderer.getScissor( vector4 );\n\n\t}\n\n\tsetScissorTest( /*boolean*/ ) { }\n\n\tgetClearColor() {\n\n\t\tconst renderer = this.renderer;\n\n\t\tcolor4 = color4 || new Color4();\n\n\t\trenderer.getClearColor( color4 );\n\n\t\tcolor4.getRGB( color4, this.renderer.currentColorSpace );\n\n\t\treturn color4;\n\n\t}\n\n\tgetDomElement() {\n\n\t\tlet domElement = this.domElement;\n\n\t\tif ( domElement === null ) {\n\n\t\t\tdomElement = ( this.parameters.canvas !== undefined ) ? this.parameters.canvas : createCanvasElement();\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in domElement ) domElement.setAttribute( 'data-engine', `three.js r${REVISION} webgpu` );\n\n\t\t\tthis.domElement = domElement;\n\n\t\t}\n\n\t\treturn domElement;\n\n\t}\n\n\t// resource properties\n\n\tset( object, value ) {\n\n\t\tthis.data.set( object, value );\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\tdelete( object ) {\n\n\t\tthis.data.delete( object );\n\n\t}\n\n}\n\nexport default Backend;\n", "import { IntType } from '../../../constants.js';\n\nlet _id = 0;\n\nclass DualAttributeData {\n\n\tconstructor( attributeData, dualBuffer ) {\n\n\t\tthis.buffers = [ attributeData.bufferGPU, dualBuffer ];\n\t\tthis.type = attributeData.type;\n\t\tthis.bufferType = attributeData.bufferType;\n\t\tthis.pbo = attributeData.pbo;\n\t\tthis.byteLength = attributeData.byteLength;\n\t\tthis.bytesPerElement = attributeData.BYTES_PER_ELEMENT;\n\t\tthis.version = attributeData.version;\n\t\tthis.isInteger = attributeData.isInteger;\n\t\tthis.activeBufferIndex = 0;\n\t\tthis.baseId = attributeData.id;\n\n\t}\n\n\n\tget id() {\n\n\t\treturn `${ this.baseId }|${ this.activeBufferIndex }`;\n\n\t}\n\n\tget bufferGPU() {\n\n\t\treturn this.buffers[ this.activeBufferIndex ];\n\n\t}\n\n\tget transformBuffer() {\n\n\t\treturn this.buffers[ this.activeBufferIndex ^ 1 ];\n\n\t}\n\n\tswitchBuffers() {\n\n\t\tthis.activeBufferIndex ^= 1;\n\n\t}\n\n}\n\nclass WebGLAttributeUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateAttribute( attribute, bufferType ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage || gl.STATIC_DRAW;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet bufferGPU = bufferData.bufferGPU;\n\n\t\tif ( bufferGPU === undefined ) {\n\n\t\t\tbufferGPU = this._createBuffer( gl, bufferType, array, usage );\n\n\t\t\tbufferData.bufferGPU = bufferGPU;\n\t\t\tbufferData.bufferType = bufferType;\n\t\t\tbufferData.version = bufferAttribute.version;\n\n\t\t}\n\n\t\t//attribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLBackend: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\tlet attributeData = {\n\t\t\tbufferGPU,\n\t\t\tbufferType,\n\t\t\ttype,\n\t\t\tbyteLength: array.byteLength,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version,\n\t\t\tpbo: attribute.pbo,\n\t\t\tisInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute.gpuType === IntType,\n\t\t\tid: _id ++\n\t\t};\n\n\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {\n\n\t\t\t// create buffer for tranform feedback use\n\t\t\tconst bufferGPUDual = this._createBuffer( gl, bufferType, array, usage );\n\t\t\tattributeData = new DualAttributeData( attributeData, bufferGPUDual );\n\n\t\t}\n\n\t\tbackend.set( attribute, attributeData );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\t\tconst bufferType = bufferData.bufferType;\n\t\tconst updateRanges = attribute.isInterleavedBufferAttribute ? attribute.data.updateRanges : attribute.updateRanges;\n\n\t\tgl.bindBuffer( bufferType, bufferData.bufferGPU );\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tgl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, range.start, range.count );\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t\tgl.bindBuffer( bufferType, null );\n\n\t\tbufferData.version = bufferAttribute.version;\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tbackend.delete( attribute.data );\n\n\t\t}\n\n\t\tconst attributeData = backend.get( attribute );\n\n\t\tgl.deleteBuffer( attributeData.bufferGPU );\n\n\t\tbackend.delete( attribute );\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst { bufferGPU } = backend.get( bufferAttribute );\n\n\t\tconst array = attribute.array;\n\t\tconst byteLength = array.byteLength;\n\n\t\tgl.bindBuffer( gl.COPY_READ_BUFFER, bufferGPU );\n\n\t\tconst writeBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );\n\t\tgl.bufferData( gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ );\n\n\t\tgl.copyBufferSubData( gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new attribute.array.constructor( array.length );\n\n\t\t// Ensure the buffer is bound before reading\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );\n\n\t\tgl.getBufferSubData( gl.COPY_WRITE_BUFFER, 0, dstBuffer );\n\n\t\tgl.deleteBuffer( writeBuffer );\n\n\t\tgl.bindBuffer( gl.COPY_READ_BUFFER, null );\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, null );\n\n\t\treturn dstBuffer.buffer;\n\n\t}\n\n\t_createBuffer( gl, bufferType, array, usage ) {\n\n\t\tconst bufferGPU = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, bufferGPU );\n\t\tgl.bufferData( bufferType, array, usage );\n\t\tgl.bindBuffer( bufferType, null );\n\n\t\treturn bufferGPU;\n\n\t}\n\n}\n\nexport default WebGLAttributeUtils;\n", "import {\n\tCullFaceNone, CullFaceBack, CullFaceFront, DoubleSide, BackSide,\n\tNormalBlending, NoBlending, CustomBlending, AddEquation,\n\tAdditiveBlending, SubtractiveBlending, MultiplyBlending, SubtractEquation, ReverseSubtractEquation,\n\tZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor,\n\tOneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth\n} from '../../../constants.js';\n\nlet initialized = false, equationToGL, factorToGL;\n\nclass WebGLState {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\n\t\tthis.enabled = {};\n\t\tthis.currentFlipSided = null;\n\t\tthis.currentCullFace = null;\n\t\tthis.currentProgram = null;\n\t\tthis.currentBlendingEnabled = false;\n\t\tthis.currentBlending = null;\n\t\tthis.currentBlendSrc = null;\n\t\tthis.currentBlendDst = null;\n\t\tthis.currentBlendSrcAlpha = null;\n\t\tthis.currentBlendDstAlpha = null;\n\t\tthis.currentPremultipledAlpha = null;\n\t\tthis.currentPolygonOffsetFactor = null;\n\t\tthis.currentPolygonOffsetUnits = null;\n\t\tthis.currentColorMask = null;\n\t\tthis.currentDepthFunc = null;\n\t\tthis.currentDepthMask = null;\n\t\tthis.currentStencilFunc = null;\n\t\tthis.currentStencilRef = null;\n\t\tthis.currentStencilFuncMask = null;\n\t\tthis.currentStencilFail = null;\n\t\tthis.currentStencilZFail = null;\n\t\tthis.currentStencilZPass = null;\n\t\tthis.currentStencilMask = null;\n\t\tthis.currentLineWidth = null;\n\n\t\tthis.currentBoundFramebuffers = {};\n\t\tthis.currentDrawbuffers = new WeakMap();\n\n\t\tthis.maxTextures = this.gl.getParameter( this.gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tthis.currentTextureSlot = null;\n\t\tthis.currentBoundTextures = {};\n\t\tthis.currentBoundBufferBases = {};\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init( this.gl );\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t_init( gl ) {\n\n\t\t// Store only WebGL constants here.\n\n\t\tequationToGL = {\n\t\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tfactorToGL = {\n\t\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t\t[ OneFactor ]: gl.ONE,\n\t\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t}\n\n\tenable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== true ) {\n\n\t\t\tthis.gl.enable( id );\n\t\t\tenabled[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tdisable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== false ) {\n\n\t\t\tthis.gl.disable( id );\n\t\t\tenabled[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tsetFlipSided( flipSided ) {\n\n\t\tif ( this.currentFlipSided !== flipSided ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tthis.currentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tsetCullFace( cullFace ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== this.currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tthis.currentCullFace = cullFace;\n\n\t}\n\n\tsetLineWidth( width ) {\n\n\t\tconst { currentLineWidth, gl } = this;\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tthis.currentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\n\tsetBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( this.currentBlendingEnabled === true ) {\n\n\t\t\t\tthis.disable( gl.BLEND );\n\t\t\t\tthis.currentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.currentBlendingEnabled === false ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\t\t\tthis.currentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha ) {\n\n\t\t\t\tif ( this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tthis.currentBlendEquation = AddEquation;\n\t\t\t\t\tthis.currentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.currentBlendSrc = null;\n\t\t\t\tthis.currentBlendDst = null;\n\t\t\t\tthis.currentBlendSrcAlpha = null;\n\t\t\t\tthis.currentBlendDstAlpha = null;\n\n\t\t\t\tthis.currentBlending = blending;\n\t\t\t\tthis.currentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tthis.currentBlendEquation = blendEquation;\n\t\t\tthis.currentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tthis.currentBlendSrc = blendSrc;\n\t\t\tthis.currentBlendDst = blendDst;\n\t\t\tthis.currentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tthis.currentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tthis.currentBlending = blending;\n\t\tthis.currentPremultipledAlpha = false;\n\n\t}\n\n\tsetColorMask( colorMask ) {\n\n\t\tif ( this.currentColorMask !== colorMask ) {\n\n\t\t\tthis.gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tthis.currentColorMask = colorMask;\n\n\t\t}\n\n\t}\n\n\tsetDepthTest( depthTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( depthTest ) {\n\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t}\n\n\tsetDepthMask( depthMask ) {\n\n\t\tif ( this.currentDepthMask !== depthMask ) {\n\n\t\t\tthis.gl.depthMask( depthMask );\n\t\t\tthis.currentDepthMask = depthMask;\n\n\t\t}\n\n\t}\n\n\tsetDepthFunc( depthFunc ) {\n\n\t\tif ( this.currentDepthFunc !== depthFunc ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tthis.currentDepthFunc = depthFunc;\n\n\t\t}\n\n\t}\n\n\tsetStencilTest( stencilTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( stencilTest ) {\n\n\t\t\tthis.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t}\n\n\tsetStencilMask( stencilMask ) {\n\n\t\tif ( this.currentStencilMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilMask( stencilMask );\n\t\t\tthis.currentStencilMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\tsetStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( this.currentStencilFunc !== stencilFunc ||\n\t\t\t this.currentStencilRef !== stencilRef ||\n\t\t\t this.currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\tthis.currentStencilFunc = stencilFunc;\n\t\t\tthis.currentStencilRef = stencilRef;\n\t\t\tthis.currentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\tsetStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( this.currentStencilFail !== stencilFail ||\n\t\t\t this.currentStencilZFail !== stencilZFail ||\n\t\t\t this.currentStencilZPass !== stencilZPass ) {\n\n\t\t\tthis.gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\tthis.currentStencilFail = stencilFail;\n\t\t\tthis.currentStencilZFail = stencilZFail;\n\t\t\tthis.currentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t}\n\n\tsetMaterial( material, frontFaceCW ) {\n\n\t\tconst { gl } = this;\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? this.disable( gl.CULL_FACE )\n\t\t\t: this.enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tthis.setFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? this.setBlending( NoBlending )\n\t\t\t: this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tthis.setDepthFunc( material.depthFunc );\n\t\tthis.setDepthTest( material.depthTest );\n\t\tthis.setDepthMask( material.depthWrite );\n\t\tthis.setColorMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tthis.setStencilTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tthis.setStencilMask( material.stencilWriteMask );\n\t\t\tthis.setStencilFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tthis.setStencilOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tthis.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true && this.backend.renderer.samples > 1\n\t\t\t? this.enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: this.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t}\n\n\tsetPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tthis.currentPolygonOffsetFactor = factor;\n\t\t\t\tthis.currentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tuseProgram( program ) {\n\n\t\tif ( this.currentProgram !== program ) {\n\n\t\t\tthis.gl.useProgram( program );\n\n\t\t\tthis.currentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t// framebuffer\n\n\n\tbindFramebuffer( target, framebuffer ) {\n\n\t\tconst { gl, currentBoundFramebuffers } = this;\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\tif ( target === gl.FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tdrawBuffers( renderContext, framebuffer ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet drawBuffers = [];\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tdrawBuffers = this.currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tthis.currentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t}\n\n\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t}\n\n\t}\n\n\n\t// texture\n\n\tactiveTexture( webglSlot ) {\n\n\t\tconst { gl, currentTextureSlot, maxTextures } = this;\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tthis.currentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tbindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tconst { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tthis.currentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tbindBufferBase( target, index, buffer ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst key = `${target}-${index}`;\n\n\t\tif ( this.currentBoundBufferBases[ key ] !== buffer ) {\n\n\t\t\tgl.bindBufferBase( target, index, buffer );\n\t\t\tthis.currentBoundBufferBases[ key ] = buffer;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\n\tunbindTexture() {\n\n\t\tconst { gl, currentTextureSlot, currentBoundTextures } = this;\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGLState;\n", "import { RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT1_Format, RGB_S3TC_DXT1_Format, DepthFormat, DepthStencilFormat, LuminanceAlphaFormat, LuminanceFormat, RedFormat, RGBFormat, RGBAFormat, AlphaFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, HalfFloatType, FloatType, UnsignedIntType, IntType, UnsignedShortType, ShortType, ByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedShort5551Type, UnsignedShort4444Type, UnsignedByteType, RGBA_BPTC_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, SRGBColorSpace, NoColorSpace } from '../../../constants.js';\n\nclass WebGLUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\t\tthis.extensions = backend.extensions;\n\n\t}\n\n\tconvert( p, colorSpace = NoColorSpace ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\treturn gl.HALF_FLOAT;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( colorSpace === SRGBColorSpace ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC\n\n\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\treturn gl.UNSIGNED_INT_24_8;\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\t_clientWaitAsync() {\n\n\t\tconst { gl } = this;\n\n\t\tconst sync = gl.fenceSync( gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );\n\n\t\tgl.flush();\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tfunction test() {\n\n\t\t\t\tconst res = gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 );\n\n\t\t\t\tif ( res === gl.WAIT_FAILED ) {\n\n\t\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( res === gl.TIMEOUT_EXPIRED ) {\n\n\t\t\t\t\trequestAnimationFrame( test );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t\ttest();\n\n\t\t} );\n\n\t}\n\n}\n\nexport default WebGLUtils;\n", "import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, FloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, SRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare } from '../../../constants.js';\n\nlet initialized = false, wrappingToGL, filterToGL, compareToGL;\n\nclass WebGLTextureUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = backend.gl;\n\t\tthis.extensions = backend.extensions;\n\t\tthis.defaultTextures = {};\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init( this.gl );\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t_init( gl ) {\n\n\t\t// Store only WebGL constants here.\n\n\t\twrappingToGL = {\n\t\t\t[ RepeatWrapping ]: gl.REPEAT,\n\t\t\t[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,\n\t\t\t[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT\n\t\t};\n\n\t\tfilterToGL = {\n\t\t\t[ NearestFilter ]: gl.NEAREST,\n\t\t\t[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t\t[ LinearFilter ]: gl.LINEAR,\n\t\t\t[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tcompareToGL = {\n\t\t\t[ NeverCompare ]: gl.NEVER,\n\t\t\t[ AlwaysCompare ]: gl.ALWAYS,\n\t\t\t[ LessCompare ]: gl.LESS,\n\t\t\t[ LessEqualCompare ]: gl.LEQUAL,\n\t\t\t[ EqualCompare ]: gl.EQUAL,\n\t\t\t[ GreaterEqualCompare ]: gl.GEQUAL,\n\t\t\t[ GreaterCompare ]: gl.GREATER,\n\t\t\t[ NotEqualCompare ]: gl.NOTEQUAL\n\t\t};\n\n\t}\n\n\tfilterFallback( f ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn gl.NEAREST;\n\n\t\t}\n\n\t\treturn gl.LINEAR;\n\n\t}\n\n\tgetGLTextureType( texture ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet glTextureType;\n\n\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_CUBE_MAP;\n\n\t\t} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_2D_ARRAY;\n\n\t\t} else if ( texture.isData3DTexture === true ) { // TODO: isCompressed3DTexture, wait for #26642\n\n\t\t\tglTextureType = gl.TEXTURE_3D;\n\n\t\t} else {\n\n\t\t\tglTextureType = gl.TEXTURE_2D;\n\n\n\t\t}\n\n\t\treturn glTextureType;\n\n\t}\n\n\tgetInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === gl.RED ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.R32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RG32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGB32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGB16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8 : gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) internalFormat = gl.RGB565;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGB4;\n\t\t\tif ( glType === gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = gl.RGB9_E5;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_COMPONENT ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH24_STENCIL8;\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_STENCIL ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;\n\n\t\t}\n\n\t\tif ( internalFormat === gl.R16F || internalFormat === gl.R32F ||\n\t\t\tinternalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n\t\t\tinternalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tsetTextureParameters( textureType, texture ) {\n\n\t\tconst { gl, extensions, backend } = this;\n\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE );\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t}\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\n\n\t\tconst hasMipmaps = texture.mipmaps !== undefined && texture.mipmaps.length > 0;\n\n\t\t// follow WebGPU backend mapping for texture filtering\n\t\tconst minFilter = texture.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture.minFilter;\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\tif ( texture.anisotropy > 1 ) {\n\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\t\t\tgl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, backend.getMaxAnisotropy() ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tconst { gl, backend, defaultTextures } = this;\n\n\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tlet textureGPU = defaultTextures[ glTextureType ];\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = gl.createTexture();\n\n\t\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\t// gl.texImage2D( glTextureType, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\tdefaultTextures[ glTextureType ] = textureGPU;\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tisDefault: true\n\t\t} );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { levels, width, height, depth } = options;\n\n\t\tconst glFormat = backend.utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = backend.utils.convert( texture.type );\n\t\tconst glInternalFormat = this.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\tconst textureGPU = gl.createTexture();\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( ! texture.isVideoTexture ) {\n\n\t\t\tgl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tglFormat,\n\t\t\tglType,\n\t\t\tglInternalFormat\n\t\t} );\n\n\t}\n\n\tcopyBufferToTexture( buffer, texture ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\tconst { textureGPU, glTextureType, glFormat, glType } = backend.get( texture );\n\n\t\tconst { width, height } = texture.source.data;\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, buffer );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, false );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false );\n\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, 0 );\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, null );\n\n\t\tbackend.state.unbindTexture();\n\t\t// debug\n\t\t// const framebuffer = gl.createFramebuffer();\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer );\n\t\t// gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTextureType, textureGPU, 0 );\n\n\t\t// const readout = new Float32Array( width * height * 4 );\n\n\t\t// const altFormat = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT );\n\t\t// const altType = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE );\n\n\t\t// gl.readPixels( 0, 0, width, height, altFormat, altType, readout );\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\t// console.log( readout );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tconst { gl } = this;\n\t\tconst { width, height } = options;\n\t\tconst { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get( texture );\n\n\t\tif ( texture.isRenderTargetTexture || ( textureGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\tconst getImage = ( source ) => {\n\n\t\t\tif ( source.isDataTexture ) {\n\n\t\t\t\treturn source.image.data;\n\n\t\t\t} else if ( source instanceof ImageBitmap || source instanceof OffscreenCanvas || source instanceof HTMLImageElement || source instanceof HTMLCanvasElement ) {\n\n\t\t\t\treturn source;\n\n\t\t\t}\n\n\t\t\treturn source.data;\n\n\t\t};\n\n\t\tthis.backend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tconst mipmaps = texture.mipmaps;\n\t\t\tconst image = options.image;\n\n\t\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\n\t\t\t\t\tif ( texture.format !== gl.RGBA ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tgl.compressedTexSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\n\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tgl.compressedTexSubImage2D( gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'Unsupported compressed texture format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tconst images = options.images;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst image = getImage( images[ i ] );\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\ttexture.update();\n\n\t\t\tgl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );\n\n\n\t\t} else {\n\n\t\t\tconst image = getImage( options.image );\n\n\t\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t}\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, glTextureType } = backend.get( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\tgl.generateMipmap( glTextureType );\n\n\t}\n\n\tdeallocateRenderBuffers( renderTarget ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\t// remove framebuffer reference\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderContextData = backend.get( renderTarget );\n\n\t\t\trenderContextData.renderBufferStorageSetup = undefined;\n\n\t\t\tif ( renderContextData.framebuffers ) {\n\n\t\t\t\tfor ( const cacheKey in renderContextData.framebuffers ) {\n\n\t\t\t\t\tgl.deleteFramebuffer( renderContextData.framebuffers[ cacheKey ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.framebuffers;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.depthRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.depthRenderbuffer );\n\t\t\t\tdelete renderContextData.depthRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.stencilRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.stencilRenderbuffer );\n\t\t\t\tdelete renderContextData.stencilRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaFrameBuffer ) {\n\n\t\t\t\tgl.deleteFramebuffer( renderContextData.msaaFrameBuffer );\n\t\t\t\tdelete renderContextData.msaaFrameBuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaRenderbuffers ) {\n\n\t\t\t\tfor ( let i = 0; i < renderContextData.msaaRenderbuffers.length; i ++ ) {\n\n\t\t\t\t\tgl.deleteRenderbuffer( renderContextData.msaaRenderbuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.msaaRenderbuffers;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, renderTarget } = backend.get( texture );\n\n\t\tthis.deallocateRenderBuffers( renderTarget );\n\t\tgl.deleteTexture( textureGPU );\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get( dstTexture );\n\n\n\t\tlet width, height, minX, minY;\n\t\tlet dstX, dstY;\n\t\tif ( srcRegion !== null ) {\n\n\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\theight = srcRegion.max.y - srcRegion.min.y;\n\t\t\tminX = srcRegion.min.x;\n\t\t\tminY = srcRegion.min.y;\n\n\t\t} else {\n\n\t\t\twidth = srcTexture.image.width;\n\t\t\theight = srcTexture.image.height;\n\t\t\tminX = 0;\n\t\t\tminY = 0;\n\n\t\t}\n\n\t\tif ( dstPosition !== null ) {\n\n\t\t\tdstX = dstPosition.x;\n\t\t\tdstY = dstPosition.y;\n\n\t\t} else {\n\n\t\t\tdstX = 0;\n\t\t\tdstY = 0;\n\n\t\t}\n\n\t\tstate.bindTexture( glTextureType, dstTextureGPU );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\tconst currentUnpackRowLen = gl.getParameter( gl.UNPACK_ROW_LENGTH );\n\t\tconst currentUnpackImageHeight = gl.getParameter( gl.UNPACK_IMAGE_HEIGHT );\n\t\tconst currentUnpackSkipPixels = gl.getParameter( gl.UNPACK_SKIP_PIXELS );\n\t\tconst currentUnpackSkipRows = gl.getParameter( gl.UNPACK_SKIP_ROWS );\n\t\tconst currentUnpackSkipImages = gl.getParameter( gl.UNPACK_SKIP_IMAGES );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;\n\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, image.width );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, minX );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, minY );\n\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\tgl.texSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tgl.compressedTexSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) gl.generateMipmap( gl.TEXTURE_2D );\n\n\t\tstate.unbindTexture();\n\n\t}\n\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tconst { gl } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU } = this.backend.get( texture );\n\n\t\tconst { x, y, z: width, w: height } = rectangle;\n\n\t\tconst requireDrawFrameBuffer = texture.isDepthTexture === true || ( renderContext.renderTarget && renderContext.renderTarget.samples > 0 );\n\n\t\tconst srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.gerDrawingBufferSize().y;\n\n\t\tif ( requireDrawFrameBuffer ) {\n\n\t\t\tconst partial = ( x !== 0 || y !== 0 );\n\t\t\tlet mask;\n\t\t\tlet attachment;\n\n\t\t\tif ( texture.isDepthTexture === true ) {\n\n\t\t\t\tmask = gl.DEPTH_BUFFER_BIT;\n\t\t\t\tattachment = gl.DEPTH_ATTACHMENT;\n\n\t\t\t\tif ( renderContext.stencil ) {\n\n\t\t\t\t\tmask |= gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmask = gl.COLOR_BUFFER_BIT;\n\t\t\t\tattachment = gl.COLOR_ATTACHMENT0;\n\n\t\t\t}\n\n\t\t\tif ( partial ) {\n\n\t\t\t\tconst renderTargetContextData = this.backend.get( renderContext.renderTarget );\n\n\t\t\t\tconst fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];\n\t\t\t\tconst msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );\n\n\t\t\t\tconst flippedY = srcHeight - y - height;\n\n\t\t\t\tgl.blitFramebuffer( x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST );\n\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\n\t\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height );\n\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t} else {\n\n\t\t\t\tconst fb = gl.createFramebuffer();\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\t\tgl.framebufferTexture2D( gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0 );\n\t\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST );\n\n\t\t\t\tgl.deleteFramebuffer( fb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps ) this.generateMipmaps( texture );\n\n\t\tthis.backend._setFramebuffer( renderContext );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tsetupRenderBufferStorage( renderbuffer, renderContext ) {\n\n\t\tconst { gl } = this;\n\t\tconst renderTarget = renderContext.renderTarget;\n\n\t\tconst { samples, depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;\n\n\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( depthBuffer && ! stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = gl.DEPTH_COMPONENT24;\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === gl.FLOAT ) {\n\n\t\t\t\t\t\tglInternalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, glInternalFormat, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, glInternalFormat, width, height );\n\n\t\t\t}\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( depthBuffer && stencilBuffer ) {\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height );\n\n\t\t\t}\n\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t}\n\n\t}\n\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\tconst { backend, gl } = this;\n\n\t\tconst { textureGPU, glFormat, glType } = this.backend.get( texture );\n\n\t\tconst fb = gl.createFramebuffer();\n\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\tconst target = texture.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n\n\t\tgl.framebufferTexture2D( gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0 );\n\n\t\tconst typedArrayType = this._getTypedArrayType( glType );\n\t\tconst bytesPerTexel = this._getBytesPerTexel( glType, glFormat );\n\n\t\tconst elementCount = width * height;\n\t\tconst byteLength = elementCount * bytesPerTexel;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.bufferData( gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ );\n\t\tgl.readPixels( x, y, width, height, glFormat, glType, 0 );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new typedArrayType( byteLength / typedArrayType.BYTES_PER_ELEMENT );\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.getBufferSubData( gl.PIXEL_PACK_BUFFER, 0, dstBuffer );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tgl.deleteFramebuffer( fb );\n\n\t\treturn dstBuffer;\n\n\t}\n\n\t_getTypedArrayType( glType ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) return Uint8Array;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_INT ) return Uint32Array;\n\n\t\tif ( glType === gl.HALF_FLOAT ) return Uint16Array;\n\t\tif ( glType === gl.FLOAT ) return Float32Array;\n\n\t\tthrow new Error( `Unsupported WebGL type: ${glType}` );\n\n\t}\n\n\t_getBytesPerTexel( glType, glFormat ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet bytesPerComponent = 0;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) bytesPerComponent = 1;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_5_5_1 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_6_5 ||\n\t\t\tglType === gl.UNSIGNED_SHORT ||\n\t\t\tglType === gl.HALF_FLOAT ) bytesPerComponent = 2;\n\n\t\tif ( glType === gl.UNSIGNED_INT ||\n\t\t\tglType === gl.FLOAT ) bytesPerComponent = 4;\n\n\t\tif ( glFormat === gl.RGBA ) return bytesPerComponent * 4;\n\t\tif ( glFormat === gl.RGB ) return bytesPerComponent * 3;\n\t\tif ( glFormat === gl.ALPHA ) return bytesPerComponent;\n\n\t}\n\n}\n\nexport default WebGLTextureUtils;\n", "class WebGLExtensions {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\t\tthis.availableExtensions = this.gl.getSupportedExtensions();\n\n\t\tthis.extensions = {};\n\n\t}\n\n\tget( name ) {\n\n\t\tlet extension = this.extensions[ name ];\n\n\t\tif ( extension === undefined ) {\n\n\t\t\textension = this.gl.getExtension( name );\n\n\t\t\tthis.extensions[ name ] = extension;\n\n\t\t}\n\n\t\treturn extension;\n\n\t}\n\n\thas( name ) {\n\n\t\treturn this.availableExtensions.includes( name );\n\n\t}\n\n}\n\nexport default WebGLExtensions;\n", "class WebGLCapabilities {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.maxAnisotropy = null;\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\tif ( this.maxAnisotropy !== null ) return this.maxAnisotropy;\n\n\t\tconst gl = this.backend.gl;\n\t\tconst extensions = this.backend.extensions;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tthis.maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tthis.maxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn this.maxAnisotropy;\n\n\t}\n\n}\n\nexport default WebGLCapabilities;\n", "export const GLFeatureName = {\n\n\t'WEBGL_multi_draw': 'WEBGL_multi_draw',\n\t'WEBGL_compressed_texture_astc': 'texture-compression-astc',\n\t'WEBGL_compressed_texture_etc': 'texture-compression-etc2',\n\t'WEBGL_compressed_texture_etc1': 'texture-compression-etc1',\n\t'WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n\t'WEBKIT_WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n\t'WEBGL_compressed_texture_s3tc': 'texture-compression-bc',\n\t'EXT_texture_compression_bptc': 'texture-compression-bptc',\n\t'EXT_disjoint_timer_query_webgl2': 'timestamp-query',\n\n};\n", "class WebGLBufferRenderer {\n\n\tconstructor( backend ) {\n\n\t\tthis.gl = backend.gl;\n\t\tthis.extensions = backend.extensions;\n\t\tthis.info = backend.renderer.info;\n\t\tthis.mode = null;\n\t\tthis.index = 0;\n\t\tthis.type = null;\n\t\tthis.object = null;\n\n\t}\n\n\trender( start, count ) {\n\n\t\tconst { gl, mode, object, type, info, index } = this;\n\n\t\tif ( index !== 0 ) {\n\n\t\t\tgl.drawElements( mode, count, type, start );\n\n\t\t} else {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t}\n\n\t\tinfo.update( object, count, mode, 1 );\n\n\t}\n\n\trenderInstances( start, count, primcount ) {\n\n\t\tconst { gl, mode, type, index, object, info } = this;\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tif ( index !== 0 ) {\n\n\t\t\tgl.drawElementsInstanced( mode, count, type, start, primcount );\n\n\t\t} else {\n\n\t\t\tgl.drawArraysInstanced( mode, start, count, primcount );\n\n\t\t}\n\n\t\tinfo.update( object, count, mode, primcount );\n\n\t}\n\n\trenderMultiDraw( starts, counts, drawCount ) {\n\n\t\tconst { extensions, mode, object, info } = this;\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\tthis.render( starts[ i ], counts[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.index !== 0 ) {\n\n\t\t\t\textension.multiDrawElementsWEBGL( mode, counts, 0, this.type, starts, 0, drawCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );\n\n\t\t\t}\n\n\t\t\tlet elementCount = 0;\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ];\n\n\t\t\t}\n\n\t\t\tinfo.update( object, elementCount, mode, 1 );\n\n\t\t}\n\n\t}\n\n\trenderMultiDrawInstances( starts, counts, drawCount, primcount ) {\n\n\t\tconst { extensions, mode, object, info } = this;\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\tthis.renderInstances( starts[ i ], counts[ i ], primcount[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.index !== 0 ) {\n\n\t\t\t\textension.multiDrawElementsInstancedWEBGL( mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );\n\n\t\t\t}\n\n\t\t\tlet elementCount = 0;\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < primcount.length; i ++ ) {\n\n\t\t\t\tinfo.update( object, elementCount, mode, primcount[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n}\n\n\nexport { WebGLBufferRenderer };\n", "import GLSLNodeBuilder from './nodes/GLSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\nimport { getCacheKey } from '../common/RenderContext.js';\n\nimport WebGLAttributeUtils from './utils/WebGLAttributeUtils.js';\nimport WebGLState from './utils/WebGLState.js';\nimport WebGLUtils from './utils/WebGLUtils.js';\nimport WebGLTextureUtils from './utils/WebGLTextureUtils.js';\nimport WebGLExtensions from './utils/WebGLExtensions.js';\nimport WebGLCapabilities from './utils/WebGLCapabilities.js';\nimport { GLFeatureName } from './utils/WebGLConstants.js';\nimport { WebGLBufferRenderer } from './WebGLBufferRenderer.js';\n\nimport { warnOnce } from '../../utils.js';\nimport { WebGLCoordinateSystem } from '../../constants.js';\n\n//\n\nclass WebGLBackend extends Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isWebGLBackend = true;\n\n\t}\n\n\tinit( renderer ) {\n\n\t\tsuper.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\tconst glContext = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgl2' );\n\n\t\tthis.gl = glContext;\n\n\t\tthis.extensions = new WebGLExtensions( this );\n\t\tthis.capabilities = new WebGLCapabilities( this );\n\t\tthis.attributeUtils = new WebGLAttributeUtils( this );\n\t\tthis.textureUtils = new WebGLTextureUtils( this );\n\t\tthis.bufferRenderer = new WebGLBufferRenderer( this );\n\n\t\tthis.state = new WebGLState( this );\n\t\tthis.utils = new WebGLUtils( this );\n\n\t\tthis.vaoCache = {};\n\t\tthis.transformFeedbackCache = {};\n\t\tthis.discard = false;\n\t\tthis.trackTimestamp = ( parameters.trackTimestamp === true );\n\n\t\tthis.extensions.get( 'EXT_color_buffer_float' );\n\t\tthis.extensions.get( 'WEBGL_clip_cull_distance' );\n\t\tthis.extensions.get( 'OES_texture_float_linear' );\n\t\tthis.extensions.get( 'EXT_color_buffer_half_float' );\n\t\tthis.extensions.get( 'WEBGL_multisampled_render_to_texture' );\n\t\tthis.extensions.get( 'WEBGL_render_shared_exponent' );\n\t\tthis.extensions.get( 'WEBGL_multi_draw' );\n\n\t\tthis.disjoint = this.extensions.get( 'EXT_disjoint_timer_query_webgl2' );\n\t\tthis.parallel = this.extensions.get( 'KHR_parallel_shader_compile' );\n\n\t\tthis._currentContext = null;\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\n\tinitTimestampQuery( renderContext ) {\n\n\t\tif ( ! this.disjoint || ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tif ( this.queryRunning ) {\n\n\t\t  if ( ! renderContextData.queryQueue ) renderContextData.queryQueue = [];\n\t\t  renderContextData.queryQueue.push( renderContext );\n\t\t  return;\n\n\t\t}\n\n\t\tif ( renderContextData.activeQuery ) {\n\n\t\t  this.gl.endQuery( this.disjoint.TIME_ELAPSED_EXT );\n\t\t  renderContextData.activeQuery = null;\n\n\t\t}\n\n\t\trenderContextData.activeQuery = this.gl.createQuery();\n\n\t\tif ( renderContextData.activeQuery !== null ) {\n\n\t\t  this.gl.beginQuery( this.disjoint.TIME_ELAPSED_EXT, renderContextData.activeQuery );\n\t\t  this.queryRunning = true;\n\n\t\t}\n\n\t}\n\n\t// timestamp utils\n\n\tprepareTimestampBuffer( renderContext ) {\n\n\t\tif ( ! this.disjoint || ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tif ( renderContextData.activeQuery ) {\n\n\t\t  this.gl.endQuery( this.disjoint.TIME_ELAPSED_EXT );\n\n\t\t  if ( ! renderContextData.gpuQueries ) renderContextData.gpuQueries = [];\n\t\t  renderContextData.gpuQueries.push( { query: renderContextData.activeQuery } );\n\t\t  renderContextData.activeQuery = null;\n\t\t  this.queryRunning = false;\n\n\t\t  if ( renderContextData.queryQueue && renderContextData.queryQueue.length > 0 ) {\n\n\t\t\t\tconst nextRenderContext = renderContextData.queryQueue.shift();\n\t\t\t\tthis.initTimestampQuery( nextRenderContext );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t  async resolveTimestampAsync( renderContext, type = 'render' ) {\n\n\t\tif ( ! this.disjoint || ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tif ( ! renderContextData.gpuQueries ) renderContextData.gpuQueries = [];\n\n\t\tfor ( let i = 0; i < renderContextData.gpuQueries.length; i ++ ) {\n\n\t\t  const queryInfo = renderContextData.gpuQueries[ i ];\n\t\t  const available = this.gl.getQueryParameter( queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE );\n\t\t  const disjoint = this.gl.getParameter( this.disjoint.GPU_DISJOINT_EXT );\n\n\t\t  if ( available && ! disjoint ) {\n\n\t\t\t\tconst elapsed = this.gl.getQueryParameter( queryInfo.query, this.gl.QUERY_RESULT );\n\t\t\t\tconst duration = Number( elapsed ) / 1000000; // Convert nanoseconds to milliseconds\n\t\t\t\tthis.gl.deleteQuery( queryInfo.query );\n\t\t\t\trenderContextData.gpuQueries.splice( i, 1 ); // Remove the processed query\n\t\t\t\ti --;\n\t\t\t\tthis.renderer.info.updateTimestamp( type, duration );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this.gl;\n\n\t}\n\n\tbeginRender( renderContext ) {\n\n\t\tconst { gl } = this;\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t//\n\n\t\t//\n\n\t\tthis.initTimestampQuery( renderContext );\n\n\t\trenderContextData.previousContext = this._currentContext;\n\t\tthis._currentContext = renderContext;\n\n\t\tthis._setFramebuffer( renderContext );\n\n\t\tthis.clear( renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false );\n\n\t\t//\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t} else {\n\n\t\t\tgl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t}\n\n\t\tif ( renderContext.scissor ) {\n\n\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\tgl.scissor( x, renderContext.height - height - y, width, height );\n\n\t\t}\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the async reading of all previous queries complete\n\t\t\trenderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\t\t\trenderContextData.occlusionQueries = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\n\t\t}\n\n\t}\n\n\tfinishRender( renderContext ) {\n\n\t\tconst { gl, state } = this;\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst previousContext = renderContextData.previousContext;\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t}\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t\tconst textures = renderContext.textures;\n\n\t\tif ( textures !== null ) {\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tif ( texture.generateMipmaps ) {\n\n\t\t\t\t\tthis.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._currentContext = previousContext;\n\n\t\tif ( renderContext.textures !== null && renderContext.renderTarget ) {\n\n\t\t\tconst renderTargetContextData = this.get( renderContext.renderTarget );\n\n\t\t\tconst { samples } = renderContext.renderTarget;\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tconst fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];\n\n\t\t\t\tconst mask = gl.COLOR_BUFFER_BIT;\n\n\t\t\t\tconst msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t\tconst textures = renderContext.textures;\n\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t// TODO Add support for MRT\n\n\t\t\t\t\tif ( renderContext.scissor ) {\n\n\t\t\t\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\t\t\t\tconst viewY = renderContext.height - height - y;\n\n\t\t\t\t\t\tgl.blitFramebuffer( x, viewY, x + width, viewY + height, x, viewY, x + width, viewY + height, mask, gl.NEAREST );\n\t\t\t\t\t\tgl.invalidateSubFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x, viewY, width, height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blitFramebuffer( 0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST );\n\t\t\t\t\t\tgl.invalidateFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( previousContext !== null ) {\n\n\t\t\tthis._setFramebuffer( previousContext );\n\n\t\t\tif ( previousContext.viewport ) {\n\n\t\t\t\tthis.updateViewport( previousContext );\n\n\t\t\t} else {\n\n\t\t\t\tgl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.prepareTimestampBuffer( renderContext );\n\n\t}\n\n\tresolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueries && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\t\t\tconst { gl } = this;\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueries = null;\n\n\t\t\tconst check = () => {\n\n\t\t\t\tlet completed = 0;\n\n\t\t\t\t// check all queries and requeue as appropriate\n\t\t\t\tfor ( let i = 0; i < currentOcclusionQueries.length; i ++ ) {\n\n\t\t\t\t\tconst query = currentOcclusionQueries[ i ];\n\n\t\t\t\t\tif ( query === null ) continue;\n\n\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT_AVAILABLE ) ) {\n\n\t\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT ) > 0 ) occluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t\t\tcurrentOcclusionQueries[ i ] = null;\n\t\t\t\t\t\tgl.deleteQuery( query );\n\n\t\t\t\t\t\tcompleted ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( completed < currentOcclusionQueries.length ) {\n\n\t\t\t\t\trequestAnimationFrame( check );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderContextData.occluded = occluded;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcheck();\n\n\t\t}\n\n\t}\n\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\tupdateViewport( renderContext ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { x, y, width, height } = renderContext.viewportValue;\n\n\t\tgl.viewport( x, renderContext.height - height - y, width, height );\n\n\t}\n\n\tsetScissorTest( boolean ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( boolean ) {\n\n\t\t\tgl.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tgl.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\tclear( color, depth, stencil, descriptor = null, setFrameBuffer = true ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( descriptor === null ) {\n\n\t\t\tdescriptor = {\n\t\t\t\ttextures: null,\n\t\t\t\tclearColorValue: this.getClearColor()\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tlet clear = 0;\n\n\t\tif ( color ) clear |= gl.COLOR_BUFFER_BIT;\n\t\tif ( depth ) clear |= gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil ) clear |= gl.STENCIL_BUFFER_BIT;\n\n\t\tif ( clear !== 0 ) {\n\n\t\t\tconst clearColor = descriptor.clearColorValue || this.getClearColor();\n\n\t\t\t// premultiply alpha\n\n\t\t\tclearColor.r *= clearColor.a;\n\t\t\tclearColor.g *= clearColor.a;\n\t\t\tclearColor.b *= clearColor.a;\n\n\t\t\tif ( depth ) this.state.setDepthMask( true );\n\n\t\t\tif ( descriptor.textures === null ) {\n\n\t\t\t\tgl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearColor.a );\n\t\t\t\tgl.clear( clear );\n\n\t\t\t} else {\n\n\t\t\t\tif ( setFrameBuffer ) this._setFramebuffer( descriptor );\n\n\t\t\t\tif ( color ) {\n\n\t\t\t\t\tfor ( let i = 0; i < descriptor.textures.length; i ++ ) {\n\n\t\t\t\t\t\tgl.clearBufferfv( gl.COLOR, i, [ clearColor.r, clearColor.g, clearColor.b, clearColor.a ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( depth && stencil ) {\n\n\t\t\t\t\tgl.clearBufferfi( gl.DEPTH_STENCIL, 0, 1, 0 );\n\n\t\t\t\t} else if ( depth ) {\n\n\t\t\t\t\tgl.clearBufferfv( gl.DEPTH, 0, [ 1.0 ] );\n\n\t\t\t\t} else if ( stencil ) {\n\n\t\t\t\t\tgl.clearBufferiv( gl.STENCIL, 0, [ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbeginCompute( computeGroup ) {\n\n\t\tconst { state, gl } = this;\n\n\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\tthis.initTimestampQuery( computeGroup );\n\n\t}\n\n\tcompute( computeGroup, computeNode, bindings, pipeline ) {\n\n\t\tconst { state, gl } = this;\n\n\t\tif ( ! this.discard ) {\n\n\t\t\t// required here to handle async behaviour of render.compute()\n\t\t\tgl.enable( gl.RASTERIZER_DISCARD );\n\t\t\tthis.discard = true;\n\n\t\t}\n\n\t\tconst { programGPU, transformBuffers, attributes } = this.get( pipeline );\n\n\t\tconst vaoKey = this._getVaoKey( null, attributes );\n\n\t\tconst vaoGPU = this.vaoCache[ vaoKey ];\n\n\t\tif ( vaoGPU === undefined ) {\n\n\t\t\tthis._createVao( null, attributes );\n\n\t\t} else {\n\n\t\t\tgl.bindVertexArray( vaoGPU );\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\tthis._bindUniforms( bindings );\n\n\t\tconst transformFeedbackGPU = this._getTransformFeedback( transformBuffers );\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );\n\t\tgl.beginTransformFeedback( gl.POINTS );\n\n\t\tif ( attributes[ 0 ].isStorageInstancedBufferAttribute ) {\n\n\t\t\tgl.drawArraysInstanced( gl.POINTS, 0, 1, computeNode.count );\n\n\t\t} else {\n\n\t\t\tgl.drawArrays( gl.POINTS, 0, computeNode.count );\n\n\t\t}\n\n\t\tgl.endTransformFeedback();\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n\n\t\t// switch active buffers\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tconst dualAttributeData = transformBuffers[ i ];\n\n\t\t\tif ( dualAttributeData.pbo ) {\n\n\t\t\t\tthis.textureUtils.copyBufferToTexture( dualAttributeData.transformBuffer, dualAttributeData.pbo );\n\n\t\t\t}\n\n\t\t\tdualAttributeData.switchBuffers();\n\n\n\t\t}\n\n\t}\n\n\tfinishCompute( computeGroup ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.discard = false;\n\n\t\tgl.disable( gl.RASTERIZER_DISCARD );\n\n\t\tthis.prepareTimestampBuffer( computeGroup );\n\n\t}\n\n\tdraw( renderObject/*, info*/ ) {\n\n\t\tconst { object, pipeline, material, context } = renderObject;\n\t\tconst { programGPU } = this.get( pipeline );\n\n\t\tconst { gl, state } = this;\n\n\t\tconst contextData = this.get( context );\n\n\t\tconst drawParms = renderObject.getDrawParameters();\n\n\t\tif ( drawParms === null ) return;\n\n\t\t//\n\n\t\tthis._bindUniforms( renderObject.getBindings() );\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tstate.useProgram( programGPU );\n\n\t\t//\n\n\t\tlet vaoGPU = renderObject.staticVao;\n\n\t\tif ( vaoGPU === undefined ) {\n\n\t\t\tconst vaoKey = this._getVaoKey( renderObject.getIndex(), renderObject.getAttributes() );\n\n\t\t\tvaoGPU = this.vaoCache[ vaoKey ];\n\n\t\t\tif ( vaoGPU === undefined ) {\n\n\t\t\t\tlet staticVao;\n\n\t\t\t\t( { vaoGPU, staticVao } = this._createVao( renderObject.getIndex(), renderObject.getAttributes() ) );\n\n\t\t\t\tif ( staticVao ) renderObject.staticVao = vaoGPU;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\t//\n\n\t\tconst index = renderObject.getIndex();\n\n\t\t//\n\n\t\tconst lastObject = contextData.lastOcclusionObject;\n\n\t\tif ( lastObject !== object && lastObject !== undefined ) {\n\n\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t\tcontextData.occlusionQueryIndex ++;\n\n\t\t\t}\n\n\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\tconst query = gl.createQuery();\n\n\t\t\t\tgl.beginQuery( gl.ANY_SAMPLES_PASSED, query );\n\n\t\t\t\tcontextData.occlusionQueries[ contextData.occlusionQueryIndex ] = query;\n\t\t\t\tcontextData.occlusionQueryObjects[ contextData.occlusionQueryIndex ] = object;\n\n\t\t\t}\n\n\t\t\tcontextData.lastOcclusionObject = object;\n\n\t\t}\n\n\t\t//\n\t\tconst renderer = this.bufferRenderer;\n\n\t\tif ( object.isPoints ) renderer.mode = gl.POINTS;\n\t\telse if ( object.isLineSegments ) renderer.mode = gl.LINES;\n\t\telse if ( object.isLine ) renderer.mode = gl.LINE_STRIP;\n\t\telse if ( object.isLineLoop ) renderer.mode = gl.LINE_LOOP;\n\t\telse {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * this.renderer.getPixelRatio() );\n\t\t\t\trenderer.mode = gl.LINES;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.mode = gl.TRIANGLES;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst { vertexCount, instanceCount } = drawParms;\n\t\tlet { firstVertex } = drawParms;\n\n\t\trenderer.object = object;\n\n\t\tif ( index !== null ) {\n\n\t\t\tfirstVertex *= index.array.BYTES_PER_ELEMENT;\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\trenderer.index = index.count;\n\t\t\trenderer.type = indexData.type;\n\n\t\t} else {\n\n\t\t\trenderer.index = 0;\n\n\t\t}\n\n\t\tif ( object.isBatchedMesh ) {\n\n\t\t\tif ( object._multiDrawInstances !== null ) {\n\n\t\t\t\trenderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );\n\n\t\t\t} else if ( ! this.hasFeature( 'WEBGL_multi_draw' ) ) {\n\n\t\t\t\twarnOnce( 'THREE.WebGLRenderer: WEBGL_multi_draw not supported.' );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );\n\n\t\t\t}\n\n\t\t} else if ( instanceCount > 1 ) {\n\n\t\t\trenderer.renderInstances( firstVertex, vertexCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( firstVertex, vertexCount );\n\n\t\t}\n\t\t//\n\n\t\tgl.bindVertexArray( null );\n\n\t}\n\n\tneedsRenderUpdate( /*renderObject*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetRenderCacheKey( /*renderObject*/ ) {\n\n\t\treturn '';\n\n\t}\n\n\t// textures\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tthis.textureUtils.createDefaultTexture( texture );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tthis.textureUtils.createTexture( texture, options );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tthis.textureUtils.updateTexture( texture, options );\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t}\n\n\n\tdestroyTexture( texture ) {\n\n\t\tthis.textureUtils.destroyTexture( texture );\n\n\t}\n\n\tcopyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );\n\n\t}\n\n\tcreateSampler( /*texture*/ ) {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\tdestroySampler() {}\n\n\t// node builder\n\n\tcreateNodeBuilder( object, renderer ) {\n\n\t\treturn new GLSLNodeBuilder( object, renderer );\n\n\t}\n\n\t// program\n\n\tcreateProgram( program ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { stage, code } = program;\n\n\t\tconst shader = stage === 'fragment' ? gl.createShader( gl.FRAGMENT_SHADER ) : gl.createShader( gl.VERTEX_SHADER );\n\n\t\tgl.shaderSource( shader, code );\n\t\tgl.compileShader( shader );\n\n\t\tthis.set( program, {\n\t\t\tshaderGPU: shader\n\t\t} );\n\n\t}\n\n\tdestroyProgram( /*program*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tconst gl = this.gl;\n\t\tconst pipeline = renderObject.pipeline;\n\n\t\t// Program\n\n\t\tconst { fragmentProgram, vertexProgram } = pipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\n\t\tconst fragmentShader = this.get( fragmentProgram ).shaderGPU;\n\t\tconst vertexShader = this.get( vertexProgram ).shaderGPU;\n\n\t\tgl.attachShader( programGPU, fragmentShader );\n\t\tgl.attachShader( programGPU, vertexShader );\n\t\tgl.linkProgram( programGPU );\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU,\n\t\t\tfragmentShader,\n\t\t\tvertexShader\n\t\t} );\n\n\t\tif ( promises !== null && this.parallel ) {\n\n\t\t\tconst p = new Promise( ( resolve /*, reject*/ ) => {\n\n\t\t\t\tconst parallel = this.parallel;\n\t\t\t\tconst checkStatus = () => {\n\n\t\t\t\t\tif ( gl.getProgramParameter( programGPU, parallel.COMPLETION_STATUS_KHR ) ) {\n\n\t\t\t\t\t\tthis._completeCompile( renderObject, pipeline );\n\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trequestAnimationFrame( checkStatus );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tcheckStatus();\n\n\t\t\t} );\n\n\t\t\tpromises.push( p );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._completeCompile( renderObject, pipeline );\n\n\t}\n\n\t_handleSource( string, errorLine ) {\n\n\t\tconst lines = string.split( '\\n' );\n\t\tconst lines2 = [];\n\n\t\tconst from = Math.max( errorLine - 6, 0 );\n\t\tconst to = Math.min( errorLine + 6, lines.length );\n\n\t\tfor ( let i = from; i < to; i ++ ) {\n\n\t\t\tconst line = i + 1;\n\t\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t\t}\n\n\t\treturn lines2.join( '\\n' );\n\n\t}\n\n\t_getShaderErrors( gl, shader, type ) {\n\n\t\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\n\t\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && errors === '' ) return '';\n\n\t\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\t\tif ( errorMatches ) {\n\n\t\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + this._handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t\t} else {\n\n\t\t\treturn errors;\n\n\t\t}\n\n\t}\n\n\t_logProgramError( programGPU, glFragmentShader, glVertexShader ) {\n\n\t\tif ( this.renderer.debug.checkShaderErrors ) {\n\n\t\t\tconst gl = this.gl;\n\n\t\t\tconst programLog = gl.getProgramInfoLog( programGPU ).trim();\n\n\t\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\n\t\t\t\tif ( typeof this.renderer.debug.onShaderError === 'function' ) {\n\n\t\t\t\t\tthis.renderer.debug.onShaderError( gl, programGPU, glVertexShader, glFragmentShader );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// default error reporting\n\n\t\t\t\t\tconst vertexErrors = this._getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\t\tconst fragmentErrors = this._getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( programGPU, gl.VALIDATE_STATUS ) + '\\n\\n' +\n\t\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\t\t\tfragmentErrors\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_completeCompile( renderObject, pipeline ) {\n\n\t\tconst { state, gl } = this;\n\t\tconst pipelineData = this.get( pipeline );\n\t\tconst { programGPU, fragmentShader, vertexShader } = pipelineData;\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tthis._logProgramError( programGPU, fragmentShader, vertexShader );\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tthis._setupBindings( bindings, programGPU );\n\n\t\t//\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU\n\t\t} );\n\n\t}\n\n\tcreateComputePipeline( computePipeline, bindings ) {\n\n\t\tconst { state, gl } = this;\n\n\t\t// Program\n\n\t\tconst fragmentProgram = {\n\t\t\tstage: 'fragment',\n\t\t\tcode: '#version 300 es\\nprecision highp float;\\nvoid main() {}'\n\t\t};\n\n\t\tthis.createProgram( fragmentProgram );\n\n\t\tconst { computeProgram } = computePipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\n\t\tconst fragmentShader = this.get( fragmentProgram ).shaderGPU;\n\t\tconst vertexShader = this.get( computeProgram ).shaderGPU;\n\n\t\tconst transforms = computeProgram.transforms;\n\n\t\tconst transformVaryingNames = [];\n\t\tconst transformAttributeNodes = [];\n\n\t\tfor ( let i = 0; i < transforms.length; i ++ ) {\n\n\t\t\tconst transform = transforms[ i ];\n\n\t\t\ttransformVaryingNames.push( transform.varyingName );\n\t\t\ttransformAttributeNodes.push( transform.attributeNode );\n\n\t\t}\n\n\t\tgl.attachShader( programGPU, fragmentShader );\n\t\tgl.attachShader( programGPU, vertexShader );\n\n\t\tgl.transformFeedbackVaryings(\n\t\t\tprogramGPU,\n\t\t\ttransformVaryingNames,\n\t\t\tgl.SEPARATE_ATTRIBS\n\t\t);\n\n\t\tgl.linkProgram( programGPU );\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tthis._logProgramError( programGPU, fragmentShader, vertexShader );\n\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tthis.createBindings( null, bindings );\n\n\t\tthis._setupBindings( bindings, programGPU );\n\n\t\tconst attributeNodes = computeProgram.attributes;\n\t\tconst attributes = [];\n\t\tconst transformBuffers = [];\n\n\t\tfor ( let i = 0; i < attributeNodes.length; i ++ ) {\n\n\t\t\tconst attribute = attributeNodes[ i ].node.attribute;\n\n\t\t\tattributes.push( attribute );\n\n\t\t\tif ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < transformAttributeNodes.length; i ++ ) {\n\n\t\t\tconst attribute = transformAttributeNodes[ i ].attribute;\n\n\t\t\tif ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\ttransformBuffers.push( attributeData );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.set( computePipeline, {\n\t\t\tprogramGPU,\n\t\t\ttransformBuffers,\n\t\t\tattributes\n\t\t} );\n\n\t}\n\n\tcreateBindings( bindGroup, bindings ) {\n\n\t\tthis.updateBindings( bindGroup, bindings );\n\n\t}\n\n\tupdateBindings( bindGroup, bindings ) {\n\n\t\tif ( ! bindGroup ) return;\n\n\t\tconst { gl } = this;\n\n\t\tconst bindingsData = this.get( bindings );\n\t\tconst bindGroupData = this.get( bindGroup );\n\n\t\tif ( bindingsData.textureIndex === undefined ) bindingsData.textureIndex = 0;\n\n\t\tif ( bindGroupData.textureIndex === undefined ) {\n\n\t\t\tbindGroupData.textureIndex = bindingsData.textureIndex;\n\n\t\t} else {\n\n\t\t\t// reset textureIndex to match previous mappimgs when rebuilt\n\t\t\tbindingsData.textureIndex = bindGroupData.textureIndex;\n\n\t\t}\n\n\t\tlet i = 0;\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\tconst data = binding.buffer;\n\t\t\t\tconst bufferGPU = gl.createBuffer();\n\n\t\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: bindGroup.index * 2 + i ++,\n\t\t\t\t\tbufferGPU\n\t\t\t\t} );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst { textureGPU, glTextureType } = this.get( binding.texture );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: bindingsData.textureIndex ++,\n\t\t\t\t\ttextureGPU,\n\t\t\t\t\tglTextureType\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst bufferGPU = bindingData.bufferGPU;\n\t\t\tconst data = binding.buffer;\n\n\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t}\n\n\t}\n\n\t// attributes\n\n\tcreateIndexAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t}\n\n\tcreateAttribute( attribute ) {\n\n\t\tif ( this.has( attribute ) ) return;\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\tcreateStorageAttribute( attribute ) {\n\n\t\tif ( this.has( attribute ) ) return;\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tthis.attributeUtils.destroyAttribute( attribute );\n\n\t}\n\n\tupdateSize() {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\thasFeature( name ) {\n\n\t\tconst keysMatching = Object.keys( GLFeatureName ).filter( key => GLFeatureName[ key ] === name );\n\n\t\tconst extensions = this.extensions;\n\n\t\tfor ( let i = 0; i < keysMatching.length; i ++ ) {\n\n\t\t\tif ( extensions.has( keysMatching[ i ] ) ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t}\n\n\tcopyTextureToTexture( position, srcTexture, dstTexture, level ) {\n\n\t\tthis.textureUtils.copyTextureToTexture( position, srcTexture, dstTexture, level );\n\n\t}\n\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tthis.textureUtils.copyFramebufferToTexture( texture, renderContext, rectangle );\n\n\t}\n\n\t_setFramebuffer( descriptor ) {\n\n\t\tconst { gl, state } = this;\n\n\t\tlet currentFrameBuffer = null;\n\n\t\tif ( descriptor.textures !== null ) {\n\n\t\t\tconst renderTarget = descriptor.renderTarget;\n\t\t\tconst renderTargetContextData = this.get( renderTarget );\n\t\t\tconst { samples, depthBuffer, stencilBuffer } = renderTarget;\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tlet msaaFb = renderTargetContextData.msaaFrameBuffer;\n\t\t\tlet depthRenderbuffer = renderTargetContextData.depthRenderbuffer;\n\n\t\t\tconst cacheKey = getCacheKey( descriptor );\n\n\t\t\tlet fb;\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetContextData.cubeFramebuffers || ( renderTargetContextData.cubeFramebuffers = {} );\n\n\t\t\t\tfb = renderTargetContextData.cubeFramebuffers[ cacheKey ];\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetContextData.framebuffers || ( renderTargetContextData.framebuffers = {} );\n\n\t\t\t\tfb = renderTargetContextData.framebuffers[ cacheKey ];\n\n\t\t\t}\n\n\t\t\tif ( fb === undefined ) {\n\n\t\t\t\tfb = gl.createFramebuffer();\n\n\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\tconst textures = descriptor.textures;\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetContextData.cubeFramebuffers[ cacheKey ] = fb;\n\n\t\t\t\t\tconst { textureGPU } = this.get( textures[ 0 ] );\n\n\t\t\t\t\tconst cubeFace = this.renderer._activeCubeFace;\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetContextData.framebuffers[ cacheKey ] = fb;\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\t\tconst textureData = this.get( texture );\n\t\t\t\t\t\ttextureData.renderTarget = descriptor.renderTarget;\n\n\t\t\t\t\t\tconst attachment = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.drawBuffers( descriptor, fb );\n\n\t\t\t\t}\n\n\t\t\t\tif ( descriptor.depthTexture !== null ) {\n\n\t\t\t\t\tconst textureData = this.get( descriptor.depthTexture );\n\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tif ( msaaFb === undefined ) {\n\n\t\t\t\t\tconst invalidationArray = [];\n\n\t\t\t\t\tmsaaFb = gl.createFramebuffer();\n\n\t\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, msaaFb );\n\n\t\t\t\t\tconst msaaRenderbuffers = [];\n\n\t\t\t\t\tconst textures = descriptor.textures;\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tmsaaRenderbuffers[ i ] = gl.createRenderbuffer();\n\n\t\t\t\t\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, msaaRenderbuffers[ i ] );\n\n\t\t\t\t\t\tinvalidationArray.push( gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\t\t\tif ( depthBuffer ) {\n\n\t\t\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst texture = descriptor.textures[ i ];\n\t\t\t\t\t\tconst textureData = this.get( texture );\n\n\t\t\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height );\n\t\t\t\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, msaaRenderbuffers[ i ] );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetContextData.msaaFrameBuffer = msaaFb;\n\t\t\t\t\trenderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;\n\n\t\t\t\t\tif ( depthRenderbuffer === undefined ) {\n\n\t\t\t\t\t\tdepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\tthis.textureUtils.setupRenderBufferStorage( depthRenderbuffer, descriptor );\n\n\t\t\t\t\t\trenderTargetContextData.depthRenderbuffer = depthRenderbuffer;\n\n\t\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetContextData.invalidationArray = invalidationArray;\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t} else {\n\n\t\t\t\tcurrentFrameBuffer = fb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, currentFrameBuffer );\n\n\t}\n\n\n\t_getVaoKey( index, attributes ) {\n\n\t\tlet key = [];\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\tkey += ':' + indexData.id;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attributeData = this.get( attributes[ i ] );\n\n\t\t\tkey += ':' + attributeData.id;\n\n\t\t}\n\n\t\treturn key;\n\n\t}\n\n\t_createVao( index, attributes ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst vaoGPU = gl.createVertexArray();\n\t\tlet key = '';\n\n\t\tlet staticVao = true;\n\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU );\n\n\t\t\tkey += ':' + indexData.id;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\tkey += ':' + attributeData.id;\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, attributeData.bufferGPU );\n\t\t\tgl.enableVertexAttribArray( i );\n\n\t\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) staticVao = false;\n\n\t\t\tlet stride, offset;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\tstride = attribute.data.stride * attributeData.bytesPerElement;\n\t\t\t\toffset = attribute.offset * attributeData.bytesPerElement;\n\n\t\t\t} else {\n\n\t\t\t\tstride = 0;\n\t\t\t\toffset = 0;\n\n\t\t\t}\n\n\t\t\tif ( attributeData.isInteger ) {\n\n\t\t\t\tgl.vertexAttribIPointer( i, attribute.itemSize, attributeData.type, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( i, attribute.itemSize, attributeData.type, attribute.normalized, stride, offset );\n\n\t\t\t}\n\n\t\t\tif ( attribute.isInstancedBufferAttribute && ! attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.meshPerAttribute );\n\n\t\t\t} else if ( attribute.isInterleavedBufferAttribute && attribute.data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.data.meshPerAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n\t\tthis.vaoCache[ key ] = vaoGPU;\n\n\t\treturn { vaoGPU, staticVao };\n\n\t}\n\n\t_getTransformFeedback( transformBuffers ) {\n\n\t\tlet key = '';\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tkey += ':' + transformBuffers[ i ].id;\n\n\t\t}\n\n\t\tlet transformFeedbackGPU = this.transformFeedbackCache[ key ];\n\n\t\tif ( transformFeedbackGPU !== undefined ) {\n\n\t\t\treturn transformFeedbackGPU;\n\n\t\t}\n\n\t\tconst { gl } = this;\n\n\t\ttransformFeedbackGPU = gl.createTransformFeedback();\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tconst attributeData = transformBuffers[ i ];\n\n\t\t\tgl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, i, attributeData.transformBuffer );\n\n\t\t}\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n\n\t\tthis.transformFeedbackCache[ key ] = transformFeedbackGPU;\n\n\t\treturn transformFeedbackGPU;\n\n\t}\n\n\n\t_setupBindings( bindings, programGPU ) {\n\n\t\tconst gl = this.gl;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\t\tconst bindingData = this.get( binding );\n\t\t\t\tconst index = bindingData.index;\n\n\t\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\t\tconst location = gl.getUniformBlockIndex( programGPU, binding.name );\n\t\t\t\t\tgl.uniformBlockBinding( programGPU, location, index );\n\n\t\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\t\tconst location = gl.getUniformLocation( programGPU, binding.name );\n\t\t\t\t\tgl.uniform1i( location, index );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_bindUniforms( bindings ) {\n\n\t\tconst { gl, state } = this;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\t\tconst bindingData = this.get( binding );\n\t\t\t\tconst index = bindingData.index;\n\n\t\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\t\t// TODO USE bindBufferRange to group multiple uniform buffers\n\t\t\t\t\tstate.bindBufferBase( gl.UNIFORM_BUFFER, index, bindingData.bufferGPU );\n\n\t\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\t\tstate.bindTexture( bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGLBackend;\n", "import Binding from './Binding.js';\n\nclass Sampler extends Binding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.texture = texture;\n\t\tthis.version = texture ? texture.version : 0;\n\n\t\tthis.isSampler = true;\n\n\t}\n\n}\n\nexport default Sampler;\n", "import Sampler from '../Sampler.js';\n\nclass NodeSampler extends Sampler {\n\n\tconstructor( name, textureNode, groupNode ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.groupNode = groupNode;\n\n\t}\n\n\tupdate() {\n\n\t\tthis.texture = this.textureNode.value;\n\n\t}\n\n}\n\nexport default NodeSampler;\n", "import Buffer from './Buffer.js';\n\nclass StorageBuffer extends Buffer {\n\n\tconstructor( name, attribute ) {\n\n\t\tsuper( name, attribute ? attribute.array : null );\n\n\t\tthis.attribute = attribute;\n\n\t\tthis.isStorageBuffer = true;\n\n\t}\n\n}\n\nexport default StorageBuffer;\n", "import StorageBuffer from '../StorageBuffer.js';\nimport { GPUBufferBindingType } from '../../webgpu/utils/WebGPUConstants.js';\n\nlet _id = 0;\n\nclass NodeStorageBuffer extends StorageBuffer {\n\n\tconstructor( nodeUniform, groupNode ) {\n\n\t\tsuper( 'StorageBuffer_' + _id ++, nodeUniform ? nodeUniform.value : null );\n\n\t\tthis.nodeUniform = nodeUniform;\n\t\tthis.access = nodeUniform ? nodeUniform.access : GPUBufferBindingType.Storage;\n\t\tthis.groupNode = groupNode;\n\n\n\t}\n\n\tget buffer() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nexport default NodeStorageBuffer;\n", "import DataMap from '../../common/DataMap.js';\nimport { GPUTextureViewDimension, GPUIndexFormat, GPUFilterMode, GPUPrimitiveTopology, GPULoadOp, GPUStoreOp } from './WebGPUConstants.js';\n\nclass WebGPUTexturePassUtils extends DataMap {\n\n\tconstructor( device ) {\n\n\t\tsuper();\n\n\t\tthis.device = device;\n\n\t\tconst mipmapVertexSource = `\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n`;\n\n\t\tconst mipmapFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n`;\n\n\t\tconst flipYFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n`;\n\t\tthis.mipmapSampler = device.createSampler( { minFilter: GPUFilterMode.Linear } );\n\t\tthis.flipYSampler = device.createSampler( { minFilter: GPUFilterMode.Nearest } ); //@TODO?: Consider using textureLoad()\n\n\t\t// We'll need a new pipeline for every texture format used.\n\t\tthis.transferPipelines = {};\n\t\tthis.flipYPipelines = {};\n\n\t\tthis.mipmapVertexShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapVertex',\n\t\t\tcode: mipmapVertexSource\n\t\t} );\n\n\t\tthis.mipmapFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapFragment',\n\t\t\tcode: mipmapFragmentSource\n\t\t} );\n\n\t\tthis.flipYFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'flipYFragment',\n\t\t\tcode: flipYFragmentSource\n\t\t} );\n\n\t}\n\n\tgetTransferPipeline( format ) {\n\n\t\tlet pipeline = this.transferPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tlabel: `mipmap-${ format }`,\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.mipmapFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.transferPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tgetFlipYPipeline( format ) {\n\n\t\tlet pipeline = this.flipYPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tlabel: `flipY-${ format }`,\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.flipYFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.flipYPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tflipY( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst format = textureGPUDescriptor.format;\n\t\tconst { width, height } = textureGPUDescriptor.size;\n\n\t\tconst transferPipeline = this.getTransferPipeline( format );\n\t\tconst flipYPipeline = this.getFlipYPipeline( format );\n\n\t\tconst tempTexture = this.device.createTexture( {\n\t\t\tsize: { width, height, depthOrArrayLayers: 1 },\n\t\t\tformat,\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n\t\t} );\n\n\t\tconst srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tconst dstView = tempTexture.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer: 0\n\t\t} );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\n\t\tconst pass = ( pipeline, sourceView, destinationView ) => {\n\n\t\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.flipYSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: sourceView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: destinationView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\t\t\tpassEncoder.end();\n\n\t\t};\n\n\t\tpass( transferPipeline, srcView, dstView );\n\t\tpass( flipYPipeline, dstView, srcView );\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t\ttempTexture.destroy();\n\n\t}\n\n\tgenerateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst textureData = this.get( textureGPU );\n\n\t\tif ( textureData.useCount === undefined ) {\n\n\t\t\ttextureData.useCount = 0;\n\t\t\ttextureData.layers = [];\n\n\t\t}\n\n\t\tconst passes = textureData.layers[ baseArrayLayer ] || this._mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\n\t\tthis._mipmapRunBundles( commandEncoder, passes );\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t\tif ( textureData.useCount !== 0 ) textureData.layers[ baseArrayLayer ] = passes;\n\n\t\ttextureData.useCount ++;\n\n\t}\n\n\t_mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer ) {\n\n\t\tconst pipeline = this.getTransferPipeline( textureGPUDescriptor.format );\n\n\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\tlet srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tconst passes = [];\n\n\t\tfor ( let i = 1; i < textureGPUDescriptor.mipLevelCount; i ++ ) {\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.mipmapSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: srcView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst dstView = textureGPU.createView( {\n\t\t\t\tbaseMipLevel: i,\n\t\t\t\tmipLevelCount: 1,\n\t\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\t\tbaseArrayLayer\n\t\t\t} );\n\n\t\t\tconst passDescriptor = {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: dstView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t};\n\n\t\t\tconst passEncoder = this.device.createRenderBundleEncoder( {\n\t\t\t\tcolorFormats: [ textureGPUDescriptor.format ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\n\t\t\tpasses.push( {\n\t\t\t\trenderBundles: [ passEncoder.finish() ],\n\t\t\t\tpassDescriptor\n\t\t\t} );\n\n\t\t\tsrcView = dstView;\n\n\t\t}\n\n\t\treturn passes;\n\n\t}\n\n\t_mipmapRunBundles( commandEncoder, passes ) {\n\n\t\tconst levels = passes.length;\n\n\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\tconst pass = passes[ i ];\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( pass.passDescriptor );\n\n\t\t\tpassEncoder.executeBundles( pass.renderBundles );\n\n\t\t\tpassEncoder.end();\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGPUTexturePassUtils;\n", "import {\n\tGPUTextureFormat, GPUAddressMode, GPUFilterMode, GPUTextureDimension, GPUFeatureName\n} from './WebGPUConstants.js';\n\nimport WebGPUTexturePassUtils from './WebGPUTexturePassUtils.js';\n\nimport {\n\tByteType, ShortType,\n\tNearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter,\n\tRepeatWrapping, MirroredRepeatWrapping,\n\tRGB_ETC2_Format, RGBA_ETC2_EAC_Format,\n\tRGBAFormat, RGBFormat, RedFormat, RGFormat, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, UnsignedByteType, FloatType, HalfFloatType, SRGBColorSpace, DepthFormat, DepthStencilFormat,\n\tRGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format,\n\tRGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, UnsignedIntType, UnsignedShortType, UnsignedInt248Type, UnsignedInt5999Type,\n\tNeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare, IntType, RedIntegerFormat, RGIntegerFormat, RGBAIntegerFormat,\n\tCubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping\n} from '../../../constants.js';\nimport { CubeTexture } from '../../../textures/CubeTexture.js';\nimport { DepthTexture } from '../../../textures/DepthTexture.js';\nimport { Texture } from '../../../textures/Texture.js';\n\nconst _compareToWebGPU = {\n\t[ NeverCompare ]: 'never',\n\t[ LessCompare ]: 'less',\n\t[ EqualCompare ]: 'equal',\n\t[ LessEqualCompare ]: 'less-equal',\n\t[ GreaterCompare ]: 'greater',\n\t[ GreaterEqualCompare ]: 'greater-equal',\n\t[ AlwaysCompare ]: 'always',\n\t[ NotEqualCompare ]: 'not-equal'\n};\n\nconst _flipMap = [ 0, 1, 3, 2, 4, 5 ];\n\nclass WebGPUTextureUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis._passUtils = null;\n\n\t\tthis.defaultTexture = {};\n\t\tthis.defaultCubeTexture = {};\n\t\tthis.defaultVideoFrame = null;\n\n\t\tthis.colorBuffer = null;\n\n\t\tthis.depthTexture = new DepthTexture();\n\t\tthis.depthTexture.name = 'depthBuffer';\n\n\t}\n\n\tcreateSampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst textureGPU = backend.get( texture );\n\n\t\tconst samplerDescriptorGPU = {\n\t\t\taddressModeU: this._convertAddressMode( texture.wrapS ),\n\t\t\taddressModeV: this._convertAddressMode( texture.wrapT ),\n\t\t\taddressModeW: this._convertAddressMode( texture.wrapR ),\n\t\t\tmagFilter: this._convertFilterMode( texture.magFilter ),\n\t\t\tminFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmipmapFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmaxAnisotropy: texture.anisotropy\n\t\t};\n\n\t\tif ( texture.isDepthTexture && texture.compareFunction !== null ) {\n\n\t\t\tsamplerDescriptorGPU.compare = _compareToWebGPU[ texture.compareFunction ];\n\n\t\t}\n\n\t\ttextureGPU.sampler = device.createSampler( samplerDescriptorGPU );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tlet textureGPU;\n\n\t\tconst format = getFormat( texture );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\ttextureGPU = this._getDefaultCubeTextureGPU( format );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\tthis.backend.get( texture ).externalTexture = this._getDefaultVideoFrame();\n\n\t\t} else {\n\n\t\t\ttextureGPU = this._getDefaultTextureGPU( format );\n\n\t\t}\n\n\t\tthis.backend.get( texture ).texture = textureGPU;\n\n\t}\n\n\tcreateTexture( texture, options = {} ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tif ( textureData.initialized ) {\n\n\t\t\tthrow new Error( 'WebGPUTextureUtils: Texture already initialized.' );\n\n\t\t}\n\n\t\tif ( options.needsMipmaps === undefined ) options.needsMipmaps = false;\n\t\tif ( options.levels === undefined ) options.levels = 1;\n\t\tif ( options.depth === undefined ) options.depth = 1;\n\n\t\tconst { width, height, depth, levels } = options;\n\n\t\tconst dimension = this._getDimension( texture );\n\t\tconst format = texture.internalFormat || options.format || getFormat( texture, backend.device );\n\n\t\ttextureData.format = format;\n\n\t\tlet sampleCount = options.sampleCount !== undefined ? options.sampleCount : 1;\n\n\t\tsampleCount = backend.utils.getSampleCount( sampleCount );\n\n\t\tconst primarySampleCount = texture.isRenderTargetTexture && ! texture.isMultisampleRenderTargetTexture ? 1 : sampleCount;\n\n\t\tlet usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;\n\n\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\tusage |= GPUTextureUsage.STORAGE_BINDING;\n\n\t\t}\n\n\t\tif ( texture.isCompressedTexture !== true && texture.isCompressedArrayTexture !== true ) {\n\n\t\t\tusage |= GPUTextureUsage.RENDER_ATTACHMENT;\n\n\t\t}\n\n\t\tconst textureDescriptorGPU = {\n\t\t\tlabel: texture.name,\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: depth,\n\t\t\t},\n\t\t\tmipLevelCount: levels,\n\t\t\tsampleCount: primarySampleCount,\n\t\t\tdimension: dimension,\n\t\t\tformat: format,\n\t\t\tusage: usage\n\t\t};\n\n\t\t// texture creation\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\t\t\tconst videoFrame = new VideoFrame( video );\n\n\t\t\ttextureDescriptorGPU.size.width = videoFrame.displayWidth;\n\t\t\ttextureDescriptorGPU.size.height = videoFrame.displayHeight;\n\n\t\t\tvideoFrame.close();\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tif ( format === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGPURenderer: Texture format not supported.' );\n\n\t\t\t\treturn this.createDefaultTexture( texture );\n\n\t\t\t}\n\n\t\t\ttextureData.texture = backend.device.createTexture( textureDescriptorGPU );\n\n\t\t}\n\n\t\tif ( texture.isRenderTargetTexture && sampleCount > 1 && ! texture.isMultisampleRenderTargetTexture ) {\n\n\t\t\tconst msaaTextureDescriptorGPU = Object.assign( {}, textureDescriptorGPU );\n\n\t\t\tmsaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + '-msaa';\n\t\t\tmsaaTextureDescriptorGPU.sampleCount = sampleCount;\n\n\t\t\ttextureData.msaaTexture = backend.device.createTexture( msaaTextureDescriptorGPU );\n\n\t\t}\n\n\t\ttextureData.initialized = true;\n\n\t\ttextureData.textureDescriptorGPU = textureDescriptorGPU;\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\ttextureData.texture.destroy();\n\n\t\tif ( textureData.msaaTexture !== undefined ) textureData.msaaTexture.destroy();\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\tdestroySampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tdelete textureData.sampler;\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst depth = texture.image.depth || 1;\n\n\t\t\tfor ( let i = 0; i < depth; i ++ ) {\n\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetColorBuffer() {\n\n\t\tif ( this.colorBuffer ) this.colorBuffer.destroy();\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tthis.colorBuffer = backend.device.createTexture( {\n\t\t\tlabel: 'colorBuffer',\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t},\n\t\t\tsampleCount: backend.utils.getSampleCount( backend.renderer.samples ),\n\t\t\tformat: backend.utils.getPreferredCanvasFormat(),\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n\t\t} );\n\n\t\treturn this.colorBuffer;\n\n\t}\n\n\tgetDepthBuffer( depth = true, stencil = false ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tconst depthTexture = this.depthTexture;\n\t\tconst depthTextureGPU = backend.get( depthTexture ).texture;\n\n\t\tlet format, type;\n\n\t\tif ( stencil ) {\n\n\t\t\tformat = DepthStencilFormat;\n\t\t\ttype = UnsignedInt248Type;\n\n\t\t} else if ( depth ) {\n\n\t\t\tformat = DepthFormat;\n\t\t\ttype = UnsignedIntType;\n\n\t\t}\n\n\t\tif ( depthTextureGPU !== undefined ) {\n\n\t\t\tif ( depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type ) {\n\n\t\t\t\treturn depthTextureGPU;\n\n\t\t\t}\n\n\t\t\tthis.destroyTexture( depthTexture );\n\n\t\t}\n\n\t\tdepthTexture.name = 'depthBuffer';\n\t\tdepthTexture.format = format;\n\t\tdepthTexture.type = type;\n\t\tdepthTexture.image.width = width;\n\t\tdepthTexture.image.height = height;\n\n\t\tthis.createTexture( depthTexture, { sampleCount: backend.utils.getSampleCount( backend.renderer.samples ), width, height } );\n\n\t\treturn backend.get( depthTexture ).texture;\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tconst { textureDescriptorGPU } = textureData;\n\n\t\tif ( texture.isRenderTargetTexture || ( textureDescriptorGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\t// transfer texture data\n\n\t\tif ( texture.isDataTexture ) {\n\n\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );\n\n\t\t} else if ( texture.isDataArrayTexture || texture.isData3DTexture ) {\n\n\t\t\tfor ( let i = 0; i < options.image.depth; i ++ ) {\n\n\t\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, i, texture.flipY, i );\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\tthis._copyCompressedBufferToTexture( texture.mipmaps, textureData.texture, textureDescriptorGPU );\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tthis._copyCubeMapToTexture( options.images, textureData.texture, textureDescriptorGPU, texture.flipY );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tthis._copyImageToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tconst textureData = this.backend.get( texture );\n\t\tconst textureGPU = textureData.texture;\n\t\tconst format = textureData.textureDescriptorGPU.format;\n\t\tconst bytesPerTexel = this._getBytesPerTexel( format );\n\n\t\tlet bytesPerRow = width * bytesPerTexel;\n\t\tbytesPerRow = Math.ceil( bytesPerRow / 256 ) * 256; // Align to 256 bytes\n\n\t\tconst readBuffer = device.createBuffer(\n\t\t\t{\n\t\t\t\tsize: width * height * bytesPerTexel,\n\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t}\n\t\t);\n\n\t\tconst encoder = device.createCommandEncoder();\n\n\t\tencoder.copyTextureToBuffer(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\torigin: { x, y, z: faceIndex },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbuffer: readBuffer,\n\t\t\t\tbytesPerRow: bytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t}\n\n\t\t);\n\n\t\tconst typedArrayType = this._getTypedArrayType( format );\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t\tawait readBuffer.mapAsync( GPUMapMode.READ );\n\n\t\tconst buffer = readBuffer.getMappedRange();\n\n\t\treturn new typedArrayType( buffer );\n\n\t}\n\n\t_isEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t_getDefaultTextureGPU( format ) {\n\n\t\tlet defaultTexture = this.defaultTexture[ format ];\n\n\t\tif ( defaultTexture === undefined ) {\n\n\t\t\tconst texture = new Texture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1, format } );\n\n\t\t\tthis.defaultTexture[ format ] = defaultTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultTexture ).texture;\n\n\t}\n\n\t_getDefaultCubeTextureGPU( format ) {\n\n\t\tlet defaultCubeTexture = this.defaultTexture[ format ];\n\n\t\tif ( defaultCubeTexture === undefined ) {\n\n\t\t\tconst texture = new CubeTexture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1, depth: 6 } );\n\n\t\t\tthis.defaultCubeTexture[ format ] = defaultCubeTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultCubeTexture ).texture;\n\n\t}\n\n\t_getDefaultVideoFrame() {\n\n\t\tlet defaultVideoFrame = this.defaultVideoFrame;\n\n\t\tif ( defaultVideoFrame === null ) {\n\n\t\t\tconst init = {\n\t\t\t\ttimestamp: 0,\n\t\t\t\tcodedWidth: 1,\n\t\t\t\tcodedHeight: 1,\n\t\t\t\tformat: 'RGBA',\n\t\t\t};\n\n\t\t\tthis.defaultVideoFrame = defaultVideoFrame = new VideoFrame( new Uint8Array( [ 0, 0, 0, 0xff ] ), init );\n\n\t\t}\n\n\t\treturn defaultVideoFrame;\n\n\t}\n\n\t_copyCubeMapToTexture( images, textureGPU, textureDescriptorGPU, flipY ) {\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst image = images[ i ];\n\n\t\t\tconst flipIndex = flipY === true ? _flipMap[ i ] : i;\n\n\t\t\tif ( image.isDataTexture ) {\n\n\t\t\t\tthis._copyBufferToTexture( image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t} else {\n\n\t\t\t\tthis._copyImageToTexture( image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_copyImageToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tdevice.queue.copyExternalImageToTexture(\n\t\t\t{\n\t\t\t\tsource: image\n\t\t\t}, {\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t}, {\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t}\n\t\t);\n\n\t\tif ( flipY === true ) {\n\n\t\t\tthis._flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t\t}\n\n\t}\n\n\t_getPassUtils() {\n\n\t\tlet passUtils = this._passUtils;\n\n\t\tif ( passUtils === null ) {\n\n\t\t\tthis._passUtils = passUtils = new WebGPUTexturePassUtils( this.backend.device );\n\n\t\t}\n\n\t\treturn passUtils;\n\n\t}\n\n\t_generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer = 0 ) {\n\n\t\tthis._getPassUtils().generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer );\n\n\t}\n\n\t_flipY( textureGPU, textureDescriptorGPU, originDepth = 0 ) {\n\n\t\tthis._getPassUtils().flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t}\n\n\t_copyBufferToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth = 0 ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\t\t// @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n\t\tconst device = this.backend.device;\n\n\t\tconst data = image.data;\n\n\t\tconst bytesPerTexel = this._getBytesPerTexel( textureDescriptorGPU.format );\n\t\tconst bytesPerRow = image.width * bytesPerTexel;\n\n\t\tdevice.queue.writeTexture(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t},\n\t\t\tdata,\n\t\t\t{\n\t\t\t\toffset: image.width * image.height * bytesPerTexel * depth,\n\t\t\t\tbytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t} );\n\n\t\tif ( flipY === true ) {\n\n\t\t\tthis._flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t\t}\n\n\t}\n\n\t_copyCompressedBufferToTexture( mipmaps, textureGPU, textureDescriptorGPU ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n\t\tconst device = this.backend.device;\n\n\t\tconst blockData = this._getBlockData( textureDescriptorGPU.format );\n\t\tconst isTextureArray = textureDescriptorGPU.size.depthOrArrayLayers > 1;\n\n\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\tconst width = mipmap.width;\n\t\t\tconst height = mipmap.height;\n\t\t\tconst depth = isTextureArray ? textureDescriptorGPU.size.depthOrArrayLayers : 1;\n\n\t\t\tconst bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;\n\t\t\tconst bytesPerImage = bytesPerRow * Math.ceil( height / blockData.height );\n\n\t\t\tfor ( let j = 0; j < depth; j ++ ) {\n\n\t\t\t\tdevice.queue.writeTexture(\n\t\t\t\t\t{\n\t\t\t\t\t\ttexture: textureGPU,\n\t\t\t\t\t\tmipLevel: i,\n\t\t\t\t\t\torigin: { x: 0, y: 0, z: j }\n\t\t\t\t\t},\n\t\t\t\t\tmipmap.data,\n\t\t\t\t\t{\n\t\t\t\t\t\toffset: j * bytesPerImage,\n\t\t\t\t\t\tbytesPerRow,\n\t\t\t\t\t\trowsPerImage: Math.ceil( height / blockData.height )\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: Math.ceil( width / blockData.width ) * blockData.width,\n\t\t\t\t\t\theight: Math.ceil( height / blockData.height ) * blockData.height,\n\t\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_getBlockData( format ) {\n\n\t\t// this method is only relevant for compressed texture formats\n\n\t\tif ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1\n\t\tif ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3\n\t\tif ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5\n\t\tif ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1\n\t\tif ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2\n\t\tif ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)\n\t\tif ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)\n\n\t\tif ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };\n\n\t\tif ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };\n\n\t}\n\n\t_convertAddressMode( value ) {\n\n\t\tlet addressMode = GPUAddressMode.ClampToEdge;\n\n\t\tif ( value === RepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.Repeat;\n\n\t\t} else if ( value === MirroredRepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.MirrorRepeat;\n\n\t\t}\n\n\t\treturn addressMode;\n\n\t}\n\n\t_convertFilterMode( value ) {\n\n\t\tlet filterMode = GPUFilterMode.Linear;\n\n\t\tif ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {\n\n\t\t\tfilterMode = GPUFilterMode.Nearest;\n\n\t\t}\n\n\t\treturn filterMode;\n\n\t}\n\n\t_getBytesPerTexel( format ) {\n\n\t\t// 8-bit formats\n\t\tif ( format === GPUTextureFormat.R8Unorm ||\n\t\t\tformat === GPUTextureFormat.R8Snorm ||\n\t\t\tformat === GPUTextureFormat.R8Uint ||\n\t\t\tformat === GPUTextureFormat.R8Sint ) return 1;\n\n\t\t// 16-bit formats\n\t\tif ( format === GPUTextureFormat.R16Uint ||\n\t\t\tformat === GPUTextureFormat.R16Sint ||\n\t\t\tformat === GPUTextureFormat.R16Float ||\n\t\t\tformat === GPUTextureFormat.RG8Unorm ||\n\t\t\tformat === GPUTextureFormat.RG8Snorm ||\n\t\t\tformat === GPUTextureFormat.RG8Uint ||\n\t\t\tformat === GPUTextureFormat.RG8Sint ) return 2;\n\n\t\t// 32-bit formats\n\t\tif ( format === GPUTextureFormat.R32Uint ||\n\t\t\tformat === GPUTextureFormat.R32Sint ||\n\t\t\tformat === GPUTextureFormat.R32Float ||\n\t\t\tformat === GPUTextureFormat.RG16Uint ||\n\t\t\tformat === GPUTextureFormat.RG16Sint ||\n\t\t\tformat === GPUTextureFormat.RG16Float ||\n\t\t\tformat === GPUTextureFormat.RGBA8Unorm ||\n\t\t\tformat === GPUTextureFormat.RGBA8UnormSRGB ||\n\t\t\tformat === GPUTextureFormat.RGBA8Snorm ||\n\t\t\tformat === GPUTextureFormat.RGBA8Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA8Sint ||\n\t\t\tformat === GPUTextureFormat.BGRA8Unorm ||\n\t\t\tformat === GPUTextureFormat.BGRA8UnormSRGB ||\n\t\t\t// Packed 32-bit formats\n\t\t\tformat === GPUTextureFormat.RGB9E5UFloat ||\n\t\t\tformat === GPUTextureFormat.RGB10A2Unorm ||\n\t\t\tformat === GPUTextureFormat.RG11B10UFloat ||\n\t\t\tformat === GPUTextureFormat.Depth32Float ||\n\t\t\tformat === GPUTextureFormat.Depth24Plus ||\n\t\t\tformat === GPUTextureFormat.Depth24PlusStencil8 ||\n\t\t\tformat === GPUTextureFormat.Depth32FloatStencil8 ) return 4;\n\n\t\t// 64-bit formats\n\t\tif ( format === GPUTextureFormat.RG32Uint ||\n\t\t\tformat === GPUTextureFormat.RG32Sint ||\n\t\t\tformat === GPUTextureFormat.RG32Float ||\n\t\t\tformat === GPUTextureFormat.RGBA16Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA16Sint ||\n\t\t\tformat === GPUTextureFormat.RGBA16Float ) return 8;\n\n\t\t// 128-bit formats\n\t\tif ( format === GPUTextureFormat.RGBA32Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA32Sint ||\n\t\t\tformat === GPUTextureFormat.RGBA32Float ) return 16;\n\n\n\t}\n\n\t_getTypedArrayType( format ) {\n\n\t\tif ( format === GPUTextureFormat.R8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Snorm ) return Int8Array;\n\n\n\t\tif ( format === GPUTextureFormat.R16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.R16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RG16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RG16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.R16Float ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RG16Float ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Float ) return Uint16Array;\n\n\n\t\tif ( format === GPUTextureFormat.R32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.R32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.R32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RG32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RG32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RG32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return Float32Array;\n\n\t\tif ( format === GPUTextureFormat.BGRA8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.BGRA8UnormSRGB ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGB10A2Unorm ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RGB9E5UFloat ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RG11B10UFloat ) return Uint32Array;\n\n\t\tif ( format === GPUTextureFormat.Depth32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.Depth24Plus ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.Depth24PlusStencil8 ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.Depth32FloatStencil8 ) return Float32Array;\n\n\t}\n\n\t_getDimension( texture ) {\n\n\t\tlet dimension;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tdimension = GPUTextureDimension.ThreeD;\n\n\t\t} else {\n\n\t\t\tdimension = GPUTextureDimension.TwoD;\n\n\t\t}\n\n\t\treturn dimension;\n\n\t}\n\n}\n\nexport function getFormat( texture, device = null ) {\n\n\tconst format = texture.format;\n\tconst type = texture.type;\n\tconst colorSpace = texture.colorSpace;\n\n\tlet formatGPU;\n\n\tif ( texture.isFramebufferTexture === true && texture.type === UnsignedByteType ) {\n\n\t\tformatGPU = GPUTextureFormat.BGRA8Unorm;\n\n\t} else if ( texture.isCompressedTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT3_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGB_ETC2_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t} else {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBAFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Uint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGBFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedInt5999Type:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGB9E5UFloat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RedFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth16Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24Plus;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthStencilFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedInt248Type:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24PlusStencil8;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tif ( device && device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {\n\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32FloatStencil8;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RedIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGBAIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t}\n\n\treturn formatGPU;\n\n}\n\nexport default WebGPUTextureUtils;\n", "import NodeFunction from '../../../nodes/core/NodeFunction.js';\nimport NodeFunctionInput from '../../../nodes/core/NodeFunctionInput.js';\n\nconst declarationRegexp = /^[fn]*\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)\\s*[\\-\\>]*\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/i;\nconst propertiesRegexp = /([a-z_0-9]+)\\s*:\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/ig;\n\nconst wgslTypeLib = {\n\t'f32': 'float',\n\t'i32': 'int',\n\t'u32': 'uint',\n\t'bool': 'bool',\n\n\t'vec2<f32>': 'vec2',\n \t'vec2<i32>': 'ivec2',\n \t'vec2<u32>': 'uvec2',\n \t'vec2<bool>': 'bvec2',\n\n\t'vec2f': 'vec2',\n\t'vec2i': 'ivec2',\n\t'vec2u': 'uvec2',\n\t'vec2b': 'bvec2',\n\n\t'vec3<f32>': 'vec3',\n\t'vec3<i32>': 'ivec3',\n\t'vec3<u32>': 'uvec3',\n\t'vec3<bool>': 'bvec3',\n\n\t'vec3f': 'vec3',\n\t'vec3i': 'ivec3',\n\t'vec3u': 'uvec3',\n\t'vec3b': 'bvec3',\n\n\t'vec4<f32>': 'vec4',\n\t'vec4<i32>': 'ivec4',\n\t'vec4<u32>': 'uvec4',\n\t'vec4<bool>': 'bvec4',\n\n\t'vec4f': 'vec4',\n\t'vec4i': 'ivec4',\n\t'vec4u': 'uvec4',\n\t'vec4b': 'bvec4',\n\n\t'mat2x2<f32>': 'mat2',\n\t'mat2x2f': 'mat2',\n\n\t'mat3x3<f32>': 'mat3',\n\t'mat3x3f': 'mat3',\n\n\t'mat4x4<f32>': 'mat4',\n\t'mat4x4f': 'mat4',\n\n\t'sampler': 'sampler',\n\n\t'texture_1d': 'texture',\n\n\t'texture_2d': 'texture',\n\t'texture_2d_array': 'texture',\n\t'texture_multisampled_2d': 'cubeTexture',\n\n\t'texture_depth_2d': 'depthTexture',\n\n\t'texture_3d': 'texture3D',\n\n\t'texture_cube': 'cubeTexture',\n\t'texture_cube_array': 'cubeTexture',\n\n\t'texture_storage_1d': 'storageTexture',\n\t'texture_storage_2d': 'storageTexture',\n\t'texture_storage_2d_array': 'storageTexture',\n\t'texture_storage_3d': 'storageTexture'\n\n};\n\nconst parse = ( source ) => {\n\n\tsource = source.trim();\n\n\tconst declaration = source.match( declarationRegexp );\n\n\tif ( declaration !== null && declaration.length === 4 ) {\n\n\t\tconst inputsCode = declaration[ 2 ];\n\t\tconst propsMatches = [];\n\t\tlet match = null;\n\n\t\twhile ( ( match = propertiesRegexp.exec( inputsCode ) ) !== null ) {\n\n\t\t\tpropsMatches.push( { name: match[ 1 ], type: match[ 2 ] } );\n\n\t\t}\n\n\t\t// Process matches to correctly pair names and types\n\t\tconst inputs = [];\n\t\tfor ( let i = 0; i < propsMatches.length; i ++ ) {\n\n\t\t\tconst { name, type } = propsMatches[ i ];\n\n\t\t\tlet resolvedType = type;\n\n\t\t\tif ( resolvedType.startsWith( 'texture' ) ) {\n\n\t\t\t\tresolvedType = type.split( '<' )[ 0 ];\n\n\t\t\t}\n\n\t\t\tresolvedType = wgslTypeLib[ resolvedType ] || resolvedType;\n\n\t\t\tinputs.push( new NodeFunctionInput( resolvedType, name ) );\n\n\t\t}\n\n\t\tconst blockCode = source.substring( declaration[ 0 ].length );\n\t\tconst outputType = declaration[ 3 ] || 'void';\n\n\t\tconst name = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\n\t\tconst type = wgslTypeLib[ outputType ] || outputType;\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tinputs,\n\t\t\tname,\n\t\t\tinputsCode,\n\t\t\tblockCode,\n\t\t\toutputType\n\t\t};\n\n\t} else {\n\n\t\tthrow new Error( 'FunctionNode: Function is not a WGSL code.' );\n\n\t}\n\n};\n\nclass WGSLNodeFunction extends NodeFunction {\n\n\tconstructor( source ) {\n\n\t\tconst { type, inputs, name, inputsCode, blockCode, outputType } = parse( source );\n\n\t\tsuper( type, inputs, name );\n\n\t\tthis.inputsCode = inputsCode;\n\t\tthis.blockCode = blockCode;\n\t\tthis.outputType = outputType;\n\n\t}\n\n\tgetCode( name = this.name ) {\n\n\t\tconst outputType = this.outputType !== 'void' ? '-> ' + this.outputType : '';\n\n\t\treturn `fn ${ name } ( ${ this.inputsCode.trim() } ) ${ outputType }` + this.blockCode;\n\n\t}\n\n}\n\nexport default WGSLNodeFunction;\n", "import NodeParser from '../../../nodes/core/NodeParser.js';\nimport WGSLNodeFunction from './WGSLNodeFunction.js';\n\nclass WGSLNodeParser extends NodeParser {\n\n\tparseFunction( source ) {\n\n\t\treturn new WGSLNodeFunction( source );\n\n\t}\n\n}\n\nexport default WGSLNodeParser;\n", "import NodeUniformsGroup from '../../common/nodes/NodeUniformsGroup.js';\n\nimport NodeSampler from '../../common/nodes/NodeSampler.js';\nimport { NodeSampledTexture, NodeSampledCubeTexture, NodeSampledTexture3D } from '../../common/nodes/NodeSampledTexture.js';\n\nimport NodeUniformBuffer from '../../common/nodes/NodeUniformBuffer.js';\nimport NodeStorageBuffer from '../../common/nodes/NodeStorageBuffer.js';\n\nimport { NodeBuilder, CodeNode } from '../../../nodes/Nodes.js';\n\nimport { getFormat } from '../utils/WebGPUTextureUtils.js';\n\nimport WGSLNodeParser from './WGSLNodeParser.js';\nimport { GPUBufferBindingType, GPUStorageTextureAccess } from '../utils/WebGPUConstants.js';\n\nimport { NoColorSpace, FloatType } from '../../../constants.js';\n\n// GPUShaderStage is not defined in browsers not supporting WebGPU\nconst GPUShaderStage = self.GPUShaderStage;\n\nconst gpuShaderStageLib = {\n\t'vertex': GPUShaderStage ? GPUShaderStage.VERTEX : 1,\n\t'fragment': GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,\n\t'compute': GPUShaderStage ? GPUShaderStage.COMPUTE : 4\n};\n\nconst supports = {\n\tinstance: true,\n\tswizzleAssign: false,\n\tstorageBuffer: true\n};\n\nconst wgslFnOpLib = {\n\t'^^': 'tsl_xor'\n};\n\nconst wgslTypeLib = {\n\tfloat: 'f32',\n\tint: 'i32',\n\tuint: 'u32',\n\tbool: 'bool',\n\tcolor: 'vec3<f32>',\n\n\tvec2: 'vec2<f32>',\n\tivec2: 'vec2<i32>',\n\tuvec2: 'vec2<u32>',\n\tbvec2: 'vec2<bool>',\n\n\tvec3: 'vec3<f32>',\n\tivec3: 'vec3<i32>',\n\tuvec3: 'vec3<u32>',\n\tbvec3: 'vec3<bool>',\n\n\tvec4: 'vec4<f32>',\n\tivec4: 'vec4<i32>',\n\tuvec4: 'vec4<u32>',\n\tbvec4: 'vec4<bool>',\n\n\tmat2: 'mat2x2<f32>',\n\timat2: 'mat2x2<i32>',\n\tumat2: 'mat2x2<u32>',\n\tbmat2: 'mat2x2<bool>',\n\n\tmat3: 'mat3x3<f32>',\n\timat3: 'mat3x3<i32>',\n\tumat3: 'mat3x3<u32>',\n\tbmat3: 'mat3x3<bool>',\n\n\tmat4: 'mat4x4<f32>',\n\timat4: 'mat4x4<i32>',\n\tumat4: 'mat4x4<u32>',\n\tbmat4: 'mat4x4<bool>'\n};\n\nconst wgslPolyfill = {\n\ttsl_xor: new CodeNode( 'fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }' ),\n\tmod_float: new CodeNode( 'fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }' ),\n\tmod_vec2: new CodeNode( 'fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }' ),\n\tmod_vec3: new CodeNode( 'fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }' ),\n\tmod_vec4: new CodeNode( 'fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }' ),\n\tequals_bool: new CodeNode( 'fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }' ),\n\tequals_bvec2: new CodeNode( 'fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }' ),\n\tequals_bvec3: new CodeNode( 'fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }' ),\n\tequals_bvec4: new CodeNode( 'fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }' ),\n\trepeatWrapping: new CodeNode( `\nfn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {\n\n\tlet uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );\n\n\treturn ( ( uvScaled % dimension ) + dimension ) % dimension;\n\n}\n` ),\n\tbiquadraticTexture: new CodeNode( `\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {\n\n\tlet iRes = vec2i( textureDimensions( map, level ) );\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n` )\n};\n\nconst wgslMethods = {\n\tdFdx: 'dpdx',\n\tdFdy: '- dpdy',\n\tmod_float: 'tsl_mod_float',\n\tmod_vec2: 'tsl_mod_vec2',\n\tmod_vec3: 'tsl_mod_vec3',\n\tmod_vec4: 'tsl_mod_vec4',\n\tequals_bool: 'tsl_equals_bool',\n\tequals_bvec2: 'tsl_equals_bvec2',\n\tequals_bvec3: 'tsl_equals_bvec3',\n\tequals_bvec4: 'tsl_equals_bvec4',\n\tinversesqrt: 'inverseSqrt',\n\tbitcast: 'bitcast<f32>'\n};\n\n// WebGPU issue: does not support pow() with negative base on Windows\n\nif ( /Windows/g.test( navigator.userAgent ) ) {\n\n\twgslPolyfill.pow_float = new CodeNode( 'fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }' );\n\twgslPolyfill.pow_vec2 = new CodeNode( 'fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }', [ wgslPolyfill.pow_float ] );\n\twgslPolyfill.pow_vec3 = new CodeNode( 'fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }', [ wgslPolyfill.pow_float ] );\n\twgslPolyfill.pow_vec4 = new CodeNode( 'fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }', [ wgslPolyfill.pow_float ] );\n\n\twgslMethods.pow_float = 'tsl_pow_float';\n\twgslMethods.pow_vec2 = 'tsl_pow_vec2';\n\twgslMethods.pow_vec3 = 'tsl_pow_vec3';\n\twgslMethods.pow_vec4 = 'tsl_pow_vec4';\n\n}\n\n//\n\nlet diagnostics = '';\n\nif ( /Firefox/g.test( navigator.userAgent ) !== true ) {\n\n\tdiagnostics += 'diagnostic( off, derivative_uniformity );\\n';\n\n}\n\n//\n\nclass WGSLNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer ) {\n\n\t\tsuper( object, renderer, new WGSLNodeParser() );\n\n\t\tthis.uniformGroups = {};\n\n\t\tthis.builtins = {};\n\n\t\tthis.directives = {};\n\n\t\tthis.scopedArrays = new Map();\n\n\t}\n\n\tneedsToWorkingColorSpace( texture ) {\n\n\t\treturn texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;\n\n\t}\n\n\t_generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\tif ( depthSnippet ) {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\t} else {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet } )`;\n\n\t\t\t}\n\n\t\t} else if ( this.isFilteredTexture( texture ) ) {\n\n\t\t\treturn this.generateFilteredTexture( texture, textureProperty, uvSnippet );\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet, '0' );\n\n\t\t}\n\n\t}\n\n\t_generateVideoSample( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBaseClampToEdge( ${ textureProperty }, ${ textureProperty }_sampler, vec2<f32>( ${ uvSnippet }.x, 1.0 - ${ uvSnippet }.y ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.VideoTexture does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t_generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false ) {\n\n\t\t\treturn `textureSampleLevel( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t\t} else if ( this.isFilteredTexture( texture ) ) {\n\n\t\t\treturn this.generateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet );\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet, levelSnippet );\n\n\t\t}\n\n\t}\n\n\tgenerateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet = '0' ) {\n\n\t\tthis._include( 'biquadraticTexture' );\n\n\t\treturn `tsl_biquadraticTexture( ${ textureProperty }, ${ uvSnippet }, i32( ${ levelSnippet } ) )`;\n\n\t}\n\n\tgenerateTextureLod( texture, textureProperty, uvSnippet, levelSnippet = '0' ) {\n\n\t\tthis._include( 'repeatWrapping' );\n\n\t\tconst dimension = texture.isMultisampleRenderTargetTexture === true ? `textureDimensions( ${ textureProperty } )` : `textureDimensions( ${ textureProperty }, 0 )`;\n\n\t\treturn `textureLoad( ${ textureProperty }, tsl_repeatWrapping( ${ uvSnippet }, ${ dimension } ), i32( ${ levelSnippet } ) )`;\n\n\t}\n\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0u' ) {\n\n\t\tif ( depthSnippet ) {\n\n\t\t\treturn `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ depthSnippet }, ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTextureStore( texture, textureProperty, uvIndexSnippet, valueSnippet ) {\n\n\t\treturn `textureStore( ${ textureProperty }, ${ uvIndexSnippet }, ${ valueSnippet } )`;\n\n\t}\n\n\tisUnfilterable( texture ) {\n\n\t\treturn this.getComponentTypeFromTexture( texture ) !== 'float' || ( ! this.isAvailable( 'float32Filterable' ) && texture.isDataTexture === true && texture.type === FloatType ) || texture.isMultisampleRenderTargetTexture === true;\n\n\t}\n\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else if ( this.isUnfilterable( texture ) ) {\n\n\t\t\tsnippet = this.generateTextureLod( texture, textureProperty, uvSnippet, '0', depthSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgenerateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\t// TODO handle i32 or u32 --> uvSnippet, array_index: A, ddx, ddy\n\t\t\treturn `textureSampleGrad( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet },  ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.TextureNode.gradient() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleCompare( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ compareSnippet } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgenerateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBias( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ biasSnippet } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.TextureNode.biasNode does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeVarying === true && node.needsInterpolation === true ) {\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\treturn `varyings.${ node.name }`;\n\n\t\t\t}\n\n\t\t} else if ( node.isNodeUniform === true ) {\n\n\t\t\tconst name = node.name;\n\t\t\tconst type = node.type;\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {\n\n\t\t\t\treturn name;\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\treturn `NodeBuffer_${ node.id }.${name}`;\n\n\t\t\t} else {\n\n\t\t\t\treturn node.groupNode.name + '.' + name;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.getPropertyName( node );\n\n\t}\n\n\tgetOutputStructName() {\n\n\t\treturn 'output';\n\n\t}\n\n\t_getUniformGroupCount( shaderStage ) {\n\n\t\treturn Object.keys( this.uniforms[ shaderStage ] ).length;\n\n\t}\n\n\tgetFunctionOperator( op ) {\n\n\t\tconst fnOp = wgslFnOpLib[ op ];\n\n\t\tif ( fnOp !== undefined ) {\n\n\t\t\tthis._include( fnOp );\n\n\t\t\treturn fnOp;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tgetStorageAccess( node ) {\n\n\t\tif ( node.isStorageTextureNode ) {\n\n\t\t\tswitch ( node.access ) {\n\n\t\t\t\tcase GPUStorageTextureAccess.ReadOnly:\n\n\t\t\t\t\treturn 'read';\n\n\t\t\t\tcase GPUStorageTextureAccess.WriteOnly:\n\n\t\t\t\t\treturn 'write';\n\n\t\t\t\tdefault:\n\n\t\t\t\t\treturn 'read_write';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tswitch ( node.access ) {\n\n\t\t\t\tcase GPUBufferBindingType.Storage:\n\n\t\t\t\t\treturn 'read_write';\n\n\n\t\t\t\tcase GPUBufferBindingType.ReadOnlyStorage:\n\n\t\t\t\t\treturn 'read';\n\n\t\t\t\tdefault:\n\n\t\t\t\t\treturn 'write';\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tif ( nodeData.uniformGPU === undefined ) {\n\n\t\t\tlet uniformGPU;\n\n\t\t\tconst group = node.groupNode;\n\t\t\tconst groupName = group.name;\n\n\t\t\tconst bindings = this.getBindGroupArray( groupName, shaderStage );\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {\n\n\t\t\t\tlet texture = null;\n\n\t\t\t\tif ( type === 'texture' || type === 'storageTexture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledTexture( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );\n\n\t\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );\n\n\t\t\t\t} else if ( type === 'texture3D' ) {\n\n\t\t\t\t\ttexture = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.store = node.isStorageTextureNode === true;\n\t\t\t\ttexture.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( node.value ) === false && texture.store === false ) {\n\n\t\t\t\t\tconst sampler = new NodeSampler( `${uniformNode.name}_sampler`, uniformNode.node, group );\n\t\t\t\t\tsampler.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tbindings.push( sampler, texture );\n\n\t\t\t\t\tuniformGPU = [ sampler, texture ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbindings.push( texture );\n\n\t\t\t\t\tuniformGPU = [ texture ];\n\n\t\t\t\t}\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferClass = type === 'storageBuffer' ? NodeStorageBuffer : NodeUniformBuffer;\n\t\t\t\tconst buffer = new bufferClass( node, group );\n\t\t\t\tbuffer.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tbindings.push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( groupName, group );\n\t\t\t\t\tuniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n\tgetBuiltin( name, property, type, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.builtins[ shaderStage ] || ( this.builtins[ shaderStage ] = new Map() );\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tproperty,\n\t\t\t\ttype\n\t\t\t} );\n\n\t\t}\n\n\t\treturn property;\n\n\t}\n\n\thasBuiltin( name, shaderStage = this.shaderStage ) {\n\n\t\treturn ( this.builtins[ shaderStage ] !== undefined && this.builtins[ shaderStage ].has( name ) );\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'vertex_index', 'vertexIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'vertexIndex';\n\n\t}\n\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( input.name + ' : ' + this.getType( input.type ) );\n\n\t\t}\n\n\t\t//\n\n\t\tlet code = `fn ${ layout.name }( ${ parameters.join( ', ' ) } ) -> ${ this.getType( layout.type ) } {\n${ flowData.vars }\n${ flowData.code }\n`;\n\n\t\tif ( flowData.result ) {\n\n\t\t\tcode += `\\treturn ${ flowData.result };\\n`;\n\n\t\t}\n\n\t\tcode += '\\n}\\n';\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'instance_index', 'instanceIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'instanceIndex';\n\n\t}\n\n\tgetInvocationLocalIndex() {\n\n\t\treturn this.getBuiltin( 'local_invocation_index', 'invocationLocalIndex', 'u32', 'attribute' );\n\n\t}\n\n\tgetSubgroupSize() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );\n\n\t}\n\n\tgetInvocationSubgroupIndex() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_invocation_id', 'invocationSubgroupIndex', 'u32', 'attribute' );\n\n\t}\n\n\tgetSubgroupIndex() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_id', 'subgroupIndex', 'u32', 'attribute' );\n\n\t}\n\n\tgetDrawIndex() {\n\n\t\treturn null;\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn this.getBuiltin( 'front_facing', 'isFront', 'bool' );\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn this.getBuiltin( 'position', 'fragCoord', 'vec4<f32>' ) + '.xy';\n\n\t}\n\n\tgetFragDepth() {\n\n\t\treturn 'output.' + this.getBuiltin( 'frag_depth', 'depth', 'f32', 'output' );\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\tenableDirective( name, shaderStage = this.shaderStage ) {\n\n\t\tconst stage = this.directives[ shaderStage ] || ( this.directives[ shaderStage ] = new Set() );\n\t\tstage.add( name );\n\n\t}\n\n\tgetDirectives( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst directives = this.directives[ shaderStage ];\n\n\t\tif ( directives !== undefined ) {\n\n\t\t\tfor ( const directive of directives ) {\n\n\t\t\t\tsnippets.push( `enable ${directive};` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\tenableSubGroups() {\n\n\t\tthis.enableDirective( 'subgroups' );\n\n\t}\n\n\tenableSubgroupsF16() {\n\n\t\tthis.enableDirective( 'subgroups-f16' );\n\n\t}\n\n\tenableClipDistances() {\n\n\t\tthis.enableDirective( 'clip_distances' );\n\n\t}\n\n\tenableShaderF16() {\n\n\t\tthis.enableDirective( 'f16' );\n\n\t}\n\n\tenableDualSourceBlending() {\n\n\t\tthis.enableDirective( 'dual_source_blending' );\n\n\t}\n\n\tgetBuiltins( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst builtins = this.builtins[ shaderStage ];\n\n\t\tif ( builtins !== undefined ) {\n\n\t\t\tfor ( const { name, property, type } of builtins.values() ) {\n\n\t\t\t\tsnippets.push( `@builtin( ${name} ) ${property} : ${type}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\tgetScopedArray( name, scope, bufferType, bufferCount ) {\n\n\t\tif ( this.scopedArrays.has( name ) === false ) {\n\n\t\t\tthis.scopedArrays.set( name, {\n\t\t\t\tname,\n\t\t\t\tscope,\n\t\t\t\tbufferType,\n\t\t\t\tbufferCount\n\t\t\t} );\n\n\t\t}\n\n\t\treturn name;\n\n\t}\n\n\tgetScopedArrays( shaderStage ) {\n\n\t\tif ( shaderStage !== 'compute' ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst snippets = [];\n\n\t\tfor ( const { name, scope, bufferType, bufferCount } of this.scopedArrays.values() ) {\n\n\t\t\tconst type = this.getType( bufferType );\n\n\t\t\tsnippets.push( `var<${scope}> ${name}: array< ${type}, ${bufferCount} >;` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tthis.getBuiltin( 'global_invocation_id', 'id', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'workgroup_id', 'workgroupId', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'local_invocation_id', 'localId', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'num_workgroups', 'numWorkgroups', 'vec3<u32>', 'attribute' );\n\n\t\t\tif ( this.renderer.hasFeature( 'subgroups' ) ) {\n\n\t\t\t\tthis.enableDirective( 'subgroups', shaderStage );\n\t\t\t\tthis.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tconst builtins = this.getBuiltins( 'attribute' );\n\n\t\t\tif ( builtins ) snippets.push( builtins );\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tfor ( let index = 0, length = attributes.length; index < length; index ++ ) {\n\n\t\t\t\tconst attribute = attributes[ index ];\n\t\t\t\tconst name = attribute.name;\n\t\t\t\tconst type = this.getType( attribute.type );\n\n\t\t\t\tsnippets.push( `@location( ${index} ) ${ name } : ${ type }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\t\tconst members = struct.getMemberTypes();\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst member = members[ i ];\n\t\t\tsnippets.push( `\\t@location( ${i} ) m${i} : ${ member }<f32>` );\n\n\t\t}\n\n\t\tconst builtins = this.getBuiltins( 'output' );\n\n\t\tif ( builtins ) snippets.push( '\\t' + builtins );\n\n\t\treturn snippets.join( ',\\n' );\n\n\t}\n\n\tgetStructs( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tfor ( let index = 0, length = structs.length; index < length; index ++ ) {\n\n\t\t\tconst struct = structs[ index ];\n\t\t\tconst name = struct.name;\n\n\t\t\tlet snippet = `\\struct ${ name } {\\n`;\n\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\tsnippet += '\\n}';\n\n\n\t\t\tsnippets.push( snippet );\n\n\t\t\tsnippets.push( `\\nvar<private> output : ${ name };\\n\\n` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\n' );\n\n\t}\n\n\tgetVar( type, name ) {\n\n\t\treturn `var ${ name } : ${ this.getType( type ) }`;\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippets.push( `\\t${ this.getVar( variable.type, variable.name ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `\\n${ snippets.join( '\\n' ) }\\n`;\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tthis.getBuiltin( 'position', 'Vertex', 'vec4<f32>', 'vertex' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'fragment' ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst vars = this.vars[ shaderStage ];\n\n\t\t\tfor ( let index = 0; index < varyings.length; index ++ ) {\n\n\t\t\t\tconst varying = varyings[ index ];\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tlet attributesSnippet = `@location( ${index} )`;\n\n\t\t\t\t\tif ( /^(int|uint|ivec|uvec)/.test( varying.type ) ) {\n\n\t\t\t\t\t\tattributesSnippet += ' @interpolate( flat )';\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsnippets.push( `${ attributesSnippet } ${ varying.name } : ${ this.getType( varying.type ) }` );\n\n\t\t\t\t} else if ( shaderStage === 'vertex' && vars.includes( varying ) === false ) {\n\n\t\t\t\t\tvars.push( varying );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst builtins = this.getBuiltins( shaderStage );\n\n\t\tif ( builtins ) snippets.push( builtins );\n\n\t\tconst code = snippets.join( ',\\n\\t' );\n\n\t\treturn shaderStage === 'vertex' ? this._getWGSLStruct( 'VaryingsStruct', '\\t' + code ) : code;\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst bufferSnippets = [];\n\t\tconst structSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tconst groupName = uniform.groupNode.name;\n\t\t\tconst uniformIndexes = this.bindingsIndexes[ groupName ];\n\n\t\t\tif ( uniform.type === 'texture' || uniform.type === 'cubeTexture' || uniform.type === 'storageTexture' || uniform.type === 'texture3D' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false && uniform.node.isStorageTextureNode !== true ) {\n\n\t\t\t\t\tif ( texture.isDepthTexture === true && texture.compareFunction !== null ) {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler_comparison;` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler;` );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlet textureType;\n\n\t\t\t\tlet multisampled = '';\n\n\t\t\t\tif ( texture.isMultisampleRenderTargetTexture === true ) {\n\n\t\t\t\t\tmultisampled = '_multisampled';\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_cube<f32>';\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_2d_array<f32>';\n\n\t\t\t\t} else if ( texture.isDepthTexture === true ) {\n\n\t\t\t\t\ttextureType = `texture_depth${multisampled}_2d`;\n\n\t\t\t\t} else if ( texture.isVideoTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_external';\n\n\t\t\t\t} else if ( texture.isData3DTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_3d<f32>';\n\n\t\t\t\t} else if ( uniform.node.isStorageTextureNode === true ) {\n\n\t\t\t\t\tconst format = getFormat( texture );\n\t\t\t\t\tconst access = this.getStorageAccess( uniform.node );\n\n\t\t\t\t\ttextureType = `texture_storage_2d<${ format }, ${ access }>`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst componentPrefix = this.getComponentTypeFromTexture( texture ).charAt( 0 );\n\n\t\t\t\t\ttextureType = `texture${multisampled}_2d<${ componentPrefix }32>`;\n\n\t\t\t\t}\n\n\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name } : ${ textureType };` );\n\n\t\t\t} else if ( uniform.type === 'buffer' || uniform.type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? ', ' + bufferCount : '';\n\t\t\t\tconst bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${bufferType}>` : `${bufferType}`;\n\t\t\t\tconst bufferSnippet = `\\t${ uniform.name } : array< ${ bufferTypeSnippet }${ bufferCountSnippet } >\\n`;\n\t\t\t\tconst bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${ this.getStorageAccess( bufferNode ) }` : 'uniform';\n\n\t\t\t\tbufferSnippets.push( this._getWGSLStructBinding( 'NodeBuffer_' + bufferNode.id, bufferSnippet, bufferAccessMode, uniformIndexes.binding ++, uniformIndexes.group ) );\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getType( this.getVectorType( uniform.type ) );\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\n\t\t\t\tconst group = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = {\n\t\t\t\t\tindex: uniformIndexes.binding ++,\n\t\t\t\t\tid: uniformIndexes.group,\n\t\t\t\t\tsnippets: []\n\t\t\t\t} );\n\n\t\t\t\tgroup.snippets.push( `\\t${ uniform.name } : ${ vectorType }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst group = uniformGroups[ name ];\n\n\t\t\tstructSnippets.push( this._getWGSLStructBinding( name, group.snippets.join( ',\\n' ), 'uniform', group.index, group.id ) );\n\n\t\t}\n\n\t\tlet code = bindingSnippets.join( '\\n' );\n\t\tcode += bufferSnippets.join( '\\n' );\n\t\tcode += structSnippets.join( '\\n' );\n\n\t\treturn code;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tthis.sortBindingGroups();\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.directives = this.getDirectives( shaderStage );\n\t\t\tstageData.scopedArrays = this.getScopedArrays( shaderStage );\n\n\t\t\t//\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tconst outputNode = mainNode.outputNode;\n\t\t\tconst isOutputStruct = ( outputNode !== undefined && outputNode.isOutputStructNode === true );\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += `varyings.Vertex = ${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( isOutputStruct ) {\n\n\t\t\t\t\t\t\tstageData.returnType = outputNode.nodeType;\n\n\t\t\t\t\t\t\tflow += `return ${ flowSlotData.result };`;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tlet structSnippet = '\\t@location(0) color: vec4<f32>';\n\n\t\t\t\t\t\t\tconst builtins = this.getBuiltins( 'output' );\n\n\t\t\t\t\t\t\tif ( builtins ) structSnippet += ',\\n\\t' + builtins;\n\n\t\t\t\t\t\t\tstageData.returnType = 'OutputStruct';\n\t\t\t\t\t\t\tstageData.structs += this._getWGSLStruct( 'OutputStruct', structSnippet );\n\t\t\t\t\t\t\tstageData.structs += '\\nvar<private> output : OutputStruct;\\n\\n';\n\n\t\t\t\t\t\t\tflow += `output.color = ${ flowSlotData.result };\\n\\n\\treturn output;`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstageData.flow = flow;\n\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getWGSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getWGSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getWGSLComputeCode( shadersData.compute, ( this.object.workgroupSize || [ 64 ] ).join( ', ' ) );\n\n\t\t}\n\n\t}\n\n\tgetMethod( method, output = null ) {\n\n\t\tlet wgslMethod;\n\n\t\tif ( output !== null ) {\n\n\t\t\twgslMethod = this._getWGSLMethod( method + '_' + output );\n\n\t\t}\n\n\t\tif ( wgslMethod === undefined ) {\n\n\t\t\twgslMethod = this._getWGSLMethod( method );\n\n\t\t}\n\n\t\treturn wgslMethod || method;\n\n\t}\n\n\tgetType( type ) {\n\n\t\treturn wgslTypeLib[ type ] || type;\n\n\t}\n\n\tisAvailable( name ) {\n\n\t\tlet result = supports[ name ];\n\n\t\tif ( result === undefined ) {\n\n\t\t\tif ( name === 'float32Filterable' ) {\n\n\t\t\t\tresult = this.renderer.hasFeature( 'float32-filterable' );\n\n\t\t\t}\n\n\t\t\tsupports[ name ] = result;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t_getWGSLMethod( method ) {\n\n\t\tif ( wgslPolyfill[ method ] !== undefined ) {\n\n\t\t\tthis._include( method );\n\n\t\t}\n\n\t\treturn wgslMethods[ method ];\n\n\t}\n\n\t_include( name ) {\n\n\t\tconst codeNode = wgslPolyfill[ name ];\n\t\tcodeNode.build( this );\n\n\t\tif ( this.currentFunctionNode !== null ) {\n\n\t\t\tthis.currentFunctionNode.includes.push( codeNode );\n\n\t\t}\n\n\t\treturn codeNode;\n\n\t}\n\n\t_getWGSLVertexCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n// directives\n${shaderData.directives}\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${shaderData.codes}\n\n@vertex\nfn main( ${shaderData.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\treturn varyings;\n\n}\n`;\n\n\t}\n\n\t_getWGSLFragmentCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n// global\n${ diagnostics }\n\n// uniforms\n${shaderData.uniforms}\n\n// structs\n${shaderData.structs}\n\n// codes\n${shaderData.codes}\n\n@fragment\nfn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLComputeCode( shaderData, workgroupSize ) {\n\n\t\treturn `${ this.getSignature() }\n// directives\n${shaderData.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${shaderData.scopedArrays}\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@compute @workgroup_size( ${workgroupSize} )\nfn main( ${shaderData.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x + id.y * numWorkgroups.x * u32(${workgroupSize}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLStruct( name, vars ) {\n\n\t\treturn `\nstruct ${name} {\n${vars}\n};`;\n\n\t}\n\n\t_getWGSLStructBinding( name, vars, access, binding = 0, group = 0 ) {\n\n\t\tconst structName = name + 'Struct';\n\t\tconst structSnippet = this._getWGSLStruct( structName, vars );\n\n\t\treturn `${structSnippet}\n@binding( ${binding} ) @group( ${group} )\nvar<${access}> ${name} : ${structName};`;\n\n\t}\n\n}\n\nexport default WGSLNodeBuilder;\n", "import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\n\nclass WebGPUUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tgetCurrentDepthStencilFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\n\n\t\t} else if ( renderContext.depth && renderContext.stencil ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t} else if ( renderContext.depth ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24Plus;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetTextureFormatGPU( texture ) {\n\n\t\treturn this.backend.get( texture ).format;\n\n\t}\n\n\tgetCurrentColorFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.textures[ 0 ] );\n\n\n\t\t} else {\n\n\t\t\tformat = this.getPreferredCanvasFormat(); // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetCurrentColorSpace( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.textures[ 0 ].colorSpace;\n\n\t\t}\n\n\t\treturn this.backend.renderer.outputColorSpace;\n\n\t}\n\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\tgetSampleCount( sampleCount ) {\n\n\t\tlet count = 1;\n\n\t\tif ( sampleCount > 1 ) {\n\n\t\t\t// WebGPU only supports power-of-two sample counts and 2 is not a valid value\n\t\t\tcount = Math.pow( 2, Math.floor( Math.log2( sampleCount ) ) );\n\n\t\t\tif ( count === 2 ) {\n\n\t\t\t\tcount = 4;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tgetSampleCountRenderContext( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn this.getSampleCount( renderContext.sampleCount );\n\n\t\t}\n\n\t\treturn this.getSampleCount( this.backend.renderer.samples );\n\n\t}\n\n\tgetPreferredCanvasFormat() {\n\n\t\t// TODO: Remove this check when Quest 34.5 is out\n\t\t// https://github.com/mrdoob/three.js/pull/29221/files#r1731833949\n\n\t\tif ( navigator.userAgent.includes( 'Quest' ) ) {\n\n\t\t\treturn GPUTextureFormat.BGRA8Unorm;\n\n\t\t} else {\n\n\t\t\treturn navigator.gpu.getPreferredCanvasFormat();\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGPUUtils;\n", "import { GPUInputStepMode } from './WebGPUConstants.js';\n\nimport { Float16BufferAttribute } from '../../../core/BufferAttribute.js';\n\nconst typedArraysToVertexFormatPrefix = new Map( [\n\t[ Int8Array, [ 'sint8', 'snorm8' ]],\n\t[ Uint8Array, [ 'uint8', 'unorm8' ]],\n\t[ Int16Array, [ 'sint16', 'snorm16' ]],\n\t[ Uint16Array, [ 'uint16', 'unorm16' ]],\n\t[ Int32Array, [ 'sint32', 'snorm32' ]],\n\t[ Uint32Array, [ 'uint32', 'unorm32' ]],\n\t[ Float32Array, [ 'float32', ]],\n] );\n\nconst typedAttributeToVertexFormatPrefix = new Map( [\n\t[ Float16BufferAttribute, [ 'float16', ]],\n] );\n\nconst typeArraysToVertexFormatPrefixForItemSize1 = new Map( [\n\t[ Int32Array, 'sint32' ],\n\t[ Int16Array, 'sint32' ], // patch for INT16\n\t[ Uint32Array, 'uint32' ],\n\t[ Uint16Array, 'uint32' ], // patch for UINT16\n\t[ Float32Array, 'float32' ]\n] );\n\nclass WebGPUAttributeUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateAttribute( attribute, usage ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet buffer = bufferData.buffer;\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tconst device = backend.device;\n\n\t\t\tlet array = bufferAttribute.array;\n\n\t\t\t// patch for INT16 and UINT16\n\t\t\tif ( attribute.normalized === false && ( array.constructor === Int16Array || array.constructor === Uint16Array ) ) {\n\n\t\t\t\tconst tempArray = new Uint32Array( array.length );\n\t\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\t\ttempArray[ i ] = array[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tarray = tempArray;\n\n\t\t\t}\n\n\t\t\tbufferAttribute.array = array;\n\n\t\t\tif ( ( bufferAttribute.isStorageBufferAttribute || bufferAttribute.isStorageInstancedBufferAttribute ) && bufferAttribute.itemSize === 3 ) {\n\n\t\t\t\tarray = new array.constructor( bufferAttribute.count * 4 );\n\n\t\t\t\tfor ( let i = 0; i < bufferAttribute.count; i ++ ) {\n\n\t\t\t\t\tarray.set( bufferAttribute.array.subarray( i * 3, i * 3 + 3 ), i * 4 );\n\n\t\t\t\t}\n\n\t\t\t\t// Update BufferAttribute\n\t\t\t\tbufferAttribute.itemSize = 4;\n\t\t\t\tbufferAttribute.array = array;\n\n\t\t\t}\n\n\t\t\tconst size = array.byteLength + ( ( 4 - ( array.byteLength % 4 ) ) % 4 ); // ensure 4 byte alignment, see #20441\n\n\t\t\tbuffer = device.createBuffer( {\n\t\t\t\tlabel: bufferAttribute.name,\n\t\t\t\tsize: size,\n\t\t\t\tusage: usage,\n\t\t\t\tmappedAtCreation: true\n\t\t\t} );\n\n\t\t\tnew array.constructor( buffer.getMappedRange() ).set( array );\n\n\t\t\tbuffer.unmap();\n\n\t\t\tbufferData.buffer = buffer;\n\n\t\t}\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst buffer = backend.get( bufferAttribute ).buffer;\n\n\t\tconst array = bufferAttribute.array;\n\t\tconst updateRanges = bufferAttribute.updateRanges;\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tdevice.queue.writeBuffer(\n\t\t\t\tbuffer,\n\t\t\t\t0,\n\t\t\t\tarray,\n\t\t\t\t0\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tdevice.queue.writeBuffer(\n\t\t\t\t\tbuffer,\n\t\t\t\t\t0,\n\t\t\t\t\tarray,\n\t\t\t\t\trange.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\trange.count * array.BYTES_PER_ELEMENT\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t}\n\n\tcreateShaderVertexBuffers( renderObject ) {\n\n\t\tconst attributes = renderObject.getAttributes();\n\t\tconst vertexBuffers = new Map();\n\n\t\tfor ( let slot = 0; slot < attributes.length; slot ++ ) {\n\n\t\t\tconst geometryAttribute = attributes[ slot ];\n\t\t\tconst bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;\n\t\t\tconst bufferAttribute = this._getBufferAttribute( geometryAttribute );\n\n\t\t\tlet vertexBufferLayout = vertexBuffers.get( bufferAttribute );\n\n\t\t\tif ( vertexBufferLayout === undefined ) {\n\n\t\t\t\tlet arrayStride, stepMode;\n\n\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\t\tarrayStride = geometryAttribute.data.stride * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarrayStride = geometryAttribute.itemSize * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t}\n\n\t\t\t\t// patch for INT16 and UINT16\n\t\t\t\tif ( geometryAttribute.normalized === false && ( geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array ) ) {\n\n\t\t\t\t\tarrayStride = 4;\n\n\t\t\t\t}\n\n\t\t\t\tvertexBufferLayout = {\n\t\t\t\t\tarrayStride,\n\t\t\t\t\tattributes: [],\n\t\t\t\t\tstepMode\n\t\t\t\t};\n\n\t\t\t\tvertexBuffers.set( bufferAttribute, vertexBufferLayout );\n\n\t\t\t}\n\n\t\t\tconst format = this._getVertexFormat( geometryAttribute );\n\t\t\tconst offset = ( geometryAttribute.isInterleavedBufferAttribute === true ) ? geometryAttribute.offset * bytesPerElement : 0;\n\n\t\t\tvertexBufferLayout.attributes.push( {\n\t\t\t\tshaderLocation: slot,\n\t\t\t\toffset,\n\t\t\t\tformat\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Array.from( vertexBuffers.values() );\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\n\t\tdata.buffer.destroy();\n\n\t\tbackend.delete( attribute );\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\n\t\tconst bufferGPU = data.buffer;\n\t\tconst size = bufferGPU.size;\n\n\t\tconst readBufferGPU = device.createBuffer( {\n\t\t\tlabel: attribute.name,\n\t\t\tsize,\n\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t} );\n\n\n\t\tconst cmdEncoder = device.createCommandEncoder( {} );\n\n\t\tcmdEncoder.copyBufferToBuffer(\n\t\t\tbufferGPU,\n\t\t\t0,\n\t\t\treadBufferGPU,\n\t\t\t0,\n\t\t\tsize\n\t\t);\n\n\t\treadBufferGPU.unmap();\n\n\t\tconst gpuCommands = cmdEncoder.finish();\n\t\tdevice.queue.submit( [ gpuCommands ] );\n\n\t\tawait readBufferGPU.mapAsync( GPUMapMode.READ );\n\n\t\tconst arrayBuffer = readBufferGPU.getMappedRange();\n\n\t\treturn arrayBuffer;\n\n\t}\n\n\t_getVertexFormat( geometryAttribute ) {\n\n\t\tconst { itemSize, normalized } = geometryAttribute;\n\t\tconst ArrayType = geometryAttribute.array.constructor;\n\t\tconst AttributeType = geometryAttribute.constructor;\n\n\t\tlet format;\n\n\t\tif ( itemSize == 1 ) {\n\n\t\t\tformat = typeArraysToVertexFormatPrefixForItemSize1.get( ArrayType );\n\n\t\t} else {\n\n\t\t\tconst prefixOptions = typedAttributeToVertexFormatPrefix.get( AttributeType ) || typedArraysToVertexFormatPrefix.get( ArrayType );\n\t\t\tconst prefix = prefixOptions[ normalized ? 1 : 0 ];\n\n\t\t\tif ( prefix ) {\n\n\t\t\t\tconst bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;\n\t\t\t\tconst paddedBytesPerUnit = Math.floor( ( bytesPerUnit + 3 ) / 4 ) * 4;\n\t\t\t\tconst paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;\n\n\t\t\t\tif ( paddedItemSize % 1 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGPUAttributeUtils: Bad vertex format item size.' );\n\n\t\t\t\t}\n\n\t\t\t\tformat = `${prefix}x${paddedItemSize}`;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! format ) {\n\n\t\t\tconsole.error( 'THREE.WebGPUAttributeUtils: Vertex format not supported yet.' );\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\nexport default WebGPUAttributeUtils;\n", "import {\n\tGPUTextureAspect, GPUTextureViewDimension, GPUTextureSampleType\n} from './WebGPUConstants.js';\n\nimport { FloatType, IntType, UnsignedIntType } from '../../../constants.js';\n\nclass WebGPUBindingUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\t\tthis.bindGroupLayoutCache = new WeakMap();\n\n\t}\n\n\tcreateBindingsLayout( bindGroup ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst entries = [];\n\n\t\tlet index = 0;\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tconst bindingGPU = {\n\t\t\t\tbinding: index ++,\n\t\t\t\tvisibility: binding.visibility\n\t\t\t};\n\n\t\t\tif ( binding.isUniformBuffer || binding.isStorageBuffer ) {\n\n\t\t\t\tconst buffer = {}; // GPUBufferBindingLayout\n\n\t\t\t\tif ( binding.isStorageBuffer ) {\n\n\t\t\t\t\tbuffer.type = binding.access;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.buffer = buffer;\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst sampler = {}; // GPUSamplerBindingLayout\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\tif ( binding.texture.compareFunction !== null ) {\n\n\t\t\t\t\t\tsampler.type = 'comparison';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.sampler = sampler;\n\n\t\t\t} else if ( binding.isSampledTexture && binding.texture.isVideoTexture ) {\n\n\t\t\t\tbindingGPU.externalTexture = {}; // GPUExternalTextureBindingLayout\n\n\t\t\t} else if ( binding.isSampledTexture && binding.store ) {\n\n\t\t\t\tconst format = this.backend.get( binding.texture ).texture.format;\n\t\t\t\tconst access = binding.access;\n\n\t\t\t\tbindingGPU.storageTexture = { format, access }; // GPUStorageTextureBindingLayout\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texture = {}; // GPUTextureBindingLayout\n\n\t\t\t\tif ( binding.texture.isMultisampleRenderTargetTexture === true ) {\n\n\t\t\t\t\ttexture.multisampled = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.Depth;\n\n\t\t\t\t} else if ( binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture ) {\n\n\t\t\t\t\tconst type = binding.texture.type;\n\n\t\t\t\t\tif ( type === IntType ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.SInt;\n\n\t\t\t\t\t} else if ( type === UnsignedIntType ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UInt;\n\n\t\t\t\t\t} else if ( type === FloatType ) {\n\n\t\t\t\t\t\tif ( this.backend.hasFeature( 'float32-filterable' ) ) {\n\n\t\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.Float;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UnfilterableFloat;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.Cube;\n\n\t\t\t\t} else if ( binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t} else if ( binding.isSampledTexture3D ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.ThreeD;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.texture = texture;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( `WebGPUBindingUtils: Unsupported binding \"${ binding }\".` );\n\n\t\t\t}\n\n\t\t\tentries.push( bindingGPU );\n\n\t\t}\n\n\t\treturn device.createBindGroupLayout( { entries } );\n\n\t}\n\n\tcreateBindings( bindGroup ) {\n\n\t\tconst { backend, bindGroupLayoutCache } = this;\n\t\tconst bindingsData = backend.get( bindGroup );\n\n\t\t// setup (static) binding layout and (dynamic) binding group\n\n\t\tlet bindLayoutGPU = bindGroupLayoutCache.get( bindGroup.bindingsReference );\n\n\t\tif ( bindLayoutGPU === undefined ) {\n\n\t\t\tbindLayoutGPU = this.createBindingsLayout( bindGroup );\n\t\t\tbindGroupLayoutCache.set( bindGroup.bindingsReference, bindLayoutGPU );\n\n\t\t}\n\n\t\tconst bindGroupGPU = this.createBindGroup( bindGroup, bindLayoutGPU );\n\n\t\tbindingsData.layout = bindLayoutGPU;\n\t\tbindingsData.group = bindGroupGPU;\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst buffer = binding.buffer;\n\t\tconst bufferGPU = backend.get( binding ).buffer;\n\n\t\tdevice.queue.writeBuffer( bufferGPU, 0, buffer, 0 );\n\n\t}\n\n\tcreateBindGroup( bindGroup, layoutGPU ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tlet bindingPoint = 0;\n\t\tconst entriesGPU = [];\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst byteLength = binding.byteLength;\n\n\t\t\t\t\tconst usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\tconst bufferGPU = device.createBuffer( {\n\t\t\t\t\t\tlabel: 'bindingBuffer_' + binding.name,\n\t\t\t\t\t\tsize: byteLength,\n\t\t\t\t\t\tusage: usage\n\t\t\t\t\t} );\n\n\t\t\t\t\tbindingData.buffer = bufferGPU;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst attribute = binding.attribute;\n\t\t\t\t\t//const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | /*GPUBufferUsage.COPY_SRC |*/ GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\t//backend.attributeUtils.createAttribute( attribute, usage ); // @TODO: Move it to universal renderer\n\n\t\t\t\t\tbindingData.buffer = backend.get( attribute ).buffer;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst textureGPU = backend.get( binding.texture );\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: textureGPU.sampler } );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst textureData = backend.get( binding.texture );\n\n\t\t\t\tlet resourceGPU;\n\n\t\t\t\tif ( textureData.externalTexture !== undefined ) {\n\n\t\t\t\t\tresourceGPU = device.importExternalTexture( { source: textureData.externalTexture } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;\n\t\t\t\t\tconst propertyName = `view-${ textureData.texture.width }-${ textureData.texture.height }-${ mipLevelCount }`;\n\n\t\t\t\t\tresourceGPU = textureData[ propertyName ];\n\n\t\t\t\t\tif ( resourceGPU === undefined ) {\n\n\t\t\t\t\t\tconst aspectGPU = GPUTextureAspect.All;\n\n\t\t\t\t\t\tlet dimensionViewGPU;\n\n\t\t\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.Cube;\n\n\t\t\t\t\t\t} else if ( binding.isSampledTexture3D ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.ThreeD;\n\n\t\t\t\t\t\t} else if ( binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoD;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresourceGPU = textureData[ propertyName ] = textureData.texture.createView( { aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: resourceGPU } );\n\n\t\t\t}\n\n\t\t\tbindingPoint ++;\n\n\t\t}\n\n\t\treturn device.createBindGroup( {\n\t\t\tlabel: 'bindGroup_' + bindGroup.name,\n\t\t\tlayout: layoutGPU,\n\t\t\tentries: entriesGPU\n\t\t} );\n\n\t}\n\n}\n\nexport default WebGPUBindingUtils;\n", "import { BlendColorFactor, OneMinusBlendColorFactor, } from '../../common/Constants.js';\n\nimport {\n\tGPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation\n} from './WebGPUConstants.js';\n\nimport {\n\tFrontSide, BackSide, DoubleSide,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor,\n\tOneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor,\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc\n} from '../../../constants.js';\n\nclass WebGPUPipelineUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\t_getSampleCount( renderObjectContext ) {\n\n\t\treturn this.backend.utils.getSampleCountRenderContext( renderObjectContext );\n\n\t}\n\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tconst { object, material, geometry, pipeline } = renderObject;\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\t\tconst utils = backend.utils;\n\n\t\tconst pipelineData = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindGroup of renderObject.getBindings() ) {\n\n\t\t\tconst bindingsData = backend.get( bindGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );\n\n\t\t// blending\n\n\t\tlet blending;\n\n\t\tif ( material.transparent === true && material.blending !== NoBlending ) {\n\n\t\t\tblending = this._getBlending( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\n\t\tconst targets = [];\n\n\t\tif ( renderObject.context.textures !== null ) {\n\n\t\t\tconst textures = renderObject.context.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst colorFormat = utils.getTextureFormatGPU( textures[ i ] );\n\n\t\t\t\ttargets.push( {\n\t\t\t\t\tformat: colorFormat,\n\t\t\t\t\tblend: blending,\n\t\t\t\t\twriteMask: colorWriteMask\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\n\t\t\ttargets.push( {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: blending,\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} );\n\n\t\t}\n\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\n\t\tconst sampleCount = this._getSampleCount( renderObject.context );\n\n\t\tconst pipelineDescriptor = {\n\t\t\tlabel: `renderPipeline_${ material.name || material.type }_${ material.id }`,\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tdepthStencil: {\n\t\t\t\tformat: depthStencilFormat,\n\t\t\t\tdepthWriteEnabled: material.depthWrite,\n\t\t\t\tdepthCompare: depthCompare,\n\t\t\t\tstencilFront: stencilFront,\n\t\t\t\tstencilBack: {}, // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tstencilReadMask: material.stencilFuncMask,\n\t\t\t\tstencilWriteMask: material.stencilWriteMask\n\t\t\t},\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount,\n\t\t\t\talphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1\n\t\t\t},\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t};\n\n\t\tif ( promises === null ) {\n\n\t\t\tpipelineData.pipeline = device.createRenderPipeline( pipelineDescriptor );\n\n\t\t} else {\n\n\t\t\tconst p = new Promise( ( resolve /*, reject*/ ) => {\n\n\t\t\t\tdevice.createRenderPipelineAsync( pipelineDescriptor ).then( pipeline => {\n\n\t\t\t\t\tpipelineData.pipeline = pipeline;\n\t\t\t\t\tresolve();\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\tpromises.push( p );\n\n\t\t}\n\n\t}\n\n\tcreateBundleEncoder( renderContext ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { utils, device } = backend;\n\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderContext );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderContext );\n\t\tconst sampleCount = this._getSampleCount( renderContext );\n\n\t\tconst descriptor = {\n\t\t\tlabel: 'renderBundleEncoder',\n\t\t\tcolorFormats: [ colorFormat ],\n\t\t\tdepthStencilFormat,\n\t\t\tsampleCount\n\t\t};\n\n\t\treturn device.createRenderBundleEncoder( descriptor );\n\n\t}\n\n\tcreateComputePipeline( pipeline, bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\n\n\t\tconst pipelineGPU = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindingsGroup of bindings ) {\n\n\t\t\tconst bindingsData = backend.get( bindingsGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\n\t\t\tcompute: computeProgram,\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\t_getBlending( material ) {\n\n\t\tlet color, alpha;\n\n\t\tconst blending = material.blending;\n\t\tconst blendSrc = material.blendSrc;\n\t\tconst blendDst = material.blendDst;\n\t\tconst blendEquation = material.blendEquation;\n\n\n\t\tif ( blending === CustomBlending ) {\n\n\t\t\tconst blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;\n\t\t\tconst blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;\n\t\t\tconst blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;\n\n\t\t\tcolor = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrc ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDst ),\n\t\t\t\toperation: this._getBlendOperation( blendEquation )\n\t\t\t};\n\n\t\t\talpha = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\t\tconst setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {\n\n\t\t\t\tcolor = {\n\t\t\t\t\tsrcFactor: srcRGB,\n\t\t\t\t\tdstFactor: dstRGB,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\talpha = {\n\t\t\t\t\tsrcFactor: srcAlpha,\n\t\t\t\t\tdstFactor: dstAlpha,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( color !== undefined && alpha !== undefined ) {\n\n\t\t\treturn { color, alpha };\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );\n\n\t\t}\n\n\t}\n\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Src;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrc;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Dst;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Constant;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusConstant;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\t\tconst utils = this.backend.utils;\n\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\n\n\t\tif ( geometry.index !== null && object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tdescriptor.stripIndexFormat = ( geometry.index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n}\n\nexport default WebGPUPipelineUtils;\n", "/*// debugger tools\nimport 'https://greggman.github.io/webgpu-avoid-redundant-state-setting/webgpu-check-redundant-state-setting.js';\n//*/\n\nimport { GPUFeatureName, GPULoadOp, GPUStoreOp, GPUIndexFormat, GPUTextureViewDimension } from './utils/WebGPUConstants.js';\n\nimport WGSLNodeBuilder from './nodes/WGSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\n\nimport WebGPUUtils from './utils/WebGPUUtils.js';\nimport WebGPUAttributeUtils from './utils/WebGPUAttributeUtils.js';\nimport WebGPUBindingUtils from './utils/WebGPUBindingUtils.js';\nimport WebGPUPipelineUtils from './utils/WebGPUPipelineUtils.js';\nimport WebGPUTextureUtils from './utils/WebGPUTextureUtils.js';\n\nimport { WebGPUCoordinateSystem } from '../../constants.js';\n\n//\n\nclass WebGPUBackend extends Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isWebGPUBackend = true;\n\n\t\t// some parameters require default values other than \"undefined\"\n\t\tthis.parameters.alpha = ( parameters.alpha === undefined ) ? true : parameters.alpha;\n\n\t\tthis.parameters.requiredLimits = ( parameters.requiredLimits === undefined ) ? {} : parameters.requiredLimits;\n\n\t\tthis.trackTimestamp = ( parameters.trackTimestamp === true );\n\n\t\tthis.device = null;\n\t\tthis.context = null;\n\t\tthis.colorBuffer = null;\n\t\tthis.defaultRenderPassdescriptor = null;\n\n\t\tthis.utils = new WebGPUUtils( this );\n\t\tthis.attributeUtils = new WebGPUAttributeUtils( this );\n\t\tthis.bindingUtils = new WebGPUBindingUtils( this );\n\t\tthis.pipelineUtils = new WebGPUPipelineUtils( this );\n\t\tthis.textureUtils = new WebGPUTextureUtils( this );\n\t\tthis.occludedResolveCache = new Map();\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tawait super.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\t// create the device if it is not passed with parameters\n\n\t\tlet device;\n\n\t\tif ( parameters.device === undefined ) {\n\n\t\t\tconst adapterOptions = {\n\t\t\t\tpowerPreference: parameters.powerPreference\n\t\t\t};\n\n\t\t\tconst adapter = await navigator.gpu.requestAdapter( adapterOptions );\n\n\t\t\tif ( adapter === null ) {\n\n\t\t\t\tthrow new Error( 'WebGPUBackend: Unable to create WebGPU adapter.' );\n\n\t\t\t}\n\n\t\t\t// feature support\n\n\t\t\tconst features = Object.values( GPUFeatureName );\n\n\t\t\tconst supportedFeatures = [];\n\n\t\t\tfor ( const name of features ) {\n\n\t\t\t\tif ( adapter.features.has( name ) ) {\n\n\t\t\t\t\tsupportedFeatures.push( name );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deviceDescriptor = {\n\t\t\t\trequiredFeatures: supportedFeatures,\n\t\t\t\trequiredLimits: parameters.requiredLimits\n\t\t\t};\n\n\t\t\tdevice = await adapter.requestDevice( deviceDescriptor );\n\n\t\t} else {\n\n\t\t\tdevice = parameters.device;\n\n\t\t}\n\n\t\tconst context = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgpu' );\n\n\t\tthis.device = device;\n\t\tthis.context = context;\n\n\t\tconst alphaMode = parameters.alpha ? 'premultiplied' : 'opaque';\n\n\t\tthis.trackTimestamp = this.trackTimestamp && this.hasFeature( GPUFeatureName.TimestampQuery );\n\n\t\tthis.context.configure( {\n\t\t\tdevice: this.device,\n\t\t\tformat: this.utils.getPreferredCanvasFormat(),\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n\t\t\talphaMode: alphaMode\n\t\t} );\n\n\t\tthis.updateSize();\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGPUCoordinateSystem;\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this.context;\n\n\t}\n\n\t_getDefaultRenderPassDescriptor() {\n\n\t\tlet descriptor = this.defaultRenderPassdescriptor;\n\n\t\tif ( descriptor === null ) {\n\n\t\t\tconst renderer = this.renderer;\n\n\t\t\tdescriptor = {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: null\n\t\t\t\t} ],\n\t\t\t\tdepthStencilAttachment: {\n\t\t\t\t\tview: this.textureUtils.getDepthBuffer( renderer.depth, renderer.stencil ).createView()\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\t\tif ( this.renderer.samples > 0 ) {\n\n\t\t\t\tcolorAttachment.view = this.colorBuffer.createView();\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.resolveTarget = undefined;\n\n\t\t\t}\n\n\t\t\tthis.defaultRenderPassdescriptor = descriptor;\n\n\t\t}\n\n\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\tif ( this.renderer.samples > 0 ) {\n\n\t\t\tcolorAttachment.resolveTarget = this.context.getCurrentTexture().createView();\n\n\t\t} else {\n\n\t\t\tcolorAttachment.view = this.context.getCurrentTexture().createView();\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t_getRenderPassDescriptor( renderContext ) {\n\n\t\tconst renderTarget = renderContext.renderTarget;\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tlet descriptors = renderTargetData.descriptors;\n\n\t\tif ( descriptors === undefined ||\n\t\t\trenderTargetData.width !== renderTarget.width ||\n\t\t\trenderTargetData.height !== renderTarget.height ||\n\t\t\trenderTargetData.activeMipmapLevel !== renderTarget.activeMipmapLevel ||\n\t\t\trenderTargetData.samples !== renderTarget.samples\n\t\t) {\n\n\t\t\tdescriptors = {};\n\n\t\t\trenderTargetData.descriptors = descriptors;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tthis.delete( renderTarget );\n\n\t\t\t};\n\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t\tconst cacheKey = renderContext.getCacheKey();\n\n\t\tlet descriptor = descriptors[ cacheKey ];\n\n\t\tif ( descriptor === undefined ) {\n\n\t\t\tconst textures = renderContext.textures;\n\t\t\tconst colorAttachments = [];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst textureData = this.get( textures[ i ] );\n\n\t\t\t\tconst textureView = textureData.texture.createView( {\n\t\t\t\t\tbaseMipLevel: renderContext.activeMipmapLevel,\n\t\t\t\t\tmipLevelCount: 1,\n\t\t\t\t\tbaseArrayLayer: renderContext.activeCubeFace,\n\t\t\t\t\tdimension: GPUTextureViewDimension.TwoD\n\t\t\t\t} );\n\n\t\t\t\tlet view, resolveTarget;\n\n\t\t\t\tif ( textureData.msaaTexture !== undefined ) {\n\n\t\t\t\t\tview = textureData.msaaTexture.createView();\n\t\t\t\t\tresolveTarget = textureView;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tview = textureView;\n\t\t\t\t\tresolveTarget = undefined;\n\n\t\t\t\t}\n\n\t\t\t\tcolorAttachments.push( {\n\t\t\t\t\tview,\n\t\t\t\t\tresolveTarget,\n\t\t\t\t\tloadOp: GPULoadOp.Load,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst depthTextureData = this.get( renderContext.depthTexture );\n\n\t\t\tconst depthStencilAttachment = {\n\t\t\t\tview: depthTextureData.texture.createView()\n\t\t\t};\n\n\t\t\tdescriptor = {\n\t\t\t\tcolorAttachments,\n\t\t\t\tdepthStencilAttachment\n\t\t\t};\n\n\t\t\tdescriptors[ cacheKey ] = descriptor;\n\n\t\t\trenderTargetData.width = renderTarget.width;\n\t\t\trenderTargetData.height = renderTarget.height;\n\t\t\trenderTargetData.samples = renderTarget.samples;\n\t\t\trenderTargetData.activeMipmapLevel = renderTarget.activeMipmapLevel;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\tbeginRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst device = this.device;\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tlet occlusionQuerySet;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tif ( renderContextData.currentOcclusionQuerySet ) renderContextData.currentOcclusionQuerySet.destroy();\n\t\t\tif ( renderContextData.currentOcclusionQueryBuffer ) renderContextData.currentOcclusionQueryBuffer.destroy();\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the buffer.mapAsyc() completes.\n\t\t\trenderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\t//\n\n\t\t\tocclusionQuerySet = device.createQuerySet( { type: 'occlusion', count: occlusionQueryCount } );\n\n\t\t\trenderContextData.occlusionQuerySet = occlusionQuerySet;\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\n\t\t}\n\n\t\tlet descriptor;\n\n\t\tif ( renderContext.textures === null ) {\n\n\t\t\tdescriptor = this._getDefaultRenderPassDescriptor();\n\n\t\t} else {\n\n\t\t\tdescriptor = this._getRenderPassDescriptor( renderContext );\n\n\t\t}\n\n\t\tthis.initTimestampQuery( renderContext, descriptor );\n\n\t\tdescriptor.occlusionQuerySet = occlusionQuerySet;\n\n\t\tconst depthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst colorAttachments = descriptor.colorAttachments;\n\n\t\t\tfor ( let i = 0; i < colorAttachments.length; i ++ ) {\n\n\t\t\t\tconst colorAttachment = colorAttachments[ i ];\n\n\t\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\t\tcolorAttachment.clearValue = i === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\tcolorAttachment.clearValue = renderContext.clearColorValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderContext.depth ) {\n\n\t\t\tif ( renderContext.clearDepth ) {\n\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderContext.clearDepthValue;\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( renderContext.stencil ) {\n\n\t\t\tif ( renderContext.clearStencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( { label: 'renderContext_' + renderContext.id } );\n\t\tconst currentPass = encoder.beginRenderPass( descriptor );\n\n\t\t//\n\n\t\trenderContextData.descriptor = descriptor;\n\t\trenderContextData.encoder = encoder;\n\t\trenderContextData.currentPass = currentPass;\n\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\t\trenderContextData.renderBundles = [];\n\n\t\t//\n\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t}\n\n\t\tif ( renderContext.scissor ) {\n\n\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\tcurrentPass.setScissorRect( x, y, width, height );\n\n\t\t}\n\n\t}\n\n\tfinishRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( renderContextData.renderBundles.length > 0 ) {\n\n\t\t\trenderContextData.currentPass.executeBundles( renderContextData.renderBundles );\n\n\t\t}\n\n\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\trenderContextData.currentPass.endOcclusionQuery();\n\n\t\t}\n\n\t\trenderContextData.currentPass.end();\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tconst bufferSize = occlusionQueryCount * 8; // 8 byte entries for query results\n\n\t\t\t//\n\n\t\t\tlet queryResolveBuffer = this.occludedResolveCache.get( bufferSize );\n\n\t\t\tif ( queryResolveBuffer === undefined ) {\n\n\t\t\t\tqueryResolveBuffer = this.device.createBuffer(\n\t\t\t\t\t{\n\t\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\t\tusage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tthis.occludedResolveCache.set( bufferSize, queryResolveBuffer );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst readBuffer = this.device.createBuffer(\n\t\t\t\t{\n\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// two buffers required here - WebGPU doesn't allow usage of QUERY_RESOLVE & MAP_READ to be combined\n\t\t\trenderContextData.encoder.resolveQuerySet( renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0 );\n\t\t\trenderContextData.encoder.copyBufferToBuffer( queryResolveBuffer, 0, readBuffer, 0, bufferSize );\n\n\t\t\trenderContextData.occlusionQueryBuffer = readBuffer;\n\n\t\t\t//\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t\tthis.prepareTimestampBuffer( renderContext, renderContextData.encoder );\n\n\t\tthis.device.queue.submit( [ renderContextData.encoder.finish() ] );\n\n\n\t\t//\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tif ( texture.generateMipmaps === true ) {\n\n\t\t\t\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\tasync resolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueryBuffer && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = null;\n\n\t\t\tawait currentOcclusionQueryBuffer.mapAsync( GPUMapMode.READ );\n\n\t\t\tconst buffer = currentOcclusionQueryBuffer.getMappedRange();\n\t\t\tconst results = new BigUint64Array( buffer );\n\n\t\t\tfor ( let i = 0; i < currentOcclusionQueryObjects.length; i ++ ) {\n\n\t\t\t\tif ( results[ i ] !== BigInt( 0 ) ) {\n\n\t\t\t\t\toccluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentOcclusionQueryBuffer.destroy();\n\n\t\t\trenderContextData.occluded = occluded;\n\n\t\t}\n\n\t}\n\n\tupdateViewport( renderContext ) {\n\n\t\tconst { currentPass } = this.get( renderContext );\n\t\tconst { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;\n\n\t\tcurrentPass.setViewport( x, y, width, height, minDepth, maxDepth );\n\n\t}\n\n\tclear( color, depth, stencil, renderTargetData = null ) {\n\n\t\tconst device = this.device;\n\t\tconst renderer = this.renderer;\n\n\t\tlet colorAttachments = [];\n\n\t\tlet depthStencilAttachment;\n\t\tlet clearValue;\n\n\t\tlet supportsDepth;\n\t\tlet supportsStencil;\n\n\t\tif ( color ) {\n\n\t\t\tconst clearColor = this.getClearColor();\n\n\t\t\tif ( this.renderer.alpha === true ) {\n\n\t\t\t\t// premultiply alpha\n\n\t\t\t\tconst a = clearColor.a;\n\n\t\t\t\tclearValue = { r: clearColor.r * a, g: clearColor.g * a, b: clearColor.b * a, a: a };\n\n\t\t\t} else {\n\n\t\t\t\tclearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( renderTargetData === null ) {\n\n\t\t\tsupportsDepth = renderer.depth;\n\t\t\tsupportsStencil = renderer.stencil;\n\n\t\t\tconst descriptor = this._getDefaultRenderPassDescriptor();\n\n\t\t\tif ( color ) {\n\n\t\t\t\tcolorAttachments = descriptor.colorAttachments;\n\n\t\t\t\tconst colorAttachment = colorAttachments[ 0 ];\n\n\t\t\t\tcolorAttachment.clearValue = clearValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tif ( supportsDepth || supportsStencil ) {\n\n\t\t\t\tdepthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsupportsDepth = renderTargetData.depth;\n\t\t\tsupportsStencil = renderTargetData.stencil;\n\n\t\t\tif ( color ) {\n\n\t\t\t\tfor ( const texture of renderTargetData.textures ) {\n\n\t\t\t\t\tconst textureData = this.get( texture );\n\t\t\t\t\tconst textureView = textureData.texture.createView();\n\n\t\t\t\t\tlet view, resolveTarget;\n\n\t\t\t\t\tif ( textureData.msaaTexture !== undefined ) {\n\n\t\t\t\t\t\tview = textureData.msaaTexture.createView();\n\t\t\t\t\t\tresolveTarget = textureView;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tview = textureView;\n\t\t\t\t\t\tresolveTarget = undefined;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolorAttachments.push( {\n\t\t\t\t\t\tview,\n\t\t\t\t\t\tresolveTarget,\n\t\t\t\t\t\tclearValue,\n\t\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\t\tstoreOp: GPUStoreOp.Store\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( supportsDepth || supportsStencil ) {\n\n\t\t\t\tconst depthTextureData = this.get( renderTargetData.depthTexture );\n\n\t\t\t\tdepthStencilAttachment = {\n\t\t\t\t\tview: depthTextureData.texture.createView()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( supportsDepth ) {\n\n\t\t\tif ( depth ) {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderer.getClearDepth();\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( supportsStencil ) {\n\n\t\t\tif ( stencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderer.getClearStencil();\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( {} );\n\t\tconst currentPass = encoder.beginRenderPass( {\n\t\t\tcolorAttachments,\n\t\t\tdepthStencilAttachment\n\t\t} );\n\n\t\tcurrentPass.end();\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t}\n\n\t// compute\n\n\tbeginCompute( computeGroup ) {\n\n\t\tconst groupGPU = this.get( computeGroup );\n\n\n\t\tconst descriptor = {};\n\n\t\tthis.initTimestampQuery( computeGroup, descriptor );\n\n\t\tgroupGPU.cmdEncoderGPU = this.device.createCommandEncoder();\n\n\t\tgroupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass( descriptor );\n\n\t}\n\n\tcompute( computeGroup, computeNode, bindings, pipeline ) {\n\n\t\tconst { passEncoderGPU } = this.get( computeGroup );\n\n\t\t// pipeline\n\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\n\t\t// bind groups\n\n\t\tfor ( let i = 0, l = bindings.length; i < l; i ++ ) {\n\n\t\t\tconst bindGroup = bindings[ i ];\n\t\t\tconst bindingsData = this.get( bindGroup );\n\n\t\t\tpassEncoderGPU.setBindGroup( i, bindingsData.group );\n\n\t\t}\n\n\t\tconst maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;\n\n\t\tconst computeNodeData = this.get( computeNode );\n\n\t\tif ( computeNodeData.dispatchSize === undefined ) computeNodeData.dispatchSize = { x: 0, y: 1, z: 1 };\n\n\t\tconst { dispatchSize } = computeNodeData;\n\n\t\tif ( computeNode.dispatchCount > maxComputeWorkgroupsPerDimension ) {\n\n\t\t\tdispatchSize.x = Math.min( computeNode.dispatchCount, maxComputeWorkgroupsPerDimension );\n\t\t\tdispatchSize.y = Math.ceil( computeNode.dispatchCount / maxComputeWorkgroupsPerDimension );\n\n\t\t} else {\n\n\t\t\tdispatchSize.x = computeNode.dispatchCount;\n\n\t\t}\n\n\t\tpassEncoderGPU.dispatchWorkgroups(\n\t\t\tdispatchSize.x,\n\t\t\tdispatchSize.y,\n\t\t\tdispatchSize.z\n\t\t);\n\n\t}\n\n\tfinishCompute( computeGroup ) {\n\n\t\tconst groupData = this.get( computeGroup );\n\n\t\tgroupData.passEncoderGPU.end();\n\n\t\tthis.prepareTimestampBuffer( computeGroup, groupData.cmdEncoderGPU );\n\n\t\tthis.device.queue.submit( [ groupData.cmdEncoderGPU.finish() ] );\n\n\t}\n\n\t// render object\n\n\tdraw( renderObject, info ) {\n\n\t\tconst { object, context, pipeline } = renderObject;\n\t\tconst bindings = renderObject.getBindings();\n\t\tconst renderContextData = this.get( context );\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\t\tconst currentSets = renderContextData.currentSets;\n\t\tconst passEncoderGPU = renderContextData.currentPass;\n\n\t\tconst drawParms = renderObject.getDrawParameters();\n\n\t\tif ( drawParms === null ) return;\n\n\t\t// pipeline\n\n\t\tif ( currentSets.pipeline !== pipelineGPU ) {\n\n\t\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\n\t\t\tcurrentSets.pipeline = pipelineGPU;\n\n\t\t}\n\n\t\t// bind groups\n\n\t\tconst currentBindingGroups = currentSets.bindingGroups;\n\n\t\tfor ( let i = 0, l = bindings.length; i < l; i ++ ) {\n\n\t\t\tconst bindGroup = bindings[ i ];\n\t\t\tconst bindingsData = this.get( bindGroup );\n\n\t\t\tif ( currentBindingGroups[ bindGroup.index ] !== bindGroup.id ) {\n\n\t\t\t\tpassEncoderGPU.setBindGroup( bindGroup.index, bindingsData.group );\n\t\t\t\tcurrentBindingGroups[ bindGroup.index ] = bindGroup.id;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst index = renderObject.getIndex();\n\n\t\tconst hasIndex = ( index !== null );\n\n\t\t// index\n\n\t\tif ( hasIndex === true ) {\n\n\t\t\tif ( currentSets.index !== index ) {\n\n\t\t\t\tconst buffer = this.get( index ).buffer;\n\t\t\t\tconst indexFormat = ( index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t\t\tpassEncoderGPU.setIndexBuffer( buffer, indexFormat );\n\n\t\t\t\tcurrentSets.index = index;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = renderObject.getVertexBuffers();\n\n\t\tfor ( let i = 0, l = vertexBuffers.length; i < l; i ++ ) {\n\n\t\t\tconst vertexBuffer = vertexBuffers[ i ];\n\n\t\t\tif ( currentSets.attributes[ i ] !== vertexBuffer ) {\n\n\t\t\t\tconst buffer = this.get( vertexBuffer ).buffer;\n\t\t\t\tpassEncoderGPU.setVertexBuffer( i, buffer );\n\n\t\t\t\tcurrentSets.attributes[ i ] = vertexBuffer;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// occlusion queries - handle multiple consecutive draw calls for an object\n\n\t\tif ( renderContextData.occlusionQuerySet !== undefined ) {\n\n\t\t\tconst lastObject = renderContextData.lastOcclusionObject;\n\n\t\t\tif ( lastObject !== object ) {\n\n\t\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\t\tpassEncoderGPU.endOcclusionQuery();\n\t\t\t\t\trenderContextData.occlusionQueryIndex ++;\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\t\tpassEncoderGPU.beginOcclusionQuery( renderContextData.occlusionQueryIndex );\n\t\t\t\t\trenderContextData.occlusionQueryObjects[ renderContextData.occlusionQueryIndex ] = object;\n\n\t\t\t\t}\n\n\t\t\t\trenderContextData.lastOcclusionObject = object;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// draw\n\n\t\tif ( object.isBatchedMesh === true ) {\n\n\t\t\tconst starts = object._multiDrawStarts;\n\t\t\tconst counts = object._multiDrawCounts;\n\t\t\tconst drawCount = object._multiDrawCount;\n\t\t\tconst drawInstances = object._multiDrawInstances;\n\n\t\t\tconst bytesPerElement = hasIndex ? index.array.BYTES_PER_ELEMENT : 1;\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\tconst count = drawInstances ? drawInstances[ i ] : 1;\n\t\t\t\tconst firstInstance = count > 1 ? 0 : i;\n\n\t\t\t\tpassEncoderGPU.drawIndexed( counts[ i ], count, starts[ i ] / bytesPerElement, 0, firstInstance );\n\n\t\t\t}\n\n\t\t} else if ( hasIndex === true ) {\n\n\t\t\tconst { vertexCount: indexCount, instanceCount, firstVertex: firstIndex } = drawParms;\n\n\t\t\tpassEncoderGPU.drawIndexed( indexCount, instanceCount, firstIndex, 0, 0 );\n\n\t\t\tinfo.update( object, indexCount, instanceCount );\n\n\t\t} else {\n\n\t\t\tconst { vertexCount, instanceCount, firstVertex } = drawParms;\n\n\t\t\tpassEncoderGPU.draw( vertexCount, instanceCount, firstVertex, 0 );\n\n\t\t\tinfo.update( object, vertexCount, instanceCount );\n\n\t\t}\n\n\t}\n\n\t// cache key\n\n\tneedsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\n\t\tconst sampleCount = utils.getSampleCountRenderContext( renderObject.context );\n\t\tconst colorSpace = utils.getCurrentColorSpace( renderObject.context );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\t\tconst primitiveTopology = utils.getPrimitiveTopology( object, material );\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( data.material !== material || data.materialVersion !== material.version ||\n\t\t\tdata.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha ||\n\t\t\tdata.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation ||\n\t\t\tdata.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha ||\n\t\t\tdata.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc ||\n\t\t\tdata.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc ||\n\t\t\tdata.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass ||\n\t\t\tdata.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask ||\n\t\t\tdata.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage ||\n\t\t\tdata.sampleCount !== sampleCount || data.colorSpace !== colorSpace ||\n\t\t\tdata.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat ||\n\t\t\tdata.primitiveTopology !== primitiveTopology ||\n\t\t\tdata.clippingContextCacheKey !== renderObject.clippingContext.cacheKey\n\t\t) {\n\n\t\t\tdata.material = material; data.materialVersion = material.version;\n\t\t\tdata.transparent = material.transparent; data.blending = material.blending; data.premultipliedAlpha = material.premultipliedAlpha;\n\t\t\tdata.blendSrc = material.blendSrc; data.blendDst = material.blendDst; data.blendEquation = material.blendEquation;\n\t\t\tdata.blendSrcAlpha = material.blendSrcAlpha; data.blendDstAlpha = material.blendDstAlpha; data.blendEquationAlpha = material.blendEquationAlpha;\n\t\t\tdata.colorWrite = material.colorWrite;\n\t\t\tdata.depthWrite = material.depthWrite; data.depthTest = material.depthTest; data.depthFunc = material.depthFunc;\n\t\t\tdata.stencilWrite = material.stencilWrite; data.stencilFunc = material.stencilFunc;\n\t\t\tdata.stencilFail = material.stencilFail; data.stencilZFail = material.stencilZFail; data.stencilZPass = material.stencilZPass;\n\t\t\tdata.stencilFuncMask = material.stencilFuncMask; data.stencilWriteMask = material.stencilWriteMask;\n\t\t\tdata.side = material.side; data.alphaToCoverage = material.alphaToCoverage;\n\t\t\tdata.sampleCount = sampleCount;\n\t\t\tdata.colorSpace = colorSpace;\n\t\t\tdata.colorFormat = colorFormat;\n\t\t\tdata.depthStencilFormat = depthStencilFormat;\n\t\t\tdata.primitiveTopology = primitiveTopology;\n\t\t\tdata.clippingContextCacheKey = renderObject.clippingContext.cacheKey;\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\treturn needsUpdate;\n\n\t}\n\n\tgetRenderCacheKey( renderObject ) {\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\t\tconst renderContext = renderObject.context;\n\n\t\treturn [\n\t\t\tmaterial.transparent, material.blending, material.premultipliedAlpha,\n\t\t\tmaterial.blendSrc, material.blendDst, material.blendEquation,\n\t\t\tmaterial.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha,\n\t\t\tmaterial.colorWrite,\n\t\t\tmaterial.depthWrite, material.depthTest, material.depthFunc,\n\t\t\tmaterial.stencilWrite, material.stencilFunc,\n\t\t\tmaterial.stencilFail, material.stencilZFail, material.stencilZPass,\n\t\t\tmaterial.stencilFuncMask, material.stencilWriteMask,\n\t\t\tmaterial.side,\n\t\t\tutils.getSampleCountRenderContext( renderContext ),\n\t\t\tutils.getCurrentColorSpace( renderContext ), utils.getCurrentColorFormat( renderContext ), utils.getCurrentDepthStencilFormat( renderContext ),\n\t\t\tutils.getPrimitiveTopology( object, material ),\n\t\t\trenderObject.clippingContext.cacheKey\n\t\t].join();\n\n\t}\n\n\t// textures\n\n\tcreateSampler( texture ) {\n\n\t\tthis.textureUtils.createSampler( texture );\n\n\t}\n\n\tdestroySampler( texture ) {\n\n\t\tthis.textureUtils.destroySampler( texture );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tthis.textureUtils.createDefaultTexture( texture );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tthis.textureUtils.createTexture( texture, options );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tthis.textureUtils.updateTexture( texture, options );\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tthis.textureUtils.destroyTexture( texture );\n\n\t}\n\n\tcopyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );\n\n\t}\n\n\n\tinitTimestampQuery( renderContext, descriptor ) {\n\n\t\tif ( ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tif ( ! renderContextData.timeStampQuerySet ) {\n\n\t\t\t// Create a GPUQuerySet which holds 2 timestamp query results: one for the\n\t\t\t// beginning and one for the end of compute pass execution.\n\t\t\tconst timeStampQuerySet = this.device.createQuerySet( { type: 'timestamp', count: 2 } );\n\n\t\t\tconst timestampWrites = {\n\t\t\t\tquerySet: timeStampQuerySet,\n\t\t\t\tbeginningOfPassWriteIndex: 0, // Write timestamp in index 0 when pass begins.\n\t\t\t\tendOfPassWriteIndex: 1, // Write timestamp in index 1 when pass ends.\n\t\t\t};\n\n\t\t\tObject.assign( descriptor, {\n\t\t\t\ttimestampWrites,\n\t\t\t} );\n\n\t\t\trenderContextData.timeStampQuerySet = timeStampQuerySet;\n\n\t\t}\n\n\t}\n\n\t// timestamp utils\n\n\tprepareTimestampBuffer( renderContext, encoder ) {\n\n\t\tif ( ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\n\t\tconst size = 2 * BigInt64Array.BYTES_PER_ELEMENT;\n\n\t\tif ( renderContextData.currentTimestampQueryBuffers === undefined ) {\n\n\t\t\trenderContextData.currentTimestampQueryBuffers = {\n\t\t\t\tresolveBuffer: this.device.createBuffer( {\n\t\t\t\t\tlabel: 'timestamp resolve buffer',\n\t\t\t\t\tsize: size,\n\t\t\t\t\tusage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,\n\t\t\t\t} ),\n\t\t\t\tresultBuffer: this.device.createBuffer( {\n\t\t\t\t\tlabel: 'timestamp result buffer',\n\t\t\t\t\tsize: size,\n\t\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n\t\t\t\t} ),\n\t\t\t\tisMappingPending: false,\n\t\t\t};\n\n\t\t}\n\n\t\tconst { resolveBuffer, resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;\n\n\t\tif ( isMappingPending === true ) return;\n\n\t\tencoder.resolveQuerySet( renderContextData.timeStampQuerySet, 0, 2, resolveBuffer, 0 );\n\t\tencoder.copyBufferToBuffer( resolveBuffer, 0, resultBuffer, 0, size );\n\n\t}\n\n\tasync resolveTimestampAsync( renderContext, type = 'render' ) {\n\n\t\tif ( ! this.trackTimestamp ) return;\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tif ( renderContextData.currentTimestampQueryBuffers === undefined ) return;\n\n\t\tconst { resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;\n\n\t\tif ( isMappingPending === true ) return;\n\n\t\trenderContextData.currentTimestampQueryBuffers.isMappingPending = true;\n\n\t\tresultBuffer.mapAsync( GPUMapMode.READ ).then( () => {\n\n\t\t\tconst times = new BigUint64Array( resultBuffer.getMappedRange() );\n\t\t\tconst duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;\n\n\n\t\t\tthis.renderer.info.updateTimestamp( type, duration );\n\n\t\t\tresultBuffer.unmap();\n\n\t\t\trenderContextData.currentTimestampQueryBuffers.isMappingPending = false;\n\n\t\t} );\n\n\t}\n\n\t// node builder\n\n\tcreateNodeBuilder( object, renderer ) {\n\n\t\treturn new WGSLNodeBuilder( object, renderer );\n\n\t}\n\n\t// program\n\n\tcreateProgram( program ) {\n\n\t\tconst programGPU = this.get( program );\n\n\t\tprogramGPU.module = {\n\t\t\tmodule: this.device.createShaderModule( { code: program.code, label: program.stage } ),\n\t\t\tentryPoint: 'main'\n\t\t};\n\n\t}\n\n\tdestroyProgram( program ) {\n\n\t\tthis.delete( program );\n\n\t}\n\n\t// pipelines\n\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tthis.pipelineUtils.createRenderPipeline( renderObject, promises );\n\n\t}\n\n\tcreateComputePipeline( computePipeline, bindings ) {\n\n\t\tthis.pipelineUtils.createComputePipeline( computePipeline, bindings );\n\n\t}\n\n\tbeginBundle( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\trenderContextData._currentPass = renderContextData.currentPass;\n\t\trenderContextData._currentSets = renderContextData.currentSets;\n\n\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\t\trenderContextData.currentPass = this.pipelineUtils.createBundleEncoder( renderContext );\n\n\t}\n\n\tfinishBundle( renderContext, bundle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst bundleEncoder = renderContextData.currentPass;\n\t\tconst bundleGPU = bundleEncoder.finish();\n\n\t\tthis.get( bundle ).bundleGPU = bundleGPU;\n\n\t\t// restore render pass state\n\n\t\trenderContextData.currentSets = renderContextData._currentSets;\n\t\trenderContextData.currentPass = renderContextData._currentPass;\n\n\t}\n\n\taddBundle( renderContext, bundle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\trenderContextData.renderBundles.push( this.get( bundle ).bundleGPU );\n\n\t}\n\n\t// bindings\n\n\tcreateBindings( bindGroup ) {\n\n\t\tthis.bindingUtils.createBindings( bindGroup );\n\n\t}\n\n\tupdateBindings( bindGroup ) {\n\n\t\tthis.bindingUtils.createBindings( bindGroup );\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tthis.bindingUtils.updateBinding( binding );\n\n\t}\n\n\t// attributes\n\n\tcreateIndexAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tcreateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tcreateStorageAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tthis.attributeUtils.destroyAttribute( attribute );\n\n\t}\n\n\t// canvas\n\n\tupdateSize() {\n\n\t\tthis.colorBuffer = this.textureUtils.getColorBuffer();\n\t\tthis.defaultRenderPassdescriptor = null;\n\n\t}\n\n\t// utils public\n\n\tgetMaxAnisotropy() {\n\n\t\treturn 16;\n\n\t}\n\n\thasFeature( name ) {\n\n\t\treturn this.device.features.has( name );\n\n\t}\n\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\n\n\t\tlet dstX = 0;\n\t\tlet dstY = 0;\n\t\tlet dstLayer = 0;\n\n\t\tlet srcX = 0;\n\t\tlet srcY = 0;\n\t\tlet srcLayer = 0;\n\n\t\tlet srcWidth = srcTexture.image.width;\n\t\tlet srcHeight = srcTexture.image.height;\n\n\t\tif ( srcRegion !== null ) {\n\n\t\t\tsrcX = srcRegion.x;\n\t\t\tsrcY = srcRegion.y;\n\t\t\tsrcLayer = srcRegion.z || 0;\n\t\t\tsrcWidth = srcRegion.width;\n\t\t\tsrcHeight = srcRegion.height;\n\n\t\t}\n\n\t\tif ( dstPosition !== null ) {\n\n\t\t\tdstX = dstPosition.x;\n\t\t\tdstY = dstPosition.y;\n\t\t\tdstLayer = dstPosition.z || 0;\n\n\t\t}\n\n\t\tconst encoder = this.device.createCommandEncoder( { label: 'copyTextureToTexture_' + srcTexture.id + '_' + dstTexture.id } );\n\n\t\tconst sourceGPU = this.get( srcTexture ).texture;\n\t\tconst destinationGPU = this.get( dstTexture ).texture;\n\n\t\tencoder.copyTextureToTexture(\n\t\t\t{\n\t\t\t\ttexture: sourceGPU,\n\t\t\t\tmipLevel: level,\n\t\t\t\torigin: { x: srcX, y: srcY, z: srcLayer }\n\t\t\t},\n\t\t\t{\n\t\t\t\ttexture: destinationGPU,\n\t\t\t\tmipLevel: level,\n\t\t\t\torigin: { x: dstX, y: dstY, z: dstLayer }\n\t\t\t},\n\t\t\t[\n\t\t\t\tsrcWidth,\n\t\t\t\tsrcHeight,\n\t\t\t\t1\n\t\t\t]\n\t\t);\n\n\t\tthis.device.queue.submit( [ encoder.finish() ] );\n\n\t}\n\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst { encoder, descriptor } = renderContextData;\n\n\t\tlet sourceGPU = null;\n\n\t\tif ( renderContext.renderTarget ) {\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tsourceGPU = this.get( renderContext.depthTexture ).texture;\n\n\t\t\t} else {\n\n\t\t\t\tsourceGPU = this.get( renderContext.textures[ 0 ] ).texture;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tsourceGPU = this.textureUtils.getDepthBuffer( renderContext.depth, renderContext.stencil );\n\n\t\t\t} else {\n\n\t\t\t\tsourceGPU = this.context.getCurrentTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst destinationGPU = this.get( texture ).texture;\n\n\t\tif ( sourceGPU.format !== destinationGPU.format ) {\n\n\t\t\tconsole.error( 'WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.', sourceGPU.format, destinationGPU.format );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\trenderContextData.currentPass.end();\n\n\t\tencoder.copyTextureToTexture(\n\t\t\t{\n\t\t\t\ttexture: sourceGPU,\n\t\t\t\torigin: { x: rectangle.x, y: rectangle.y, z: 0 }\n\t\t\t},\n\t\t\t{\n\t\t\t\ttexture: destinationGPU\n\t\t\t},\n\t\t\t[\n\t\t\t\trectangle.z,\n\t\t\t\trectangle.w\n\t\t\t]\n\t\t);\n\n\t\tif ( texture.generateMipmaps ) this.textureUtils.generateMipmaps( texture );\n\n\t\tfor ( let i = 0; i < descriptor.colorAttachments.length; i ++ ) {\n\n\t\t\tdescriptor.colorAttachments[ i ].loadOp = GPULoadOp.Load;\n\n\t\t}\n\n\t\tif ( renderContext.depth ) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\tif ( renderContext.stencil ) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\trenderContextData.currentPass = encoder.beginRenderPass( descriptor );\n\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\n\t}\n\n}\n\nexport default WebGPUBackend;\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\nimport { Euler } from '../math/Euler.js';\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshPhongMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { shininess, specularColor } from '../../nodes/core/PropertyNode.js';\nimport { materialShininess, materialSpecular } from '../../nodes/accessors/MaterialNode.js';\nimport { float } from '../../nodes/tsl/TSLBase.js';\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\nimport PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';\n\nimport { MeshPhongMaterial } from '../MeshPhongMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshPhongMaterial();\n\nclass MeshPhongNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhongNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.shininessNode = null;\n\t\tthis.specularNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhongLightingModel();\n\n\t}\n\n\tsetupVariants() {\n\n\t\t// SHININESS\n\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tshininess.assign( shininessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tconst specularNode = this.specularNode || materialSpecular;\n\n\t\tspecularColor.assign( specularNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.shininessNode = source.shininessNode;\n\t\tthis.specularNode = source.specularNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhongNodeMaterial;\n", "import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\nimport { Euler } from '../math/Euler.js';\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshStandardMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { diffuseColor, metalness, roughness, specularColor, specularF90 } from '../../nodes/core/PropertyNode.js';\nimport { mix } from '../../nodes/math/MathNode.js';\nimport { materialRoughness, materialMetalness } from '../../nodes/accessors/MaterialNode.js';\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\nimport EnvironmentNode from '../../nodes/lighting/EnvironmentNode.js';\nimport { float, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\n\nimport { MeshStandardMaterial } from '../MeshStandardMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshStandardMaterial();\n\nclass MeshStandardNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshStandardNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.emissiveNode = null;\n\n\t\tthis.metalnessNode = null;\n\t\tthis.roughnessNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupEnvironment( builder ) {\n\n\t\tlet envNode = super.setupEnvironment( builder );\n\n\t\tif ( envNode === null && builder.environmentNode ) {\n\n\t\t\tenvNode = builder.environmentNode;\n\n\t\t}\n\n\t\treturn envNode ? new EnvironmentNode( envNode ) : null;\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel();\n\n\t}\n\n\tsetupSpecular() {\n\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalness );\n\n\t\tspecularColor.assign( specularColorNode );\n\t\tspecularF90.assign( 1.0 );\n\n\t}\n\n\tsetupVariants() {\n\n\t\t// METALNESS\n\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\n\n\t\tmetalness.assign( metalnessNode );\n\n\t\t// ROUGHNESS\n\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\n\n\t\troughness.assign( roughnessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tthis.setupSpecular();\n\n\t\t// DIFFUSE COLOR\n\n\t\tdiffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.emissiveNode = source.emissiveNode;\n\n\t\tthis.metalnessNode = source.metalnessNode;\n\t\tthis.roughnessNode = source.roughnessNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshStandardNodeMaterial;\n", "import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\nimport * as MathUtils from '../math/MathUtils.js';\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.anisotropyRotation = 0;\n\t\tthis.anisotropyMap = null;\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( MathUtils.clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._dispersion = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget dispersion() {\n\n\t\treturn this._dispersion;\n\n\t}\n\n\tset dispersion( value ) {\n\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._dispersion = value;\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.dispersion = source.dispersion;\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshPhysicalMaterial };\n", "import { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../../nodes/core/PropertyNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../../nodes/accessors/MaterialNode.js';\nimport { float, vec2, vec3, If } from '../../nodes/tsl/TSLBase.js';\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\nimport { TBNViewMatrix } from '../../nodes/accessors/AccessorsUtils.js';\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { mix, pow2, min } from '../../nodes/math/MathNode.js';\n\nimport { MeshPhysicalMaterial } from '../MeshPhysicalMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshPhysicalMaterial();\n\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhysicalNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\tthis.clearcoatNode = null;\n\t\tthis.clearcoatRoughnessNode = null;\n\t\tthis.clearcoatNormalNode = null;\n\n\t\tthis.sheenNode = null;\n\t\tthis.sheenRoughnessNode = null;\n\n\t\tthis.iridescenceNode = null;\n\t\tthis.iridescenceIORNode = null;\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\tthis.specularIntensityNode = null;\n\t\tthis.specularColorNode = null;\n\n\t\tthis.iorNode = null;\n\t\tthis.transmissionNode = null;\n\t\tthis.thicknessNode = null;\n\t\tthis.attenuationDistanceNode = null;\n\t\tthis.attenuationColorNode = null;\n\t\tthis.dispersionNode = null;\n\n\t\tthis.anisotropyNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget useClearcoat() {\n\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\n\n\t}\n\n\tget useIridescence() {\n\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\n\n\t}\n\n\tget useSheen() {\n\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\n\n\t}\n\n\tget useAnisotropy() {\n\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\n\n\t}\n\n\tget useTransmission() {\n\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\n\n\t}\n\n\tget useDispersion() {\n\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\n\n\t}\n\n\tsetupSpecular() {\n\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\n\n\t\tior.assign( iorNode );\n\t\tspecularColor.assign( mix( min( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\t// CLEARCOAT\n\n\t\tif ( this.useClearcoat ) {\n\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\t\tclearcoat.assign( clearcoatNode );\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\n\n\t\t}\n\n\t\t// SHEEN\n\n\t\tif ( this.useSheen ) {\n\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\t\tsheen.assign( sheenNode );\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\n\n\t\t}\n\n\t\t// IRIDESCENCE\n\n\t\tif ( this.useIridescence ) {\n\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\t\tiridescence.assign( iridescenceNode );\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\n\n\t\t}\n\n\t\t// ANISOTROPY\n\n\t\tif ( this.useAnisotropy ) {\n\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\n\n\t\t\tanisotropy.assign( anisotropyV.length() );\n\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\n\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\n\n\t\t\t} ).Else( () => {\n\n\t\t\t\tanisotropyV.divAssign( vec2( anisotropy ) );\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\n\n\t\t\t} );\n\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\n\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\n\n\t\t}\n\n\t\t// TRANSMISSION\n\n\t\tif ( this.useTransmission ) {\n\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\n\n\t\t\ttransmission.assign( transmissionNode );\n\t\t\tthickness.assign( thicknessNode );\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\n\t\t\tattenuationColor.assign( attenuationColorNode );\n\n\t\t\tif ( this.useDispersion ) {\n\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\n\n\t\t\t\tdispersion.assign( dispersionNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetupClearcoatNormal() {\n\n\t\treturn this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.context.setupClearcoatNormal = () => this.setupClearcoatNormal( builder );\n\n\t\tsuper.setup( builder );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\t\tthis.dispersionNode = source.dispersionNode;\n\n\t\tthis.anisotropyNode = source.anisotropyNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhysicalNodeMaterial;\n", "import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshToonMaterial };\n", "import LightingModel from '../core/LightingModel.js';\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { normalGeometry } from '../accessors/Normal.js';\nimport { Fn, float, vec2, vec3 } from '../tsl/TSLBase.js';\nimport { mix, smoothstep } from '../math/MathNode.js';\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\n\nconst getGradientIrradiance = /*@__PURE__*/ Fn( ( { normal, lightDirection, builder } ) => {\n\n\t// dotNL will be from -1.0 to 1.0\n\tconst dotNL = normal.dot( lightDirection );\n\tconst coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );\n\n\tif ( builder.material.gradientMap ) {\n\n\t\tconst gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );\n\n\t\treturn vec3( gradientMap.r );\n\n\t} else {\n\n\t\tconst fw = coord.fwidth().mul( 0.5 );\n\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );\n\n\t}\n\n} );\n\nclass ToonLightingModel extends LightingModel {\n\n\tdirect( { lightDirection, lightColor, reflectedLight }, stack, builder ) {\n\n\t\tconst irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t}\n\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t}\n\n}\n\nexport default ToonLightingModel;\n", "import NodeMaterial from './NodeMaterial.js';\nimport ToonLightingModel from '../../nodes/functions/ToonLightingModel.js';\n\nimport { MeshToonMaterial } from '../MeshToonMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshToonMaterial();\n\nclass MeshToonNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshToonNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new ToonLightingModel();\n\n\t}\n\n}\n\nexport default MeshToonNodeMaterial;\n", "import LightingNode from './LightingNode.js';\nimport { float } from '../tsl/TSLBase.js';\n\nclass BasicLightMapNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'BasicLightMapNode';\n\n\t}\n\n\tconstructor( lightMapNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.lightMapNode = lightMapNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel\n\n\t\tconst RECIPROCAL_PI = float( 1 / Math.PI );\n\n\t\tbuilder.context.irradianceLightMap = this.lightMapNode.mul( RECIPROCAL_PI );\n\n\t}\n\n}\n\nexport default BasicLightMapNode;\n", "import NodeMaterial from './NodeMaterial.js';\nimport { materialLightMap } from '../../nodes/accessors/MaterialNode.js';\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\nimport BasicLightMapNode from '../../nodes/lighting/BasicLightMapNode.js';\nimport BasicLightingModel from '../../nodes/functions/BasicLightingModel.js';\nimport { normalView } from '../../nodes/accessors/Normal.js';\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\n\nimport { MeshBasicMaterial } from '../MeshBasicMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshBasicMaterial();\n\nclass MeshBasicNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshBasicNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupNormal() {\n\n\t\treturn normalView; // see #28839\n\n\t}\n\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\tsetupLightMap( builder ) {\n\n\t\tlet node = null;\n\n\t\tif ( builder.material.lightMap ) {\n\n\t\t\tnode = new BasicLightMapNode( materialLightMap );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tsetupOutgoingLight() {\n\n\t\treturn diffuseColor.rgb;\n\n\t}\n\n\tsetupLightingModel() {\n\n\t\treturn new BasicLightingModel();\n\n\t}\n\n}\n\nexport default MeshBasicNodeMaterial;\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\nimport { Euler } from '../math/Euler.js';\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshLambertMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\nimport PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';\n\nimport { MeshLambertMaterial } from '../MeshLambertMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshLambertMaterial();\n\nclass MeshLambertNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshLambertNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhongLightingModel( false ); // ( specular ) -> force lambert\n\n\t}\n\n}\n\nexport default MeshLambertNodeMaterial;\n", "import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshNormalMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\nimport { directionToColor } from '../../nodes/utils/Packing.js';\nimport { materialOpacity } from '../../nodes/accessors/MaterialNode.js';\nimport { transformedNormalView } from '../../nodes/accessors/Normal.js';\nimport { float, vec4 } from '../../nodes/tsl/TSLBase.js';\n\nimport { MeshNormalMaterial } from '../MeshNormalMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshNormalMaterial();\n\nclass MeshNormalNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshNormalNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.lights = false;\n\n\t\tthis.isMeshNormalNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupDiffuseColor() {\n\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\n\t\tdiffuseColor.assign( vec4( directionToColor( transformedNormalView ), opacityNode ) );\n\n\t}\n\n}\n\nexport default MeshNormalNodeMaterial;\n", "import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshMatcapMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\nimport { vec3 } from '../../nodes/tsl/TSLBase.js';\nimport { mix } from '../../nodes/math/MathNode.js';\nimport { matcapUV } from '../../nodes/utils/MatcapUVNode.js';\n\nimport { MeshMatcapMaterial } from '../MeshMatcapMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshMatcapMaterial();\n\nclass MeshMatcapNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshMatcapNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.lights = false;\n\n\t\tthis.isMeshMatcapNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tconst uv = matcapUV;\n\n\t\tlet matcapColor;\n\n\t\tif ( builder.material.matcap ) {\n\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\n\n\t\t} else {\n\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\n\n\t\t}\n\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\n\n\t}\n\n}\n\n\nexport default MeshMatcapNodeMaterial;\n", "import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineBasicMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\n\nimport { LineBasicMaterial } from '../LineBasicMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new LineBasicMaterial();\n\nclass LineBasicNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'LineBasicNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicNodeMaterial = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nexport default LineBasicNodeMaterial;\n", "import { LineBasicMaterial } from './LineBasicMaterial.js';\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineDashedMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { attribute } from '../../nodes/core/AttributeNode.js';\nimport { materialLineDashSize, materialLineGapSize, materialLineScale } from '../../nodes/accessors/MaterialNode.js';\nimport { dashSize, gapSize } from '../../nodes/core/PropertyNode.js';\nimport { varying, float } from '../../nodes/tsl/TSLBase.js';\n\nimport { LineDashedMaterial } from '../LineDashedMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\n\nclass LineDashedNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'LineDashedNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedNodeMaterial = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.offsetNode = null;\n\t\tthis.dashScaleNode = null;\n\t\tthis.dashSizeNode = null;\n\t\tthis.gapSizeNode = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupVariants() {\n\n\t\tconst offsetNode = this.offsetNode;\n\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\n\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\n\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\n\n\t\tdashSize.assign( dashSizeNode );\n\t\tgapSize.assign( gapSizeNode );\n\n\t\tconst vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );\n\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\n\n\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();\n\n\t}\n\n}\n\nexport default LineDashedNodeMaterial;\n", "import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { SpriteMaterial };\n", "import NodeMaterial from './NodeMaterial.js';\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\nimport { materialRotation } from '../../nodes/accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../../nodes/accessors/ModelNode.js';\nimport { positionLocal } from '../../nodes/accessors/Position.js';\nimport { rotate } from '../../nodes/utils/RotateNode.js';\nimport { float, vec2, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\n\nimport { SpriteMaterial } from '../SpriteMaterial.js';\nimport { reference } from '../../nodes/accessors/ReferenceBaseNode.js';\n\nconst _defaultValues = /*@__PURE__*/ new SpriteMaterial();\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'SpriteNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis.lights = false;\n\t\tthis._useSizeAttenuation = true;\n\n\t\tthis.positionNode = null;\n\t\tthis.rotationNode = null;\n\t\tthis.scaleNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPosition( { object, camera, context } ) {\n\n\t\tconst sizeAttenuation = this.sizeAttenuation;\n\n\t\t// < VERTEX STAGE >\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst vertex = positionLocal;\n\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( scaleNode );\n\n\t\t}\n\n\n\t\tif ( ! sizeAttenuation && camera.isPerspectiveCamera ) {\n\n\t\t\tscale = scale.mul( mvPosition.z.negate() );\n\n\t\t}\n\n\t\tlet alignedPosition = vertex.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\tconst center = reference( 'center', 'vec2' );\n\n\t\t\talignedPosition = alignedPosition.sub( center.sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst rotatedPosition = rotate( alignedPosition, rotation );\n\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\n\n\t\tcontext.vertex = vertex;\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n\tget sizeAttenuation() {\n\n\t\treturn this._useSizeAttenuation;\n\n\t}\n\n\tset sizeAttenuation( value ) {\n\n\t\tif ( this._useSizeAttenuation !== value ) {\n\n\t\t\tthis._useSizeAttenuation = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nexport default SpriteNodeMaterial;\n", "import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { ShadowMaterial };\n", "import LightingModel from '../core/LightingModel.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { float } from '../tsl/TSLBase.js';\n\nclass ShadowMaskModel extends LightingModel {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.shadowNode = float( 1 ).toVar( 'shadowMask' );\n\n\t}\n\n\tdirect( { shadowMask } ) {\n\n\t\tthis.shadowNode.mulAssign( shadowMask );\n\n\t}\n\n\tfinish( context ) {\n\n\t\tdiffuseColor.a.mulAssign( this.shadowNode.oneMinus() );\n\n\t\tcontext.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment\n\n\t}\n\n}\n\nexport default ShadowMaskModel;\n", "import NodeMaterial from './NodeMaterial.js';\nimport ShadowMaskModel from '../../nodes/functions/ShadowMaskModel.js';\n\nimport { ShadowMaterial } from '../ShadowMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new ShadowMaterial();\n\nclass ShadowNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'ShadowNodeMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowNodeMaterial = true;\n\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new ShadowMaskModel();\n\n\t}\n\n}\n\nexport default ShadowNodeMaterial;\n", "import { Object3D } from '../core/Object3D.js';\nimport { Color } from '../math/Color.js';\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { Light };\n", "import { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Frustum } from '../math/Frustum.js';\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.intensity = 1;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.intensity = source.intensity;\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nexport { LightShadow };\n", "import { LightShadow } from './LightShadow.js';\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nexport { PointLightShadow };\n", "import { Light } from './Light.js';\nimport { PointLightShadow } from './PointLightShadow.js';\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay;\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { PointLight };\n", "import { LightShadow } from './LightShadow.js';\nimport { OrthographicCamera } from '../cameras/OrthographicCamera.js';\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\nexport { DirectionalLightShadow };\n", "import { Light } from './Light.js';\nimport { DirectionalLightShadow } from './DirectionalLightShadow.js';\nimport { Object3D } from '../core/Object3D.js';\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { DirectionalLight };\n", "import { Light } from './Light.js';\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { RectAreaLight };\n", "import { LightShadow } from './LightShadow.js';\nimport * as MathUtils from '../math/MathUtils.js';\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.isSpotLightShadow = true;\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { SpotLightShadow };\n", "import { Light } from './Light.js';\nimport { SpotLightShadow } from './SpotLightShadow.js';\nimport { Object3D } from '../core/Object3D.js';\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay;\n\n\t\tthis.map = null;\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { SpotLight };\n", "import { Light } from './Light.js';\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nexport { AmbientLight };\n", "import { Light } from './Light.js';\nimport { Color } from '../math/Color.js';\nimport { Object3D } from '../core/Object3D.js';\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { HemisphereLight };\n", "import { Vector3 } from './Vector3.js';\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nexport { SphericalHarmonics3 };\n", "import { SphericalHarmonics3 } from '../math/SphericalHarmonics3.js';\nimport { Light } from './Light.js';\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isLightProbe = true;\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { LightProbe };\n", "import { SpotLight } from '../SpotLight.js';\n\nclass IESSpotLight extends SpotLight {\n\n\tconstructor( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tsuper( color, intensity, distance, angle, penumbra, decay );\n\n\t\tthis.iesMap = null;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.iesMap = source.iesMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport default IESSpotLight;\n", "import NodeLibrary from '../../common/nodes/NodeLibrary.js';\n\n// Materials\nimport { MeshPhongMaterial } from '../../../materials/MeshPhongMaterial.js';\nimport MeshPhongNodeMaterial from '../../../materials/nodes/MeshPhongNodeMaterial.js';\nimport { MeshStandardMaterial } from '../../../materials/MeshStandardMaterial.js';\nimport MeshStandardNodeMaterial from '../../../materials/nodes/MeshStandardNodeMaterial.js';\nimport { MeshPhysicalMaterial } from '../../../materials/MeshPhysicalMaterial.js';\nimport MeshPhysicalNodeMaterial from '../../../materials/nodes/MeshPhysicalNodeMaterial.js';\nimport { MeshToonMaterial } from '../../../materials/MeshToonMaterial.js';\nimport MeshToonNodeMaterial from '../../../materials/nodes/MeshToonNodeMaterial.js';\nimport { MeshBasicMaterial } from '../../../materials/MeshBasicMaterial.js';\nimport MeshBasicNodeMaterial from '../../../materials/nodes/MeshBasicNodeMaterial.js';\nimport { MeshLambertMaterial } from '../../../materials/MeshLambertMaterial.js';\nimport MeshLambertNodeMaterial from '../../../materials/nodes/MeshLambertNodeMaterial.js';\nimport { MeshNormalMaterial } from '../../../materials/MeshNormalMaterial.js';\nimport MeshNormalNodeMaterial from '../../../materials/nodes/MeshNormalNodeMaterial.js';\nimport { MeshMatcapMaterial } from '../../../materials/MeshMatcapMaterial.js';\nimport MeshMatcapNodeMaterial from '../../../materials/nodes/MeshMatcapNodeMaterial.js';\nimport { LineBasicMaterial } from '../../../materials/LineBasicMaterial.js';\nimport LineBasicNodeMaterial from '../../../materials/nodes/LineBasicNodeMaterial.js';\nimport { LineDashedMaterial } from '../../../materials/LineDashedMaterial.js';\nimport LineDashedNodeMaterial from '../../../materials/nodes/LineDashedNodeMaterial.js';\nimport { PointsMaterial } from '../../../materials/PointsMaterial.js';\nimport PointsNodeMaterial from '../../../materials/nodes/PointsNodeMaterial.js';\nimport { SpriteMaterial } from '../../../materials/SpriteMaterial.js';\nimport SpriteNodeMaterial from '../../../materials/nodes/SpriteNodeMaterial.js';\nimport { ShadowMaterial } from '../../../materials/ShadowMaterial.js';\nimport ShadowNodeMaterial from '../../../materials/nodes/ShadowNodeMaterial.js';\n//import { MeshDepthMaterial } from '../../../materials/MeshDepthMaterial.js';\n//import MeshDepthNodeMaterial from '../../../materials/nodes/MeshDepthNodeMaterial.js';\n//import { MeshDistanceMaterial } from '../../../materials/MeshDistanceMaterial.js';\n//import MeshDistanceNodeMaterial from '../../../materials/nodes/MeshDistanceNodeMaterial.js';\n\n// Lights\nimport { PointLight } from '../../../lights/PointLight.js';\nimport { PointLightNode } from '../../../nodes/Nodes.js';\nimport { DirectionalLight } from '../../../lights/DirectionalLight.js';\nimport { DirectionalLightNode } from '../../../nodes/Nodes.js';\nimport { RectAreaLight } from '../../../lights/RectAreaLight.js';\nimport { RectAreaLightNode } from '../../../nodes/Nodes.js';\nimport { SpotLight } from '../../../lights/SpotLight.js';\nimport { SpotLightNode } from '../../../nodes/Nodes.js';\nimport { AmbientLight } from '../../../lights/AmbientLight.js';\nimport { AmbientLightNode } from '../../../nodes/Nodes.js';\nimport { HemisphereLight } from '../../../lights/HemisphereLight.js';\nimport { HemisphereLightNode } from '../../../nodes/Nodes.js';\nimport { LightProbe } from '../../../lights/LightProbe.js';\nimport { LightProbeNode } from '../../../nodes/Nodes.js';\nimport IESSpotLight from '../../../lights/webgpu/IESSpotLight.js';\nimport { IESSpotLightNode } from '../../../nodes/Nodes.js';\n\n// Tone Mapping\nimport { LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping, NeutralToneMapping } from '../../../constants.js';\nimport { linearToneMapping, reinhardToneMapping, cineonToneMapping, acesFilmicToneMapping, agxToneMapping, neutralToneMapping } from '../../../nodes/display/ToneMappingFunctions.js';\n\n// Color Space\nimport { LinearSRGBColorSpace, SRGBColorSpace } from '../../../constants.js';\nimport { linearSRGBTosRGB, sRGBToLinearSRGB } from '../../../nodes/display/ColorSpaceFunctions.js';\nimport { getColorSpaceMethod } from '../../../nodes/display/ColorSpaceNode.js';\n\nclass StandardNodeLibrary extends NodeLibrary {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.addMaterial( MeshPhongNodeMaterial, MeshPhongMaterial );\n\t\tthis.addMaterial( MeshStandardNodeMaterial, MeshStandardMaterial );\n\t\tthis.addMaterial( MeshPhysicalNodeMaterial, MeshPhysicalMaterial );\n\t\tthis.addMaterial( MeshToonNodeMaterial, MeshToonMaterial );\n\t\tthis.addMaterial( MeshBasicNodeMaterial, MeshBasicMaterial );\n\t\tthis.addMaterial( MeshLambertNodeMaterial, MeshLambertMaterial );\n\t\tthis.addMaterial( MeshNormalNodeMaterial, MeshNormalMaterial );\n\t\tthis.addMaterial( MeshMatcapNodeMaterial, MeshMatcapMaterial );\n\t\tthis.addMaterial( LineBasicNodeMaterial, LineBasicMaterial );\n\t\tthis.addMaterial( LineDashedNodeMaterial, LineDashedMaterial );\n\t\tthis.addMaterial( PointsNodeMaterial, PointsMaterial );\n\t\tthis.addMaterial( SpriteNodeMaterial, SpriteMaterial );\n\t\tthis.addMaterial( ShadowNodeMaterial, ShadowMaterial );\n\n\t\tthis.addLight( PointLightNode, PointLight );\n\t\tthis.addLight( DirectionalLightNode, DirectionalLight );\n\t\tthis.addLight( RectAreaLightNode, RectAreaLight );\n\t\tthis.addLight( SpotLightNode, SpotLight );\n\t\tthis.addLight( AmbientLightNode, AmbientLight );\n\t\tthis.addLight( HemisphereLightNode, HemisphereLight );\n\t\tthis.addLight( LightProbeNode, LightProbe );\n\t\tthis.addLight( IESSpotLightNode, IESSpotLight );\n\n\t\tthis.addToneMapping( linearToneMapping, LinearToneMapping );\n\t\tthis.addToneMapping( reinhardToneMapping, ReinhardToneMapping );\n\t\tthis.addToneMapping( cineonToneMapping, CineonToneMapping );\n\t\tthis.addToneMapping( acesFilmicToneMapping, ACESFilmicToneMapping );\n\t\tthis.addToneMapping( agxToneMapping, AgXToneMapping );\n\t\tthis.addToneMapping( neutralToneMapping, NeutralToneMapping );\n\n\t\tthis.addColorSpace( linearSRGBTosRGB, getColorSpaceMethod( LinearSRGBColorSpace, SRGBColorSpace ) );\n\t\tthis.addColorSpace( sRGBToLinearSRGB, getColorSpaceMethod( SRGBColorSpace, LinearSRGBColorSpace ) );\n\n\t}\n\n}\n\nexport default StandardNodeLibrary;\n", "import Renderer from '../common/Renderer.js';\nimport WebGLBackend from '../webgl-fallback/WebGLBackend.js';\nimport WebGPUBackend from './WebGPUBackend.js';\nimport StandardNodeLibrary from './nodes/StandardNodeLibrary.js';\n/*\nconst debugHandler = {\n\n\tget: function ( target, name ) {\n\n\t\t// Add |update\n\t\tif ( /^(create|destroy)/.test( name ) ) console.log( 'WebGPUBackend.' + name );\n\n\t\treturn target[ name ];\n\n\t}\n\n};\n*/\nclass WebGPURenderer extends Renderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tlet BackendClass;\n\n\t\tif ( parameters.forceWebGL ) {\n\n\t\t\tBackendClass = WebGLBackend;\n\n\t\t} else {\n\n\t\t\tBackendClass = WebGPUBackend;\n\n\t\t\tparameters.getFallback = () => {\n\n\t\t\t\tconsole.warn( 'THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.' );\n\n\t\t\t\treturn new WebGLBackend( parameters );\n\n\t\t\t};\n\n\t\t}\n\n\t\tconst backend = new BackendClass( parameters );\n\n\t\t//super( new Proxy( backend, debugHandler ) );\n\t\tsuper( backend, parameters );\n\n\t\tthis.nodes.library = new StandardNodeLibrary();\n\n\t\tthis.isWebGPURenderer = true;\n\n\t}\n\n}\n\nexport default WebGPURenderer;\n"],
  "mappings": "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",
  "names": ["normal", "direction", "normal", "attribute", "bufferAttribute", "property", "attribute", "bufferAttribute", "arrayNeedsUint32", "attribute", "_id", "code", "code", "attribute", "texture", "textureData", "code", "code", "code", "output", "min", "max", "attribute", "_box", "_v1", "_v2", "length", "_vector", "direction", "sign", "_v1", "_quaternion", "id", "output", "cache", "_v0", "_v1", "_v2", "direction", "attribute", "_id", "_m1", "_box", "_vector", "attribute", "normal", "indices", "uv", "normal", "width", "height", "depth", "property", "uniform", "texture", "_v3", "fov", "aspect", "anisotropy", "texture", "texture", "direction", "uv", "roughness", "clamp", "outputDirection", "texture", "direction", "x", "min", "max", "uv", "_id", "hash", "texture", "context", "cache", "value", "attribute", "length", "bufferAttribute", "code", "output", "reference", "output", "mrt", "output", "_normal", "_target", "uv", "_size", "output", "reference", "output", "texture", "uv", "step", "_size", "texture", "mrt", "_size", "film", "clamp", "anisotropy", "_quadMesh", "_size", "_quadMesh", "_clearColor", "_currentClearColor", "_size", "_size", "_size", "_size", "_quadMesh", "id", "output", "code", "min", "max", "output", "length", "bufferAttribute", "PCFShadowMap", "uv", "reference", "clamp", "_quadMesh", "self", "hash", "uv", "modelViewMatrix", "uv", "uv", "frameId", "velocity", "velocity", "uv", "clamp", "output", "texture", "length", "uv", "hash", "alphaT", "alphaT", "w2", "roughness", "normalView", "roughness", "roughness", "normal", "lightPosition", "context", "reference", "_cache", "texture", "isEquirectangularMapReady", "isEquirectangularMapReady", "texture", "_cache", "type", "name", "code", "context", "stack", "specularColor", "specularF90", "roughness", "roughness", "roughness", "uv", "thickness", "ior", "roughness", "clamp", "attenuationColor", "attenuationDistance", "diffuseColor", "specularColor", "specularF90", "dispersion", "iridescenceIOR", "normal", "clearcoat", "sheen", "iridescence", "anisotropy", "transmission", "context", "lightPosition", "uv", "stack", "id", "texture", "_size", "texture", "image", "normal", "_clearColor", "renderer", "scene", "frameId", "fog", "reference", "output", "_sphere", "_vector", "_vector4", "error", "mrt", "attribute", "buffer", "buffer", "_id", "uniform", "buffer", "_id", "uniform", "_id", "texture", "texture", "code", "attribute", "uniform", "output", "length", "varying", "buffer", "_id", "attribute", "bufferAttribute", "range", "id", "buffer", "initialized", "texture", "buffer", "attribute", "texture", "textures", "context", "code", "texture", "attribute", "_id", "texture", "buffer", "declarationRegexp", "propertiesRegexp", "parse", "name", "type", "supports", "wgslTypeLib", "texture", "buffer", "property", "code", "length", "attribute", "varying", "uniform", "groupName", "output", "texture", "attribute", "bufferAttribute", "buffer", "range", "AttributeType", "buffer", "texture", "attribute", "pipeline", "context", "attribute", "colorAttachment", "texture", "buffer", "_defaultValues", "_defaultValues", "normal", "stack", "_defaultValues", "RECIPROCAL_PI", "_defaultValues", "_defaultValues", "_defaultValues", "_defaultValues", "uv", "_defaultValues", "_defaultValues", "_defaultValues", "context", "modelViewProjection", "context", "_defaultValues", "_projScreenMatrix", "_projScreenMatrix", "_lightPositionWorld", "_lookTarget", "fov", "aspect", "normal"]
}
